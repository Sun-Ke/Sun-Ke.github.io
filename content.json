[{"title":"Markdown For Typora","date":"2020-04-18T14:02:47.000Z","path":"2020/04/18/Markdown For Typora/","text":"Markdown For TyporaOverviewMarkdown is created by Daring Fireball; the original guideline is here. Its syntax, however, varies between different parsers or editors. Typora is using GitHub Flavored Markdown. [toc] Block ElementsParagraph and line breaksA paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by two or more blank lines. In Typora, you only need one blank line (press Return once) to create a new paragraph. Press Shift + Return to create a single line break. Most other markdown parsers will ignore single line breaks, so in order to make other markdown parsers recognize your line break, you can leave two spaces at the end of the line, or insert &lt;br/&gt;. HeadersHeaders use 1-6 hash (#) characters at the start of the line, corresponding to header levels 1-6. For example: 12345# This is an H1## This is an H2###### This is an H6 In Typora, input ‘#’s followed by title content, and press Return key will create a header. BlockquotesMarkdown uses email-style &gt; characters for block quoting. They are presented as: 1234567&gt; This is a blockquote with two paragraphs. This is first paragraph.&gt;&gt; This is second pragraph. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; This is another blockquote with one paragraph. There is three empty line to seperate two blockquote. In Typora, inputting ‘&gt;’ followed by your quote contents will generate a quote block. Typora will insert a proper ‘&gt;’ or line break for you. Nested block quotes (a block quote inside another block quote) by adding additional levels of ‘&gt;’. ListsInput * list item 1 will create an unordered list - the * symbol can be replace with + or -. Input 1. list item 1 will create an ordered list - their markdown source code is as follows: 123456789## un-ordered list* Red* Green* Blue## ordered list1. Red2. Green3. Blue Task ListTask lists are lists with items marked as either [ ] or [x] (incomplete or complete). For example: 12345- [ ] a task list item- [ ] list syntax required- [ ] normal **formatting**, @mentions, #1234 refs- [ ] incomplete- [x] completed You can change the complete/incomplete state by clicking on the checkbox before the item. (Fenced) Code BlocksTypora only supports fences in GitHub Flavored Markdown. Original code blocks in markdown are not supported. Using fences is easy: Input ``` and press return. Add an optional language identifier after ``` and we’ll run it through syntax highlighting: 1Here's an example: function test() { console.log(“notice the blank line before this function?”);} 123456syntax highlighting:​&#96;&#96;&#96;rubyrequire &#39;redcarpet&#39;markdown &#x3D; Redcarpet.new(&quot;Hello World!&quot;)puts markdown.to_html 123456789101112131415161718192021222324252627### Math BlocksYou can render *LaTeX* mathematical expressions using **MathJax**.To add a mathematical expression, input &#96;$$&#96; and press the &#39;Return&#39; key. This will trigger an input field which accepts *Tex&#x2F;LaTex* source. For example:$$\\mathbf&#123;V&#125;_1 \\times \\mathbf&#123;V&#125;_2 &#x3D; \\begin&#123;vmatrix&#125;\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\\\end&#123;vmatrix&#125;$$In the markdown source file, the math block is a *LaTeX* expression wrapped by a pair of ‘$$’ marks:​&#96;&#96;&#96; markdown$$\\mathbf&#123;V&#125;_1 \\times \\mathbf&#123;V&#125;_2 &#x3D; \\begin&#123;vmatrix&#125;\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\\\end&#123;vmatrix&#125;$$ You can find more details here. TablesInput | First Header | Second Header | and press the return key. This will create a table with two columns. After a table is created, putting focus on that table will open up a toolbar for the table where you can resize, align, or delete the table. You can also use the context menu to copy and add/delete individual columns/rows. The full syntax for tables is described below, but it is not necessary to know the full syntax in detail as the markdown source code for tables is generated automatically by Typora. In markdown source code, they look like: 1234| First Header | Second Header || ------------- | ------------- || Content Cell | Content Cell || Content Cell | Content Cell | You can also include inline Markdown such as links, bold, italics, or strikethrough in the table. Finally, by including colons (:) within the header row, you can define text in that column to be left-aligned, right-aligned, or center-aligned: 12345| Left-Aligned | Center Aligned | Right Aligned || :------------ |:---------------:| -----:|| col 3 is | some wordy text | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 | A colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column. Footnotes123You can create footnotes like this[^footnote].[^footnote]: Here is the *text* of the **footnote**. will produce: You can create footnotes like this[^footnote]. [^footnote]: Here is the text of the footnote. Hover over the ‘footnote’ superscript to see content of the footnote. Horizontal RulesInputting *** or --- on a blank line and pressing return will draw a horizontal line. YAML Front MatterTypora now supports YAML Front Matter. Input --- at the top of the article and then press Return to introduce a metadata block. Alternatively, you can insert a metadata block from the top menu of Typora. Table of Contents (TOC)Input [toc] and press the Return key. This will create a “Table of Contents” section. The TOC extracts all headers from the document, and its contents are updated automatically as you add to the document. Span ElementsSpan elements will be parsed and rendered right after typing. Moving the cursor in middle of those span elements will expand those elements into markdown source. Below is an explanation of the syntax for each span element. LinksMarkdown supports two styles of links: inline and reference. In both styles, the link text is delimited by [square brackets]. To create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example: 123This is [an example](http://example.com/ \"Title\") inline link.[This link](http://example.net/) has no title attribute. will produce: This is an example inline link. (&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;) This link has no title attribute. (&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no) Internal LinksYou can set the href to headers, which will create a bookmark that allow you to jump to that section after clicking. For example: Command(on Windows: Ctrl) + Click This link will jump to header Block Elements. To see how to write that, please move cursor or click that link with ⌘ key pressed to expand the element into markdown source. Reference LinksReference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link: 12345This is [an example][id] reference-style link.Then, anywhere in the document, you define your link label on a line by itself like this:[id]: http://example.com/ \"Optional Title Here\" In Typora, they will be rendered like so: This is an example reference-style link. The implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — for example, to link the word “Google” to the google.com web site, you could simply write: 1234[Google][]And then define the link:[Google]: http://google.com/ In Typora, clicking the link will expand it for editing, and command+click will open the hyperlink in your web browser. URLsTypora allows you to insert URLs as links, wrapped by &lt;brackets&gt;. &lt;i@typora.io&gt; becomes &#x69;&#64;&#x74;&#121;&#112;&#111;&#x72;&#x61;&#x2e;&#105;&#x6f;. Typora will also automatically link standard URLs. e.g: www.google.com. ImagesImages have similar syntax as links, but they require an additional ! char before the start of the link. The syntax for inserting an image looks like this: 123![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg \"Optional title\") You are able to use drag &amp; drop to insert an image from an image file or your web browser. You can modify the markdown source code by clicking on the image. A relative path will be used if the image that is added using drag &amp; drop is in same directory or sub-directory as the document you’re currently editing. If you’re using markdown for building websites, you may specify a URL prefix for the image preview on your local computer with property typora-root-url in YAML Front Matters. For example, input typora-root-url:/User/Abner/Website/typora.io/ in YAML Front Matters, and then ![alt](/blog/img/test.png) will be treated as ![alt](file:///User/Abner/Website/typora.io/blog/img/test.png) in Typora. You can find more details here. EmphasisMarkdown treats asterisks (*) and underscores (_) as indicators of emphasis. Text wrapped with one * or _ will be wrapped with an HTML &lt;em&gt; tag. E.g: 123*single asterisks*_single underscores_ output: single asterisks single underscores GFM will ignore underscores in words, which is commonly used in code and names, like this: wow_great_stuff do_this_and_do_that_and_another_thing. To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it: 1\\*this text is surrounded by literal asterisks\\* Typora recommends using the * symbol. StrongA double * or _ will cause its enclosed contents to be wrapped with an HTML &lt;strong&gt; tag, e.g: 123**double asterisks**__double underscores__ output: double asterisks double underscores Typora recommends using the ** symbol. CodeTo indicate an inline span of code, wrap it with backtick quotes (`). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example: 1Use the `printf()` function. will produce: Use the printf() function. StrikethroughGFM adds syntax to create strikethrough text, which is missing from standard Markdown. ~~Mistaken text.~~ becomes Mistaken text. UnderlinesUnderline is powered by raw HTML. &lt;u&gt;Underline&lt;/u&gt; becomes Underline. Emoji :smile:Input emoji with syntax :smile:. User can trigger auto-complete suggestions for emoji by pressing ESC key, or trigger it automatically after enabling it on preference panel. Also, inputting UTF-8 emoji characters directly is also supported by going to Edit -&gt; Emoji &amp; Symbols in the menu bar (macOS). Inline MathTo use this feature, please enable it first in the Preference Panel -&gt; Markdown Tab. Then, use $ to wrap a TeX command. For example: $\\lim_{x \\to \\infty} \\exp(-x) = 0$ will be rendered as LaTeX command. To trigger inline preview for inline math: input “$”, then press the ESC key, then input a TeX command. You can find more details here. SubscriptTo use this feature, please enable it first in the Preference Panel -&gt; Markdown Tab. Then, use ~ to wrap subscript content. For example: H~2~O, X~long\\ text~/ SuperscriptTo use this feature, please enable it first in the Preference Panel -&gt; Markdown Tab. Then, use ^ to wrap superscript content. For example: X^2^. HighlightTo use this feature, please enable it first in the Preference Panel -&gt; Markdown Tab. Then, use == to wrap highlight content. For example: ==highlight==. HTMLYou can use HTML to style content what pure Markdown does not support. For example, use &lt;span style=&quot;color:red&quot;&gt;this text is red&lt;/span&gt; to add text with red color. Embed ContentsSome websites provide iframe-based embed code which you can also paste into Typora. For example: 1&lt;iframe height='265' scrolling='no' title='Fancy Animated SVG Menu' src='http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'&gt;&lt;/iframe&gt; VideoYou can use the &lt;video&gt; HTML tag to embed videos. For example: 1&lt;video src=\"xxx.mp4\" /&gt; Other HTML SupportYou can find more details here.","tags":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/tags/markdown/"},{"name":"typora","slug":"typora","permalink":"http://yoursite.com/tags/typora/"}]},{"title":"Hello World","date":"2020-04-18T07:12:27.000Z","path":"2020/04/18/Hello World/","text":"之前用wordpress作为个人博客大概用了三年多，这一段时间里因为各种原因也陆陆续续出了一些问题，大规模的迁移有两三次。上学期不知道为什么服务器的数据库突然空了，导致一学期的文章白写了。考虑到维护服务器确实比较耗费精力，于是决定改用github+hexo的方式搭建静态博客…目前看起来还是比较舒服的。 持续建设中…","tags":[]},{"title":"树形dp好题","date":"2020-02-17T15:55:00.000Z","path":"2020/02/17/树形dp好题/","text":"题目来源NAIPC 2016 或 [Jsoi2016]最佳团体，你会发现这俩题完全一致… （听说是那段时间jsoi就是汉化国外的题目） 题目链接：http://opentrains.snarknews.info/~ejudge/team.cgi?contest_id=006280 或https://nanti.jisuanke.com/t/A2026 或https://www.lydsy.com/JudgeOnline/problem.php?id=4753 题意是说有$n+1$个人，$0$号是CEO，$1$到$n$号是参选员工，每个员工$i$给一个薪水$s$和生产力$p$，还有一个推荐他的人的编号$r(0\\le r &lt; i)$，现在要选出$k$个员工，如果选了某个员工那么他的推荐人也必须选（除非他的推荐人是CEO），使得选出$k$个员工的生产力之和除以薪水之和最大。 做法：$n+1$个人实际构成了一个树，CEO是根。首先01分数规划模型很显然，那么二分答案$mid$，新的点权为$p_i-s_i\\times mid$，现在要求树上$k+1$个点的连通块（包括根）的最大点权和。 经典背包型dp，$dp[i][j]$表示以$i$为根的联通块大小为$j$的最大点权和，最后求出$dp[0][k+1]$小于$0$说明二分出来的值比答案大了，反之说明小了。 直观上看二维的状态，转移还需要枚举新加的一个子树选多少的点，这样似乎上是$O(N^3)$，会超时？ 实际上，我们每次只for到子树大小，可以证明这样时间复杂度是$O(N^2)$。直接看图理解吧： 意思就是说这样的写法等价于枚举所有的点对$(x,y)$的时间。所以最终这道题的时间复杂度为$O(N^2\\log{C})$ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include&lt;bits/stdc++.h&gt;using namespace std;#define N 2550const double INF=1e99;int k,n;int num[N],a[N],b[N];double dp[N][N],c[N],now[N];vector&lt;int&gt; e[N];void dfs(int u,int f)&#123; double tmp[N]; tmp[0]=c[u]; num[u]=0; for(auto &amp;v:e[u]) &#123; if(v==f)continue; dfs(v,u); for(int i=0;i&lt;=num[u]+num[v];i++) now[i]=-INF; for(int i=0;i&lt;=num[u];i++) for(int j=0;j&lt;=num[v];j++) now[i+j]=max(now[i+j],tmp[i]+dp[v][j]); for(int i=0;i&lt;=num[u]+num[v];i++) tmp[i]=now[i]; num[u]+=num[v]; &#125; num[u]++; dp[u][0]=0; for(int i=1;i&lt;=num[u];i++) dp[u][i]=tmp[i-1];&#125;double calc(double mid)&#123; c[0]=0; for(int i=1;i&lt;=n;++i) c[i]=a[i]-mid*b[i]; dfs(0,-1); return dp[0][k+1];&#125;int main()&#123; scanf(\"%d%d\",&amp;k,&amp;n); for(int i=1;i&lt;=n;++i) &#123; int fa; scanf(\"%d%d%d\",b+i,a+i,&amp;fa); e[fa].push_back(i); &#125; double l=0,r=10000; for(int i=1;i&lt;=50;++i) &#123; double mid=(l+r)/2; if(calc(mid)&gt;=0) l=mid; else r=mid; &#125; printf(\"%.3f\\n\",l); return 0;&#125;","tags":[{"name":"dp","slug":"dp","permalink":"http://yoursite.com/tags/dp/"},{"name":"01分数规划","slug":"01分数规划","permalink":"http://yoursite.com/tags/01%E5%88%86%E6%95%B0%E8%A7%84%E5%88%92/"}]},{"title":"Burnside引理与Polya计数公式","date":"2019-09-16T10:36:00.000Z","path":"2019/09/16/Burnside引理与Polya计数公式/","text":"Burnside引理设$A$和$B$为有限集合，$X$表示所有从$A$到$B$的映射集合（着色方案集合）。$X/G$表示$X$所有元素的轨道的集合（去掉重复），即$G$作用在$X$上产生的所有等价类的集合，$X^{g}$表示$X$中在$g$作用下的不动元素，则有 $$|X/G|={\\frac {1}{|G|}}\\sum _{g\\in G}|X^{g}|$$ $X$中非等价的着色数等于在$G$中的置换作用下保持不变的着色的平均数！ Polya计数公式考虑置换$g$可以分解成若干不相交的循环置换的乘积，那么每个循环内的颜色必须相同，才能在$g$的作用下染色不变，设颜色一共$m$种，置换$g$的循环分解中的循环个数为$c(g)$，那么在$g$作用下着色不变的着色数为： $$|X^{g}|=m^{c(g)}$$ 替换一下，就得到了： $$|X/G|={\\frac {1}{|G|}}\\sum _{g\\in G}m^{c(g)}$$","tags":[{"name":"polya计数","slug":"polya计数","permalink":"http://yoursite.com/tags/polya%E8%AE%A1%E6%95%B0/"}]},{"title":"数论初级魔法大赏","date":"2019-06-05T12:44:00.000Z","path":"2019/06/05/数论初级魔法大赏/","text":"最近在准备关于莫比乌斯反演的课件，准备把例题简要整理下来，那就开始吧 1.bzoj 2190 [SDOI2008]仪仗队求$2+\\sum_{x=1}^{n-1}\\sum_{y=1}^{n-1}[gcd(x,y)==1](n\\le 40000)$ 最简单的做法，线性筛预处理出欧拉函数的前缀和，时间复杂度$O(n)$。 2.bzoj 2818 Gcd求$\\sum_{p}\\sum_{x=1}^{n}\\sum_{y=1}^{n}[gcd(x,y)==p] (n\\le 10^7)$ 其实就是$\\sum_{p}\\sum_{x=1}^{\\lfloor \\frac{n}{p}\\rfloor}\\sum_{y=1}^{\\lfloor \\frac{n}{p}\\rfloor}[gcd(x,y)==1]$，枚举所有质数后就是和上一道题一样做法了，双倍经验。 3.bzoj 2705 [SDOI2012]Longge的问题求$\\sum_{i=1}^{n}gcd(i,n), n\\le 2^{32}$ 变形一下，枚举每种gcd的值，即 $$\\begin{aligned}&amp;\\quad\\,\\sum_{i=1}^{n}gcd(i,n) \\\\&amp; =\\sum_{d\\mid n}d \\sum_{x=1}^{\\frac{n}{d}}[gcd(x,\\frac{n}{d})==1] \\\\&amp; =\\sum_{d\\mid n}d\\varphi(\\frac{n}{d})\\end{aligned}$$ 那么根号枚举约数，单点求欧拉函数就做完了。 时间复杂度？是个经典的东西$O(\\sum_{i=1}^{\\sqrt{n}}\\sqrt{i}+\\sqrt{\\frac{n}{i}})=O(n^{\\frac{3}{4}})$ 4.bzoj 2440 [中山市选2011]完全平方数求第$k(k\\le 10^9)$个不含完全平方数因子的正整数 二分答案，转为求前$n$个数中有多少数不含完全平方因子。容斥一下，总数减去是4(2的平方)的倍数的，减去9的倍数，16的倍数不用管，前面减过了，再减去25的倍数，加上36的倍数，因为前面多减了一次…那这样就发现了容斥系数就是莫比乌斯函数。时间复杂度$O(\\sqrt{n}\\log{n})$ 5.luogu P2257 YY的GCD(bzoj 2820)求$\\sum_{p}\\sum_{x=1}^{n}\\sum_{y=1}^{m}[gcd(x,y)==p] (n\\le 10^7)$，$T(\\le 10000)$组询问 bzoj 2818的加强版，把其中一个n换成了m，这样就不能用欧拉函数了，推导一下： 下述的$p$表示质数 $$\\begin{aligned}&amp; \\quad\\, \\sum_{p}\\sum_{x=1}^{n}\\sum_{y=1}^{m}[gcd(x,y)==p] \\\\&amp; =\\sum_{p}\\sum_{x=1}^{\\lfloor \\frac{n}{p}\\rfloor}\\sum_{y=1}^{\\lfloor \\frac{m}{p}\\rfloor}[gcd(x,y)==1] \\\\&amp; =\\sum_{p}\\sum_{x=1}^{\\lfloor \\frac{n}{p}\\rfloor}\\sum_{y=1}^{\\lfloor \\frac{m}{p}\\rfloor}\\sum_{d\\mid gcd(x,y)}\\mu(d) \\\\&amp; =\\sum_{p}\\sum_{x=1}^{\\lfloor \\frac{n}{p}\\rfloor}\\sum_{y=1}^{\\lfloor \\frac{m}{p}\\rfloor}\\sum_{d\\mid x \\land d\\mid y}\\mu(d) \\\\&amp; =\\sum_{p}\\sum_{d=1}^{\\lfloor \\frac{min(n,m)}{p}\\rfloor}\\mu(d)\\lfloor \\frac{n}{pd}\\rfloor\\lfloor \\frac{m}{pd}\\rfloor \\\\&amp; =\\sum_{k=1}^{min(n,m)}\\sum_{p,p\\mid k}\\mu(\\frac{k}{p})\\lfloor \\frac{n}{k}\\rfloor\\lfloor \\frac{m}{k}\\rfloor \\\\&amp; =\\sum_{k=1}^{min(n,m)}f(k)\\lfloor \\frac{n}{k}\\rfloor\\lfloor \\frac{m}{k}\\rfloor\\end{aligned}$$ 其中第三行莫比乌斯反演，第五行交换求和，第六行令$k=pd$,转而枚举$k$，化简到最后用筛法预处理出所有$f$的值即可，这里应该可以用线性筛，不过懒得推导的话也可以枚举所有质数再枚举它的倍数这样求，那么时间复杂度就和埃氏筛一样了，之后每次求一组询问就是经典的数论分块了。时间复杂度$O(n\\log{\\log{n}}+T\\sqrt{n})$。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int N=10000000;bool vis[N+5];int prime[N+5],cnt;int mu[N+5],f[N+5];void getprime()&#123; mu[1]=1; for(int i=2;i&lt;=N;i++) &#123; if(!vis[i]) &#123; prime[cnt++]=i; mu[i]=-1; &#125; for(int j=0;j&lt;cnt &amp;&amp; prime[j]&lt;=N/i;j++) &#123; vis[i*prime[j]]=true; if(i%prime[j]) mu[i*prime[j]]=-mu[i]; else &#123; mu[i*prime[j]]=0; break; &#125; &#125; &#125; for(int i=0;i&lt;cnt;++i) &#123; int x=prime[i]; for(int j=x;j&lt;=N;j+=x) f[j]+=mu[j/x]; &#125; for(int i=1;i&lt;=N;++i) f[i]+=f[i-1];&#125;ll calc(int n,int m)&#123; if(n&gt;m) swap(n,m); ll ans=0; for(int i=1,j;i&lt;=n;i=j+1) &#123; j=min(n/(n/i),m/(m/i)); ans+=1LL*(f[j]-f[i-1])*(n/i)*(m/i); &#125; return ans;&#125;int main()&#123; getprime(); int T; scanf(\"%d\",&amp;T); while(T--) &#123; int n,m; scanf(\"%d%d\",&amp;n,&amp;m); printf(\"%lld\\n\",calc(n,m)); &#125;&#125; 6.spoj LCMSUM求$\\sum_{i=1}^{n}lcm(i,n), n\\le 10^{6}$，$T(\\le 300000)$组询问。 $$\\begin{aligned}&amp;\\quad\\, \\sum_{i=1}^{n}lcm(i,n) \\\\&amp;=\\sum_{i=1}^{n}\\frac{i\\times n}{gcd(i,n)}\\\\&amp;=\\frac{1}{2}\\sum_{i=1}^{n-1}\\frac{n^{2}}{gcd(i,n)}+n\\\\&amp;=\\frac{1}{2}\\sum_{d\\mid n,d\\ne n}\\frac{n^2}{d}\\sum_{k=1}^{\\lfloor \\frac{n}{d}\\rfloor}[gcd(k,\\frac{n}{d})==1]+n \\\\&amp;=\\frac{1}{2}n\\sum_{d\\mid n,d\\ne n}\\frac{n}{d}\\varphi(\\frac{n}{d})+n \\\\&amp;=\\frac{1}{2}n\\sum_{d\\mid n,d\\ne 1}d\\varphi(d)+n \\\\&amp; =\\frac{1}{2}nf(n)+n\\end{aligned}$$ 这样线性筛预处理完，$O(n\\log{n})$的求出函数值$f$，每次回答$O(1)$即可。 7.bzoj 2154 Crash的数字表格求$\\sum_{i=1}^{n}\\sum_{j=1}^{m}lcm(i,j),n,m\\le 10^7$ $$\\begin{aligned}&amp;\\quad\\,\\sum_{i=1}^{n}\\sum_{j=1}^{m}lcm(i,j) \\\\&amp;=\\sum_{i=1}^{n}\\sum_{j=1}^{m}\\frac{ij}{gcd(i,j)}\\\\&amp;=\\sum_{d=1}^{min(n,m)}\\sum_{x=1}^{\\lfloor \\frac{n}{d}\\rfloor}\\sum_{y=1}^{\\lfloor \\frac{m}{d}\\rfloor}dxy[gcd(x,y)==1] \\\\&amp;=\\sum_{d=1}^{min(n,m)}d\\sum_{x=1}^{\\lfloor \\frac{n}{d}\\rfloor}\\sum_{y=1}^{\\lfloor \\frac{m}{d}\\rfloor}xy\\sum_{k\\mid x \\land k\\mid y}\\mu(k) \\\\&amp;=\\sum_{d=1}^{min(n,m)}d\\sum_{k=1}^{\\lfloor \\frac{m}{d}\\rfloor}\\mu(k)\\sum_{x=1}^{\\lfloor \\frac{n}{dk}\\rfloor}\\sum_{y=1}^{\\lfloor \\frac{m}{dk}\\rfloor}k^{2}xy \\\\&amp;=\\sum_{T=1}^{min(n,m)}\\sum_{k\\mid T}kT\\mu(k)g(\\lfloor \\frac{n}{T}\\rfloor,\\lfloor \\frac{m}{T}\\rfloor)\\\\&amp;=\\sum_{T=1}^{min(n,m)}Tg(\\lfloor \\frac{n}{T}\\rfloor,\\lfloor \\frac{m}{T}\\rfloor)\\sum_{k\\mid T}k\\mu(k)\\\\&amp;=\\sum_{T=1}^{min(n,m)}Tg(\\lfloor \\frac{n}{T}\\rfloor,\\lfloor \\frac{m}{T}\\rfloor)f(T)\\end{aligned}$$ 其中$g(n,m)=\\sum_{i=1}^{n}\\sum_{j=1}^{m}ij=\\frac{n(n+1)}{2}\\frac{m(m+1)}{2}$ 一开始头铁，$O(n\\log{n})$求的$f(T)$的值，超时无疑，然后学习了用线性筛求积性函数$f(T)=\\sum_{k\\mid T}k\\mu(k)$的思路。 线性筛过程分两种情况讨论 1.$prime_j$整除$i$，那么枚举$i\\times prime_j$的约数$k$时，如果关于$prime_j$的指数大于等于2的话莫比乌斯函数为零，对答案没有贡献，所以此时:$$f(i\\times prime_j)=f(i)$$ 2.$prime_j$不整除$i$，那么再分枚举的约数$k$是否含有$prime_j$，不含有的部分就是$f(i)$，含$prime_j$的话，整体乘上这么多，并且莫比乌斯函数要变号，是$-f(i)prime_j$。综上，此时:$$f(i\\times prime_j)=(1-prime_j)f(i)$$ 这样这道题就做完了，时间复杂度$O(n)$。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int mod=20101009;const int N=10000000;bool vis[N+5];int prime[666666],cnt;int f[N+5];void getprime()&#123; f[1]=1; for(int i=2;i&lt;=N;i++) &#123; if(!vis[i]) &#123; prime[cnt++]=i; f[i]=(1-i+mod); &#125; for(int j=0;j&lt;cnt &amp;&amp; i*prime[j]&lt;=N;j++) &#123; vis[i*prime[j]]=true; if(i%prime[j]) &#123; f[i*prime[j]]=1LL*(1-prime[j]+mod)*f[i]%mod; &#125; else &#123; f[i*prime[j]]=f[i]; break; &#125; &#125; &#125;// for(int i=1;i&lt;=N;++i)// &#123;// for(int j=i;j&lt;=N;j+=i)// &#123;// f[j]+=i*mu[i];// if(f[j]&lt;0) f[j]+=mod;// else if(f[j]&gt;=mod) f[j]-=mod;// &#125;// &#125;&#125;int Sum(int n)&#123; return 1LL*(n+1)*n/2%mod;&#125;int main()&#123; getprime(); int n,m; scanf(\"%d%d\",&amp;n,&amp;m); if(n&lt;m) swap(n,m); ll ans=0; for(int i=1;i&lt;=m;++i)&#123; ans+=1LL*i*Sum(n/i)%mod*Sum(m/i)%mod*f[i]%mod; if(ans&gt;=mod) ans-=mod; &#125; printf(\"%lld\\n\",ans);&#125; 8.bzoj 3994 [SDOI2015]约数个数和求$\\sum_{i=1}^{n}\\sum_{j=1}^{m}d(ij), n,m\\le 50000$，$T(\\le 50000)$组询问，其中$d$是约数个数函数。 这个题一开始卡在一个结论上了，首先要知道$d(ij)=\\sum_{x\\mid i}\\sum_{y\\mid j}[gcd(x,y)==1]$，这个结论不好想，但可以用分解质因数的形式结合约数个数定理推出来，那解决了第一步，后面的就简单了。 $$\\begin{aligned}&amp;\\quad\\,\\sum_{i=1}^{n}\\sum_{j=1}^{m}d(ij)\\\\&amp;=\\sum_{i=1}^{n}\\sum_{j=1}^{m}\\sum_{x\\mid i}\\sum_{y\\mid j}[gcd(x,y)==1]\\\\&amp;=\\sum_{i=1}^{n}\\sum_{j=1}^{m}\\sum_{x\\mid i}\\sum_{y\\mid j}\\sum_{k\\mid gcd(x,y)}\\mu(k)\\\\&amp;=\\sum_{i=1}^{n}\\sum_{j=1}^{m}\\sum_{x\\mid i}\\sum_{y\\mid j}\\sum_{k\\mid x \\land k\\mid y}\\mu(k)\\\\&amp;=\\sum_{k=1}^{min(n,m)}\\mu(k)\\sum_{x=1}^{\\lfloor\\frac{n}{k}\\rfloor}\\sum_{y=1}^{\\lfloor\\frac{m}{k}\\rfloor}\\lfloor\\frac{n}{xk}\\rfloor\\lfloor\\frac{m}{yk}\\rfloor\\\\&amp;=\\sum_{k=1}^{min(n,m)}\\mu(k)\\sum_{x=1}^{\\lfloor\\frac{n}{k}\\rfloor}\\lfloor\\frac{n}{xk}\\rfloor f(\\lfloor\\frac{m}{k}\\rfloor)\\\\&amp;=\\sum_{k=1}^{min(n,m)}\\mu(k)f(\\lfloor\\frac{n}{k}\\rfloor) f(\\lfloor\\frac{m}{k}\\rfloor) \\\\\\end{aligned}$$ 至此又可以数论分块搞定单组询问了，时间复杂度$O(T\\sqrt{n})$。 9.bzoj 4659 lcm化简下题意就是求$\\sum_{i=1}^{n}\\sum_{j=1}^{m}lcm(i,j)[\\mu^2(gcd(i,j))==1],n,m\\le 4000000$，对$2^{30}$取模，$T(\\le 2000)$组询问。发现就是在第七题的基础上加了个多组询问，且只统计$\\mu^2(gcd(i,j))==1$的。 那么前面的推导都是一样的，最后化简到 原式$=\\sum_{T=1}^{min(n,m)}g(\\lfloor \\frac{n}{T}\\rfloor,\\lfloor \\frac{m}{T}\\rfloor)T\\sum_{k\\mid T}k\\mu(k)\\mu^2(\\frac{T}{k})$ 头铁依然会TLE，还是先观察一下 $f(T)=\\sum_{k\\mid T}k\\mu(k)\\mu^2(\\frac{T}{k})$是积性函数 且当$T$分解质因数后的指数中有大于2的情况的话，显然此时$f(T)=0$，并且易知$f(p)=1-p,f(p^2)=-p$，这样又可以线性筛搞一搞了，然后预处理出$if(i)$的前缀和。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int mod=1&lt;&lt;30;const int N=4000000;bool vis[N+5];int prime[N+5],cnt;unsigned int f[N+5],sum[N+5];void getprime() &#123; f[1]=1; for(int i=2;i&lt;=N;i++) &#123; if(!vis[i]) &#123; prime[cnt++]=i; f[i]=1U-i; &#125; for(int j=0;j&lt;cnt &amp;&amp; i*prime[j]&lt;=N;j++) &#123; vis[i*prime[j]]=true; if(i%prime[j]) &#123; f[i*prime[j]]=f[i]*f[prime[j]]; &#125; else &#123; if(i==prime[j]) f[i*prime[j]]=-prime[j]; else if(i/prime[j]%prime[j]==0) f[i*prime[j]]=0; else f[i*prime[j]]=f[i/prime[j]]*f[prime[j]*prime[j]]; break; &#125; &#125; &#125;// for(int i=1;i&lt;=N;++i) &#123;// for(int j=i;j&lt;=N;j+=i) &#123;// f[j]+=i*mu[i]*abs(mu[j/i]);// &#125;// &#125; for(int i=1;i&lt;=N;++i) sum[i]=sum[i-1]+1U*i*f[i];&#125;unsigned int Sum(int n)&#123; return 1LL*(n+1)*n/2;&#125;int main()&#123; getprime(); int T; scanf(\"%d\",&amp;T); while(T--)&#123; int n,m; scanf(\"%d%d\",&amp;n,&amp;m); if(n&lt;m) swap(n,m); unsigned int ans=0; for(int i=1,j;i&lt;=m;i=j+1)&#123; j=min(n/(n/i),m/(m/i)); ans+=1U*(sum[j]-sum[i-1])*Sum(n/i)*Sum(m/i); &#125; printf(\"%d\\n\",(int)(ans%mod)); &#125;&#125; 10.bzoj 4816 [Sdoi2017]数字表格求$\\prod_{i=1}^{n}\\prod_{j=1}^{m}f(gcd(i,j)),n,m\\le 10^6$，其中$f$为斐波那契数列，结果模$10^9+7$，$T(\\le 1000)$组询问。 $$\\begin{aligned}&amp;\\quad\\,\\prod_{i=1}^{n}\\prod_{j=1}^{m}f(gcd(i,j)) \\\\&amp;=\\prod_{d=1}^{min(n,m)}f(d)^{\\sum_{i=1}^{\\lfloor\\frac{n}{d}\\rfloor}\\sum_{i=1}^{\\lfloor\\frac{m}{d}\\rfloor}[gcd(i,j)==1]} \\\\&amp;=\\prod_{d=1}^{min(n,m)}f(d)^{\\sum_{k=1}^{min(\\lfloor\\frac{n}{d}\\rfloor,\\lfloor\\frac{m}{d}\\rfloor)}\\mu(k)\\lfloor\\frac{n}{dk}\\rfloor\\lfloor\\frac{m}{dk}\\rfloor}\\\\\\end{aligned}$$ 这样指数部分是关于$\\lfloor\\frac{n}{d}\\rfloor,\\lfloor\\frac{m}{d}\\rfloor$的函数，可以分块，又因为外层是枚举的$d$，所以分块套分块即可！时间复杂度$O(T(n^{\\frac{3}{4}}+\\sqrt{n}\\log{n}))$，前一部分来源分析同第三题。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int mod=1e9+7;#define N 1000000bool vis[N+5];int prime[N+5],cnt;int mu[N+5],sum[N+5];int f[N+5],pre[N+5];void getprime() &#123; mu[1]=1; for(int i=2;i&lt;=N;i++) &#123; if(!vis[i]) &#123; prime[cnt++]=i; mu[i]=-1; &#125; for(int j=0;j&lt;cnt &amp;&amp; prime[j]&lt;=N/i;j++) &#123; vis[i*prime[j]]=true; if(i%prime[j]) mu[i*prime[j]]=-mu[i]; else &#123; mu[i*prime[j]]=0; break; &#125; &#125; &#125; for(int i=1;i&lt;=N;++i) sum[i]=sum[i-1]+mu[i];&#125;int power(int x,ll n)&#123; int ans=1; while(n)&#123; if(n&amp;1) ans=1LL*ans*x%mod; x=1LL*x*x%mod; n&gt;&gt;=1; &#125; return ans;&#125;ll calc(int n,int m,int d)&#123; ll ans=0; for(int i=1,j;i&lt;=n;i=j+1)&#123; j=min(n/(n/i),m/(m/i)); ans+=1LL*(sum[j]-sum[i-1])*(n/i)*(m/i); &#125; return ans;&#125;int main()&#123; getprime(); pre[0]=pre[1]=f[1]=1; for(int i=2;i&lt;=N;++i)&#123; f[i]=f[i-1]+f[i-2]; if(f[i]&gt;=mod) f[i]-=mod; pre[i]=1LL*pre[i-1]*f[i]%mod; &#125; int T; scanf(\"%d\",&amp;T); while(T--)&#123; int n,m; scanf(\"%d%d\",&amp;n,&amp;m); if(n&gt;m) swap(n,m); int ans=1; for(int i=1,j;i&lt;=n;i=j+1)&#123; j=min(n/(n/i),m/(m/i)); int x=1LL*pre[j]*power(pre[i-1],mod-2)%mod; ll y=calc(n/i,m/i,i); ans=1LL*ans*power(x,y)%mod; &#125; printf(\"%d\\n\",ans); &#125;&#125;","tags":[{"name":"时间复杂度","slug":"时间复杂度","permalink":"http://yoursite.com/tags/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"},{"name":"数论","slug":"数论","permalink":"http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"},{"name":"莫比乌斯反演","slug":"莫比乌斯反演","permalink":"http://yoursite.com/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"}]},{"title":"枚举算法再放送","date":"2019-04-29T04:58:00.000Z","path":"2019/04/29/枚举算法再放送/","text":"再 放 送4月24日的时候我讲了这学期程序设计与算法实践的第一课，内容包括算法时间复杂度的概念，枚举与递归等。其中关于枚举这方面还是比较有意思的，从易到难总结了三道题目枚举题，其他的内容就是老生常谈了。实际上枚举算法看似简单又不能很轻易掌握，因为枚举也是有技巧与策略的。在一道具体的题目中，暴力的枚举很可能行不通，但是聪明的枚举往往能起到“四两拨千斤”的效果。 练习题目1.素数判定定义一个数是素数当且仅当它是一个大于1的自然数，且不含有除1和它本身以外的因数。 虚假的枚举 直接枚举$2$到$n-1$的所有数，看是否能整除$n$，时间复杂度$O(n)$。 真正的枚举 考虑到如果$n$是合数，那么就能写成$n=a\\times b(1&lt;a,b&lt;n)$的形式。 不妨设$a\\le b$ 那么就有$n=a\\times b\\ge a^2$ 即$a\\le \\sqrt{n}$ 也就是说如果$n$是合数，那么就一定有一个根号范围内的因数，所以枚举上界一下子就降下来了，时间复杂度$O(\\sqrt{n})$。 2.Squarefree number（题目在bnuoj上也有http://www.bnuoj.com/problem_show.php?pid=7931） 给出一个数$n(1\\le n \\le 10^{18})$ ，判断n的因数中有没有平方数。比如18有，21没有。 虚假的枚举 直观上来看，需要枚举根号范围内的正整数$x$，判断$n$是否是$x^2$的倍数，时间复杂度$O(\\sqrt{n})$。 真正的枚举 如果$n$满足条件，则一定可以表示成$n=ab^2(b\\ne 1)$的形式。 显然$a,b$不同时大于$10^6$。 那么我们只需要分别枚举判断即可，其中枚举$a$时需要看除完后是否是完全平方数，这个随便搞搞就好了，总的时间复杂度$O(n^{\\frac{1}{3}})$。 很久之前写的代码了，还是不建议直接用sqrt开方（精度误差）,可以开完之后比如在加减5的范围内再for一下找找： 12345678910111213141516171819202122232425262728293031#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;bool square(ll x)&#123; ll y=(ll)sqrt(x+0.5); return x==y*y;&#125;bool squarefree(ll x)&#123; if(square(x)) return false; for(ll i=2;i&lt;=x/i/i;i++) &#123; if(x%(i*i)==0) return false; if(x%i==0 &amp;&amp; square(x/i)) return false; &#125; return true;&#125;int main()&#123; int T; scanf(\"%d\",&amp;T); for(int cas=1;cas&lt;=T;cas++) &#123; ll x; scanf(\"%lld\",&amp;x); printf(\"Case %d: \",cas); if(squarefree(x)) puts(\"Yes\"); else puts(\"No\"); &#125;&#125; 3.Forever Young题目来源是2016 ACM-ICPC World Finals（近几年我校唯一没进总决赛的一次），当时算是第三、四道简单签到题，不过这个签到就非常有水平了。 给一个十进制数$n(10\\le y\\le 10^{18})$，和一个下届$L(10\\le L)$，找到最大的正整数$B$，使得$n$在$B$进制下只有0到9的数字，并且再当成十进制翻译后，要至少为$L$。 题意比较绕，还是需要结合样例理解一下。 虚假的枚举 直接从大到小枚举进制$B$，然后进制转换，验证是否符合条件，找到就退出，然而光是枚举就需要$O(n)$，显然不行。 最简单的例子，比如不管$n$多大,只要下届是$10$，答案就可以是$n$进制。 真正的枚举 观察到一个数由更大的进制表示时，位数是越来越短的。具体来说 比如$n=a_0+a_1B+a_2B^2+a_3B^3+\\dots$ 发现当$B&gt;10^6$时，$B^3&gt;10^{18}$，也就是说当枚举到$B&gt;10^6$时，表示出来的长度不会超过3位。又因为每一位必须是0到9的数字（不能有ABCDEF这样的），那么我直接一个三层循环枚举表示后的结果，最后解一个关于B的一元二次方程$n=a_0+a_1B+a_2B^2$就非常trivial了。 最后把这两种枚举方式得到的答案取最大值即可，总的时间复杂度$O(n^{\\frac{1}{3}})$。 代码写的稍微有点难看，训练的时候以为中间爆long long了，实际是别的地方的问题： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;ll n,L;int len;int d[30];int getlen(ll x)&#123; int ans=0; while(x) &#123; ++ans; x/=10; &#125; return ans;&#125;bool ok(ll n,ll l,ll B)&#123; int cnt=0; while(n) &#123; if(n%B&gt;=10) return false; d[cnt++]=n%B; n/=B; &#125; ll now=0; for(int i=cnt-1; i&gt;=0; --i) now=now*10+d[i]; return now&gt;=l;&#125;int main()&#123; scanf(\"%I64d%I64d\",&amp;n,&amp;L); len=getlen(L); ll ans=10; for(ll B=2000000; B&gt;=10; --B) if(ok(n,L,B)) &#123; ans=B; break; &#125; for(int i=0; i&lt;10; ++i) for(int j=0; j&lt;10; ++j) for(int k=0; k&lt;10; ++k) if(i*100+j*10+k&gt;=L) &#123; if(i==0 &amp;&amp; j==0) assert(false); ll l=0,r=n,mid; while(l&lt;r) &#123; mid=(l+r+1)/2; if(i*mid+j&lt;=(n-k)/mid) l=mid; else r=mid-1; &#125; if(l&gt;=10 &amp;&amp; (n-k)%l==0 &amp;&amp; (n-k)/l==i*l+j) ans=max(ans,l); &#125; printf(\"%I64d\\n\",ans);&#125;","tags":[{"name":"枚举","slug":"枚举","permalink":"http://yoursite.com/tags/%E6%9E%9A%E4%B8%BE/"}]},{"title":"怀念金庸","date":"2019-03-10T13:19:00.000Z","path":"2019/03/10/怀念金庸/","text":"今天是金庸诞辰95周年。想起来2018年10月30日的上午，又或许是前一天晚上，我突发兴致，决定把天龙八部再读一遍，当时还在想不知金庸先生现况如何。 然而晚上即闻金大侠仙逝的噩耗… 世事无常啊，当晚为此难受了很久。 过去四个月，我先后读了《天龙八部》、《射雕英雄传》、《神雕侠侣》、《倚天屠龙记》、《笑傲江湖》，深感收获良多。于是我把读书时的所思所想写到了哲学入门课程的期末论文里。文章结合哲学导论课本的一些观点将我目前读到的金庸串连了起来。除了“大闹一场，悄然离去”那一段是参考网上文章以外，其余都是我的原创想法。笔者认为其中一些片段语言可能会稍显稚嫩，不过还是有很多精彩部分的，下面是原文。 从金庸武侠角度浅谈人的哲学摘要：2018年10月30日，金庸先生在香港逝世，享年94岁。金庸，本名查良镛，当代武侠小说作家、新闻学家、企业家、政治评论家、社会活动家。他的作品曾被誉为“有华人的地方就有金庸的读者”。金庸十余部武侠作品之所以有如此巨大的魅力，和其中蕴含的中华传统文化精华以及处处可见的哲学智慧是分不开的。本文通过简要分析金庸武侠（以《天龙八部》为主）和回顾金庸生平来浅谈人的本质及人生意义等人学话题。 关键词：金庸；武侠小说；人生哲学 一 人性与人的本质人学最为核心的问题就是关于人是什么的问题。对于这个问题的回答可分为三个层面：一是人的天性是什么？二是人与万物尤其是动物相区别的特性是什么？三是人之为人的内在根据是什么？本节将从金庸武侠中是探讨、回答这三个问题。 （一）金庸武侠中的善恶观在当代文学作品中人物形象大多刻板：好人就是好人，坏人就是坏人。然而金庸武侠大多不是，至少《天龙八部》一定不是。即使是为万人敬仰的好人也有可能在某些场合做出极不光彩的错事，比如玄慈方丈，听信奸人妄言，埋伏攻击萧远山一家，后来又动了凡心，与叶二娘有私情，由此酿成种种悲剧。即使是万恶不赦的坏人也有可能践行侠义精神，做出大有风度之事。作为四大恶人之首的恶贯满盈段延庆，在将被蛊惑自尽之时，被虚竹救下，遂知恩图报，帮助虚竹破解珍珑棋局。 那么人的天性到底是善是恶？笔者认为，用性无善无恶论的观点更好解释。没有天生的恶人，没有天生的善人。善恶是非都是后天因素造成的，尤其是教育因素。若是从小受佛门经典熏陶，长大必然宅心仁厚。若是误入歧途，卷入恩怨纷争，难免性格乖戾，沦为恶人。而且善恶不过是相对的概念，是可以互相转化的，只要善于引导，人性都有发展向善的可能。武侠小说中弃暗投明或是由正转邪的例子大有人在。 （二）阿朱就是阿朱人和动物的共同点在于都有自然属性。“所谓人的自然属性，指的是人的生理构造和自然本能方面的属性。”真正区别人与动物的是人的精神属性。“所谓人的精神属性是指人是有意识的存在物，是有精神需要、精神能力以及精神生活的存在物，表现在人具有自我意识，能思维，有理性，具有情感、意志等非理性因素。” 《天龙八部》中有一段耐人寻味的话：“阿朱就是阿朱，四海列国，千秋万载，就只一个阿朱。”无论是空间上还是时间上，阿朱是独一无二的，不能被任何人代替。笔者认为，人的独特在于人具有的自由精神。这种自由精神、自由意识的不同造成了人的性格、情感、认知的不同。“人非草木，孰能无情”是以情感的角度论证人的精神属性。再以精神需要为例，人的自我实现、自我超越的需要是可以抑制基本的生理需要的，这也是马斯洛需求层次理论不足的地方。萧峰因误杀阿朱，愧疚难当，决定此生终不再娶，这里即是精神需要战胜生理需要的例子。 （三）人就是江湖由前面的观点，自我意识、自由精神固然重要，但还不能简单归为人的本质。关于人的本质，或者说人的内在根据还需要更多探讨。 人除了自然属性与精神属性，更根本的还有社会属性。荀子提出人与动物的差别在于，“人能群，彼不能群也。人何以能群？曰分。” 关于何为江湖，在后来翻拍的《笑傲江湖》中有一句经典台词：“只要有人的地方就有恩怨，有恩怨就会有江湖，人就是江湖。”与其说是江湖的本质，更不如说是直接道出了人的本质。这与马克思所说的“人是一切社会关系的总和”有异曲同工之妙。当然，“在马克思看来，人根本就没有固定不变的本质”。只不过在虚构的武侠世界中，江湖由人构成，恩怨因人而生，说人就是恩怨江湖再贴切不过。 二 人生的意义（一）红颜弹指老，刹那芳华金庸笔下的天山童姥可谓是奇异至极，短短几日时间，身体便由青春年少变得垂垂老矣，最终和仇人李秋水激斗后得知她们一生纠缠痴爱的男人另有所爱，于是“同一笑，到头万事俱空”，便双双撒手人寰。正所谓“人生如梦幻泡影，如露亦如电”。当我们突然发觉，弹指一挥间，青丝沾染白雪，自己已经老去，这个时候该如何追忆评价自己的一生？人生到底有无意义？我们是否实现了人生的意义？ 笔者认同这样的观点，人生本无意义，需要我们给予意义。在哲学家们看来，人生的意义最终可以归结为“幸福”二字，幸福是人类一切活动的最高、最终目的。然而，人们对幸福的理解是不一样的。总体而言，大致分为两类，快乐主义幸福观和道德主义幸福观。前者认为幸福在于趋利避害，享受快乐；后者认为幸福在于至善，修德才能得福。但又容易分别走向享乐主义和禁欲主义两个极端。 马克思说：“如果我们选择了最能为人类福利而劳动的职业，那么重担就不能把我们压倒，因为它是为大家而献身；那么我们所感到的就不是可怜的、有限的、自私的乐趣，我们的幸福将属于千百万人，我们的事业将默默地，但是永恒发挥作用地存在下去，而面对我们的骨灰，高尚的人们将洒下热泪。”这启发着我们，人生的意义在于奉献。个人幸福应与集体幸福、社会幸福紧密结合，离开了社会，个人就无所谓幸福可言。 （二）为国为民，侠之大者在《明报》创刊的第一天，金庸在九龙尖沙嘴那间小小的编辑室中写下：“如果我们能多报道一些社会上美好的事物，如果我们这份小小的报纸能增加读者们生活中的一些喜悦，那将使我们感到很大的幸福。”这里的幸福即是如此。在局势动荡的年代，金庸一手写社评，一手写武侠，本着明辨是非的办报方针，客观报道，客观评论，将《明报》创造成了奇迹。在现实的家国和虚拟的江湖之间，金庸纵横自如。虽然武侠小说本身是娱乐大众的东西，但是金庸将其融入了人生哲理、个人思想、甚至对社会及政治的看法。 所谓“为国为民，侠之大者”，金庸做到了。很多地方将其误写成“侠之大者，为国为民”。笔者认为，其实写作“侠之大者，为国为民”也有一定道理。从诗词创作的角度，这样写符合“上仄下平”的原则，读起来更有美感。然而在原著《神雕侠侣》一书中，金庸确实是将“为国为民”写在前，“侠之大者”写在后。对此应如何解读？这是因为“为国为民”是第一位，是根本目的，也因此成就大侠。而不是去为了获得大侠的名声而做“为国为民”的事，如此就本末倒置了。 （三）大闹一场，悄然离去庄子说：“吾生也有涯，而知也无涯。”《天龙八部》中逍遥派无崖子的名字即与此相关。其有两个徒弟，丁春秋与苏星河。“春秋”是时间上的无涯，“星河”是空间上的无涯。当人在思考自己在世状态时，会直接感受到世界的无限，与自己的渺小与短暂。人在各个方面都是有限的，一些感官甚至远不如某些种类的动物。“人固有一死”，每个人都有一个共同的大限。史铁生形容“死是一个必然会降临的节日”。金庸将其比喻成“谁也躲不了的瘟疫”。人虽然不能从自然意义上超越死亡，但是按照亚里士多德所云：我们当尽力以求不朽！ 有人问金庸人生是什么，金庸说：“人生就是大闹一场，然后，悄然离去。”显然，这里的“闹”不是胡作非为，[无法无天](https://hanyu.baidu.com/zici/s?wd=无法无天&amp;query=胡作非为 近义词&amp;srcid=28236&amp;from=kg0)的闹，而应该是大放异彩，精彩绝伦的闹。既然我们有足够的运气来到这世间，就应该热热闹闹的，做一番轰轰烈烈的事业，为他人、为社会发光发热，活出人生价值。等到曲终人散，不得不落幕之时再“悄然离去”。我们无法改变死亡这一最终归宿，那么离开时就应当优雅、释然，无所畏惧，不含愧疚地走。同时，悄悄地走，正如悄悄地来，不打扰别人，不给别人添乱。 （四）敝屣荣华，浮云生死德国哲学家马丁·海德格尔提出“向死而生”的概念，可谓人生意义的真谛。怎么样才是“向死而生”？向死而生需要存在的勇气。梯利希阐述道，存在的勇气就是具有“不顾”性质的自我肯定。它能让我们从人生中源自非存在的种种威胁、困顿与焦虑不安中超拔而出，径直对自己本质性的存在样态做出肯定。 孟子说：“虽千万人吾往矣。”纵然面对千军万马，也要勇往直前，毫无畏惧的冲上去，因为正义在我。如果说萧峰“赤手屠熊搏虎，金戈荡寇鏖兵”是小勇，是匹夫之勇，那么最后他“教单于折箭，六军辟易”则是真正的大勇。因为他心系天下苍生，力求世间和平，早已将生死置之度外，为了忠义二字，以至最后选择以身殉道，令人唏嘘不已。诚然，“人只有自由地去就死，才能赋予存在以至高无上的目标。” 金庸在坚持自己的主张时，也都面对着沉重的压力，有时甚至成为暗杀目标，生命受到威胁，但是他仍然坚持立场，不改初心，后来说道：“是非善恶既已明确，我决不屈服于无理的压力之下。”他在处境危险之时，想到自己武侠小说中的那些大丈夫，就用来勉励自己：“虽然害怕，但不可卑怯退缩，以致被我书中的英雄们瞧不起。” 金庸不朽。“飞雪连天射白鹿，笑书神侠倚碧鸳。”在当今这个“娱乐至死”的年代，有一个快意恩仇、侠肝义胆的江湖供我们回眸反思，何其幸哉！","tags":[{"name":"金庸","slug":"金庸","permalink":"http://yoursite.com/tags/%E9%87%91%E5%BA%B8/"}]},{"title":"cdq分治+可撤销并查集","date":"2019-02-25T16:01:00.000Z","path":"2019/02/26/cdq分治-可撤销并查集/","text":"1.bzoj 3237 [Ahoi2013]连通图题意：给一个连通的无向图，无重边无自环，$k$个询问，每次询问给出不超过$4$条原图中的边，问将这些边删掉后，无向图是否还是保持连通。一个图是连通的当且仅当任意两个不同的点之间存在一条路径连接他们。 做法：cdq分治+可撤销并查集。每次先加入在右半区间且不在左半区间的边，递归到左半边，撤销，再加入在左半区间且不在右半区间的边，递归到右半边，撤销。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117#include&lt;bits/stdc++.h&gt;using namespace std;#define N 200010struct DSU&#123; int fa[N],rk[N],cnt; pair&lt;int*,int&gt; stk[N&lt;&lt;3]; int siz; void init(int n) &#123; cnt=n;siz=0; for(int i=1;i&lt;=n;++i) fa[i]=i,rk[i]=0; &#125; int Find(int x) &#123; while(x!=fa[x]) x=fa[x]; return x; &#125; bool Union(int x,int y) &#123; x=Find(x);y=Find(y); if(x==y) return false; if(rk[x]&lt;rk[y]) swap(x,y); stk[++siz]=pair&lt;int*,int&gt;(fa+y,fa[y]); fa[y]=x; if(rk[x]==rk[y]) &#123; stk[++siz]=pair&lt;int*,int&gt;(rk+x,rk[x]); ++rk[x]; &#125; stk[++siz]=pair&lt;int*,int&gt;(&amp;cnt,cnt); --cnt; return true; &#125; void Undo(int tim) &#123; while(siz&gt;tim) &#123; *stk[siz].first=stk[siz].second; --siz; &#125; &#125;&#125; dsu;struct edge&#123; int x,y;&#125; e[N];int n,m,q;bool vis[N],ans[N];struct node&#123; int c,a[4];&#125; t[N]; void setvis(int l,int r,bool flag)&#123; for(int i=l;i&lt;=r;++i) for(int j=0;j&lt;t[i].c;++j) vis[t[i].a[j]]=flag;&#125;void add(int l,int r)&#123; for(int i=l;i&lt;=r;++i) for(int j=0;j&lt;t[i].c;++j) &#123; int o=t[i].a[j]; if(!vis[o]) dsu.Union(e[o].x,e[o].y); &#125;&#125;void solve(int l,int r)&#123; if(l==r) &#123; ans[l]=(dsu.cnt==1); return; &#125; int mid=l+r&gt;&gt;1,now=dsu.siz; setvis(l,mid,1); add(mid+1,r); setvis(l,mid,0); solve(l,mid); dsu.Undo(now); setvis(mid+1,r,1); add(l,mid); setvis(mid+1,r,0); solve(mid+1,r); dsu.Undo(now);&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); for(int i=1;i&lt;=m;++i) scanf(\"%d%d\",&amp;e[i].x,&amp;e[i].y); scanf(\"%d\",&amp;q); for(int i=1;i&lt;=q;++i) &#123; scanf(\"%d\",&amp;t[i].c); for(int j=0;j&lt;t[i].c;++j) &#123; scanf(\"%d\",&amp;t[i].a[j]); vis[t[i].a[j]]=true; &#125; &#125; dsu.init(n); for(int i=1;i&lt;=m;++i) if(!vis[i]) dsu.Union(e[i].x,e[i].y); else vis[i]=false; solve(1,q); for(int i=1;i&lt;=q;++i) puts(ans[i]?\"Connected\":\"Disconnected\"); return 0;&#125;","tags":[{"name":"cdq分治","slug":"cdq分治","permalink":"http://yoursite.com/tags/cdq%E5%88%86%E6%B2%BB/"},{"name":"并查集","slug":"并查集","permalink":"http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"}]},{"title":"诗词中的汉字文化","date":"2019-02-25T03:44:00.000Z","path":"2019/02/25/诗词中的汉字文化/","text":"这篇文章是我上学期汉字文化课的期末作业，为数不多的写作机会，主要是最近两三个月的所思所想。以下是原文： 生活中经常会看到一部分喜欢写诗的同学，把自己写的诗发到朋友圈，往往是用词显得十分古风文雅，或者华丽至极，还可能用上几个典故，最后配上一幅美图，随之就能骗来一堆人的称赞。但如果了解一些近体诗创作的话，就会发现，写的毫无美感。下面是随便在网络上找的一首，作者不详： 月明星稀残枝静，乌鹊寒鸦南北飞。孟德何必挟天子，短歌寥寥亦洒泪。 主旨上，姑且不谈（也不知道想表达什么）。从修辞手法上说也有用典，用了曹操的《短歌行》。再宽容点，前两句就算一个动静结合吧。但是在我看来还是没有美感可言。原因就在于写的完全不符合近体诗的格律！ 诗词格律，尤其是近体诗，有三大要素，对仗、平仄、押韵。关于三者分别是什么意思，在此不再赘述。按照格律，上述诗作有两个严重问题：一是韵脚不对，“泪”字出格，“泪”是仄声，这里韵脚必须平声，更严格地说，这里应该押平水韵中的五微韵，和“飞”字同韵。二是全篇出律，且不说是否是七律的平起首句不入韵式，这首诗连基本的“一三五不论，二四六分明”也没有做到，甚至于首句中间一连出现了五个平声。 虽然说好诗未必就不出格、出律，格律工整的也未必就是好诗，但是我还是觉得古诗词读起来之所以有美感，抛开遣词造句来说，与韵律是有很大关系的。为什么“一三五不论，二四六分明”就好听，三平调与孤平要尽量避免，以及为什么会有拗救？这些都是古人智慧的结晶，也是汉字的魅力所在。汉字从前发音分平、上、去、入四声，现在是阴平、阳平、上声、去声四声。汉字的韵律美就在这四声的变化之中，格律即是关于汉字的一大重要发明，使本来朴素的字词连缀成句，读来有抑扬顿挫，循环往复的美感。写诗作词如果全然不顾格律势必会失去汉语的这一巨大优势。就好比写歌，如果曲调没有什么变化，就让人感觉平淡无奇，并不优美，这样歌词写得再好，也仿佛失去了灵魂。即使是写现在的一些文章，想把标题起的文雅一点也可以运用这一规律。 再举一个正面例子，著名歌手、音乐人许嵩在社交平台上写下过这样的句子：“机翼虚无，精通登月。天上名额有限，人间故事大全。”尤其是后两句，虽然用词普通，但很好地注意了写诗的三要素，足够让人吟咏把玩很久。让我想起了黄安《新鸳鸯蝴蝶梦》中的歌词，“在人间已是癫，何苦要上青天”，大概有类似之意。从这一句话足以看出许嵩深厚的文学功底，能写出《庐州月》、《半城烟沙》、《绝代风华》等等这样优秀的古风作品也就不足为奇了。 对联同诗词也是类似，应当尽量遵循旧体规则，凸显汉字之美。当然，如果对于格律有新的发明创造那应该另当别论。以上就是我对诗词中汉字文化的理解。","tags":[{"name":"诗词","slug":"诗词","permalink":"http://yoursite.com/tags/%E8%AF%97%E8%AF%8D/"}]},{"title":"bzoj 3569 DZY Loves Chinese II","date":"2019-02-18T04:05:00.000Z","path":"2019/02/18/bzoj-3569-DZY-Loves-Chinese-II/","text":"题意：给一个$n$个点$m$条边的(连通)无向图，$q$个询问，每次询问给出$k$条原图中的边，问将这些边删掉后，无向图是否还是保持连通。一个图是连通的当且仅当任意两个不同的点之间存在一条路径连接他们。$N\\le 100000,M\\le 500000,Q\\le 50000,1\\le K\\le 15$。 这道题实际上是bzoj 3237的加强版。 对原图随便找一个生成树出来，对非树边随机边权，树边边权则为覆盖它的所有非树边权值的异或和，那么一个边集删去后使得图不连通等价于这个边集存在一个子集的权值异或和为0。 随机是为了让边权异或和在不应该是0的情况下不为0。 正确性证明参考这篇 http://dwjshift.logdown.com/posts/2830435 时间复杂度$O(m+n+32qk)$ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119#include&lt;bits/stdc++.h&gt;using namespace std;#define N 100010#define M 500010typedef unsigned int uint; const int MAXL = 31;struct LinearBasis&#123; uint a[MAXL + 5]; vector&lt;uint&gt; v; void clear() &#123; memset(a,0,sizeof(a)); v.clear(); &#125; void insert(uint t) &#123; for(int j=MAXL;j&gt;=0;j--) if((t&gt;&gt;j)&amp;1) &#123; if(a[j]) t^=a[j]; else &#123; for(int k=0;k&lt;j;k++) if((t&gt;&gt;k)&amp;1) t^=a[k]; for(int k=j+1;k&lt;=MAXL;k++) if((a[k]&gt;&gt;j)&amp;1) a[k]^=t; a[j]=t; return; &#125; &#125; &#125; void build() &#123; for(int j=0;j&lt;=MAXL;++j) if(a[j]) v.push_back(a[j]); &#125;&#125; st;int n,m,q;int fa[N];uint val[N],eval[M];uint s=2323423;int e,head[M&lt;&lt;1],w[M&lt;&lt;1],last[M&lt;&lt;1],p[N];uint getNext()&#123; s=s^(s&lt;&lt;13); s=s^(s&gt;&gt;17); s=s^(s&lt;&lt;5); return s;&#125;int getfa(int x)&#123; if(x==fa[x]) return x; return fa[x]=getfa(fa[x]);&#125;bool Union(int x,int y)&#123; x=getfa(x);y=getfa(y); if(x==y) return false; fa[x]=y; return true;&#125;void add(int x,int y,int o)&#123; head[++e]=y;w[e]=o; last[e]=p[x]; p[x]=e;&#125;void dfs(int x,int pre,int eid)&#123; for(int j=p[x];j;j=last[j]) &#123; int y=head[j]; if(y==pre) continue; dfs(y,x,w[j]); val[x]^=val[y]; &#125; eval[eid]=val[x];&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); for(int i=1;i&lt;=n;++i) fa[i]=i; for(int i=1;i&lt;=m;++i) &#123; int x,y; scanf(\"%d%d\",&amp;x,&amp;y); if(Union(x,y)) &#123; add(x,y,i); add(y,x,i); &#125; else &#123; eval[i]=getNext(); val[x]^=eval[i]; val[y]^=eval[i]; &#125; &#125; dfs(1,0,0); int res=0; scanf(\"%d\",&amp;q); while(q--) &#123; st.clear(); int k; scanf(\"%d\",&amp;k); for(int i=0;i&lt;k;++i) &#123; int x; scanf(\"%d\",&amp;x); x^=res; st.insert(eval[x]); &#125; st.build(); if(st.v.size()&lt;k) puts(\"Disconnected\"); else ++res,puts(\"Connected\"); &#125; return 0;&#125;","tags":[{"name":"随机化","slug":"随机化","permalink":"http://yoursite.com/tags/%E9%9A%8F%E6%9C%BA%E5%8C%96/"}]},{"title":"小清新线段树","date":"2018-11-08T13:41:00.000Z","path":"2018/11/08/小清新线段树/","text":"小清新线段树的概念是由jiry_2提出的，区别于zkw(重口味)线段树命名。这里我的理解是可以归为一类结合时间复杂度分析以及懒标记应用的非传统线段树。不过既为非传统，这类题目总体来说还是做法各异，下面就结合题目做一些分析。 入门难度1.bzoj 3211 花神游历各国区间求和，区间开根号（下取整） 因为只有开根号操作，所以最后不是1就是0，且一个数开根号次数$O(loglogC)$级别的，1e9的数最多开5次。所以就怎么暴力都行了，比如判断当前区间最大值是否是1，或者直接记录访问每个节点的次数是否达到5次，用于剪枝。时间复杂度$O(nlogn+nloglogC)$。 2.bzoj 3333 排队计划这个题其实不是很入门 有一个排列，每次修改是给一个位置x，先拿出x及之后所有小于等于a[x]的数，从小到大排序后，再放回空位中，一开始及每次操作完都要输出当前排列的逆序对数。 计算逆序对数就用传统方法，把以每个位置为开头的逆序对数加起来。那么通过观察发现，这个排序操作会抹掉x及之后所有小于等于a[x]的那些位置的贡献，并且不会对其他不动的位置的贡献造成影响。这样每次用线段树通过判断最小值，每次暴力下去找到需要清除贡献的地方即可，因为每个点只会被清除一次，那么平摊下来总时间复杂度就是$O(nlogn)$。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int INF=0x3f3f3f3f;#define N 500010#define ls(p) (p&lt;&lt;1)#define rs(p) (p&lt;&lt;1|1)int a[N],n,m;int h[N],cnt;int val[N],c[N];struct node&#123; int l,r,mn; ll val;&#125; t[N&lt;&lt;2];int ask(int x)&#123; int ans=0; for(;x;x-=x&amp;(-x)) ans+=c[x]; return ans;&#125;void change(int x,int y)&#123; for(;x&lt;=cnt;x+=x&amp;(-x)) c[x]+=y;&#125;void push_up(int p)&#123; t[p].mn=min(t[ls(p)].mn,t[rs(p)].mn); t[p].val=t[ls(p)].val+t[rs(p)].val;&#125;void build(int p,int l,int r)&#123; t[p].l=l;t[p].r=r; if(l==r) &#123; t[p].val=val[l]; t[p].mn=a[l]; return; &#125; int mid=l+r&gt;&gt;1; build(ls(p),l,mid); build(rs(p),mid+1,r); push_up(p);&#125;void change(int p,int l,int r,int y)&#123; if(t[p].r&lt;l||r&lt;t[p].l||t[p].mn&gt;y) return; if(t[p].l==t[p].r) &#123; t[p].val=0; t[p].mn=INF; a[t[p].l]=INF; return; &#125; change(ls(p),l,r,y); change(rs(p),l,r,y); push_up(p);&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); for(int i=1;i&lt;=n;++i) &#123; scanf(\"%d\",a+i); h[i]=a[i]; &#125; cnt=n; sort(h+1,h+cnt+1); cnt=unique(h+1,h+cnt+1)-h-1; for(int i=n;i&gt;=1;--i) &#123; a[i]=lower_bound(h+1,h+cnt+1,a[i])-h; val[i]=ask(a[i]-1); change(a[i],1); &#125; build(1,1,n); printf(\"%lld\\n\",t[1].val); while(m--) &#123; int x; scanf(\"%d\",&amp;x); if(a[x]!=INF) change(1,x,n,a[x]); printf(\"%lld\\n\",t[1].val); &#125; return 0;&#125; 进阶难度1.Petrozavodsk Winter-2018. AtCoder Contest I. ADD, DIV, MAX维护序列，支持区间加，区间整除，区间求最大值。 我们定义线段树上每个节点势能函数为$W=log_2(Max-Min)$，或者直观理解就是这个区间除以多少次2就会完全相同。那么由于线段树一共$O(n)$个节点，初始总势能为$O(nlogC)$。因为线段树区间操作会访问$O(logn)$个节点，所以一次区间加操作至多增加$O(lognlogC)$。由于我们修改时访问一个节点就会使该节点势能减一，所以总的时间复杂度是$O(nlognlogC)$。 具体实现就是线段树维护最大值最小值，以及加法的懒标记，对于除法操作如果当前区间的最大值和最小值的改变量是相同的，那么对于这个区间来说，除法操作就可以看成整体加上一个数，否则暴力递归到左右子树。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#include &lt;bits/stdc++.h&gt;using namespace std;#define N 200010#define ls(p) (p&lt;&lt;1)#define rs(p) (p&lt;&lt;1|1)struct node&#123; int l,r,min,max,add;&#125; t[N&lt;&lt;4];int n,m;void push_up(int p)&#123; t[p].min=min(t[ls(p)].min,t[rs(p)].min); t[p].max=max(t[ls(p)].max,t[rs(p)].max);&#125;void update(int p,int y)&#123; t[p].add+=y; t[p].min+=y; t[p].max+=y;&#125;void push_down(int p)&#123; if(t[p].add) &#123; update(ls(p),t[p].add); update(rs(p),t[p].add); t[p].add=0; &#125;&#125;void build(int p,int l,int r)&#123; t[p].l=l;t[p].r=r; if(l==r) &#123; int x; scanf(\"%d\",&amp;x); t[p].min=t[p].max=x; t[p].add=0; return ; &#125; int mid=l+r&gt;&gt;1; build(ls(p),l,mid); build(rs(p),mid+1,r); push_up(p);&#125;void Add(int p,int l,int r,int x)&#123; if(t[p].r&lt;l || r&lt;t[p].l) return; if(l&lt;=t[p].l &amp;&amp; t[p].r&lt;=r) &#123; update(p,x); return; &#125; push_down(p); Add(ls(p),l,r,x); Add(rs(p),l,r,x); push_up(p);&#125;void Div(int p,int l,int r,int x)&#123; if(t[p].r&lt;l||r&lt;t[p].l|| (t[p].max==0)) return; if(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r &amp;&amp; t[p].min/x-t[p].min==t[p].max/x-t[p].max) &#123; update(p,t[p].min/x-t[p].min); return; &#125; push_down(p); Div(ls(p),l,r,x); Div(rs(p),l,r,x); push_up(p);&#125;int Ask(int p,int l,int r)&#123; if(r&lt;t[p].l || t[p].r&lt;l) return 0; if(l&lt;=t[p].l &amp;&amp; t[p].r&lt;=r) return t[p].max; push_down(p); return max(Ask(ls(p),l,r),Ask(rs(p),l,r));&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); build(1,1,n); while(m--) &#123; int op,l,r,x; scanf(\"%d%d%d%d\",&amp;op,&amp;l,&amp;r,&amp;x); ++l;++r; if(op==0) Add(1,l,r,x); else if(op==1) &#123; if(x&gt;1) Div(1,l,r,x); &#125; else printf(\"%d\\n\",Ask(1,l,r)); &#125; return 0;&#125; 2.Codeforces 438D The Child and Sequence维护序列，支持区间求和，区间模一个数，单点修改。 首先需要用一个很好证明的式子$x\\quad mod\\quad p&lt;=\\frac{x}{2}$，也就是说模操作会让每个数至少除以2。由于只有单点修改，那么就比上一个题好分析了，势能函数是每个区间最大值除以2的次数，初始总势能$O(nlogC)$，单点修改还是，改变了$O(logn)$个点，每个点充能$O(logC)$，所以总的时间复杂度$O(nlognlogC)$。 那么具体实现额外维护最大值，当区间最大值小于模数就剪枝，否则暴力下去。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define N 100010#define ls(p) (p&lt;&lt;1)#define rs(p) (p&lt;&lt;1|1)struct node&#123; int l,r,mx; ll sum;&#125; t[N&lt;&lt;2];int n,m;void push_up(int p)&#123; t[p].mx=max(t[ls(p)].mx,t[rs(p)].mx); t[p].sum=t[ls(p)].sum+t[rs(p)].sum;&#125;void build(int p,int l,int r)&#123; t[p].l=l;t[p].r=r; if(l==r) &#123; int x; scanf(\"%d\",&amp;x); t[p].mx=x; t[p].sum=x; return ; &#125; int mid=l+r&gt;&gt;1; build(ls(p),l,mid); build(rs(p),mid+1,r); push_up(p);&#125;void change(int p,int l,int r,int y)&#123; if(t[p].r&lt;l||r&lt;t[p].l||t[p].mx&lt;y) return; if(t[p].l==t[p].r) &#123; t[p].sum=t[p].mx=t[p].mx%y; return; &#125; change(ls(p),l,r,y); change(rs(p),l,r,y); push_up(p);&#125;void change(int p,int x,int y)&#123; if(t[p].l==t[p].r) &#123; t[p].sum=t[p].mx=y; return; &#125; int mid=t[p].l+t[p].r&gt;&gt;1; if(x&lt;=mid) change(ls(p),x,y); else change(rs(p),x,y); push_up(p);&#125;ll ask(int p,int l,int r)&#123; if(t[p].r&lt;l||r&lt;t[p].l) return 0; if(l&lt;=t[p].l &amp;&amp; t[p].r&lt;=r) return t[p].sum; return ask(ls(p),l,r)+ask(rs(p),l,r);&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); build(1,1,n); while(m--) &#123; int opt; scanf(\"%d\",&amp;opt); if(opt==1) &#123; int l,r; scanf(\"%d%d\",&amp;l,&amp;r); printf(\"%lld\\n\",ask(1,l,r)); &#125; else if(opt==2) &#123; int l,r,x; scanf(\"%d%d%d\",&amp;l,&amp;r,&amp;x); change(1,l,r,x); &#125; else &#123; int x,y; scanf(\"%d%d\",&amp;x,&amp;y); change(1,x,y); &#125; &#125; return 0;&#125; 3.hdu 5306 Gorgeous Sequence维护序列，区间对一个数取min，询问区间最小值，区间求和 这个题的做法就比较科幻了。 《Segment tree Beats!》课件中关于时间复杂度的证明一些是错误的 可以参考这里，http://jiry-2.blog.uoj.ac/blog/1404 时间复杂度$O(nlog^{2}n)$。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define N 1000010#define ls(p) (p&lt;&lt;1)#define rs(p) (p&lt;&lt;1|1)struct node&#123; int fi,se,cnt,cov; ll sum;&#125; t[N&lt;&lt;2];int n,m;void read(int &amp;x)&#123; static char ch; while(!isdigit(ch=getchar())); x=ch-'0'; while(isdigit(ch=getchar())) x=x*10+(ch-'0');&#125;void push_up(int p)&#123; t[p].sum=t[ls(p)].sum+t[rs(p)].sum; if(t[ls(p)].fi==t[rs(p)].fi) &#123; t[p].fi=t[ls(p)].fi; t[p].se=max(t[ls(p)].se,t[rs(p)].se); t[p].cnt=t[ls(p)].cnt+t[rs(p)].cnt; &#125; else if(t[ls(p)].fi&gt;t[rs(p)].fi) &#123; t[p].fi=t[ls(p)].fi; t[p].se=max(t[ls(p)].se,t[rs(p)].fi); t[p].cnt=t[ls(p)].cnt; &#125; else &#123; t[p].fi=t[rs(p)].fi; t[p].se=max(t[ls(p)].fi,t[rs(p)].se); t[p].cnt=t[rs(p)].cnt; &#125;&#125;void build(int p,int l,int r)&#123; t[p].cov=-1; if(l==r) &#123; read(t[p].fi); t[p].se=-1; t[p].cnt=1; t[p].sum=t[p].fi; return; &#125; int mid=l+r&gt;&gt;1; build(ls(p),l,mid); build(rs(p),mid+1,r); push_up(p);&#125;void update(int p,int y)&#123; if(y&gt;=t[p].fi) return; t[p].sum-=1LL*t[p].cnt*(t[p].fi-y); t[p].fi=t[p].cov=y;&#125;void push_down(int p)&#123; if(t[p].cov!=-1) &#123; update(ls(p),t[p].cov); update(rs(p),t[p].cov); t[p].cov=-1; &#125;&#125;void change(int p,int l,int r,int L,int R,int y)&#123; if(r&lt;L||R&lt;l||t[p].fi&lt;=y) return; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; if(l==r) &#123; t[p].sum=t[p].fi=y; t[p].se=-1; t[p].cnt=1; return; &#125; if(t[p].se&lt;y &amp;&amp; y&lt;t[p].fi) &#123; update(p,y); return; &#125; &#125; push_down(p); int mid=l+r&gt;&gt;1; change(ls(p),l,mid,L,R,y); change(rs(p),mid+1,r,L,R,y); push_up(p);&#125;int ask_max(int p,int l,int r,int L,int R)&#123; if(r&lt;L||R&lt;l) return -1; if(L&lt;=l &amp;&amp; r&lt;=R) return t[p].fi; push_down(p); int mid=l+r&gt;&gt;1; return max(ask_max(ls(p),l,mid,L,R),ask_max(rs(p),mid+1,r,L,R));&#125;ll ask_sum(int p,int l,int r,int L,int R)&#123; if(r&lt;L||R&lt;l) return 0; if(L&lt;=l &amp;&amp; r&lt;=R) return t[p].sum; push_down(p); int mid=l+r&gt;&gt;1; return ask_sum(ls(p),l,mid,L,R)+ask_sum(rs(p),mid+1,r,L,R);&#125;int main()&#123; int T; read(T); while(T--) &#123; read(n);read(m); build(1,1,n); while(m--) &#123; int opt,x,y,t; read(opt);read(x);read(y); if(opt==0) &#123; read(t); change(1,1,n,x,y,t); &#125; else if(opt==1) printf(\"%d\\n\",ask_max(1,1,n,x,y)); else printf(\"%lld\\n\",ask_sum(1,1,n,x,y)); &#125; &#125; return 0;&#125; 4.hdu 5634 Rikka with Phi维护序列，区间赋值，区间取phi，区间求和。 首先根据定义以及相关公式，知道一个大于2的正整数的欧拉函数都是偶数，一个偶数的欧拉函数就至少小了一半，那么一个数能做的次数也就是$O(logC)$级别的。 根据前面几个题，这个题的操作就很好想了，如果当前区间的数都相同，那么区间取phi的操作就转化成了区间赋值，同样的打标记即可，不同的话就暴力下去。 时间复杂度是一个log的就比较确信了，然而并不会证。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define N 300010#define MAXN 10000000#define ls(p) (p&lt;&lt;1)#define rs(p) (p&lt;&lt;1|1)int prime[MAXN+5],phi[MAXN+5],tot;bool vis[MAXN+5];struct node&#123; int l,r,max,min,cov; ll sum;&#125; t[N&lt;&lt;2];int n,m;void getprime()&#123; phi[1]=1; for(int i=2;i&lt;=MAXN;++i) &#123; if(!vis[i]) &#123; prime[tot++]=i; phi[i]=i-1; &#125; for(int j=0;j&lt;tot &amp;&amp; prime[j]&lt;=MAXN/i;++j) &#123; vis[i*prime[j]]=true; if(i%prime[j]) phi[i*prime[j]]=phi[i]*(prime[j]-1); else &#123; phi[i*prime[j]]=phi[i]*prime[j]; break; &#125; &#125; &#125;&#125;void push_up(int p)&#123; t[p].sum=t[ls(p)].sum+t[rs(p)].sum; t[p].max=max(t[ls(p)].max,t[rs(p)].max); t[p].min=min(t[ls(p)].min,t[rs(p)].min);&#125;void build(int p,int l,int r)&#123; t[p].l=l;t[p].r=r; t[p].cov=-1; if(l==r) &#123; int x; scanf(\"%d\",&amp;x); t[p].sum=t[p].max=t[p].min=x; return ; &#125; int mid=l+r&gt;&gt;1; build(ls(p),l,mid); build(rs(p),mid+1,r); push_up(p);&#125;void update(int p,int y)&#123; t[p].sum=1LL*y*(t[p].r-t[p].l+1); t[p].max=t[p].min=y; t[p].cov=y;&#125;void push_down(int p)&#123; if(t[p].cov!=-1) &#123; update(ls(p),t[p].cov); update(rs(p),t[p].cov); t[p].cov=-1; &#125;&#125;void change(int p,int l,int r)&#123; if(t[p].r&lt;l||r&lt;t[p].l) return; if(l&lt;=t[p].l &amp;&amp; t[p].r&lt;=r &amp;&amp; t[p].max==t[p].min) &#123; update(p,phi[t[p].max]); return; &#125; push_down(p); change(ls(p),l,r); change(rs(p),l,r); push_up(p);&#125;void cover(int p,int l,int r,int y)&#123; if(t[p].r&lt;l||r&lt;t[p].l) return; if(l&lt;=t[p].l &amp;&amp; t[p].r&lt;=r) &#123; update(p,y); return; &#125; push_down(p); cover(ls(p),l,r,y); cover(rs(p),l,r,y); push_up(p);&#125;ll ask(int p,int l,int r)&#123; if(t[p].r&lt;l||r&lt;t[p].l) return 0; if(l&lt;=t[p].l &amp;&amp; t[p].r&lt;=r) return t[p].sum; push_down(p); return ask(ls(p),l,r)+ask(rs(p),l,r);&#125;int main()&#123; getprime(); int T; scanf(\"%d\",&amp;T); while(T--) &#123; scanf(\"%d%d\",&amp;n,&amp;m); build(1,1,n); while(m--) &#123; int opt,l,r,x; scanf(\"%d%d%d\",&amp;opt,&amp;l,&amp;r); if(opt==1) change(1,l,r); else if(opt==2) &#123; scanf(\"%d\",&amp;x); cover(1,l,r,x); &#125; else printf(\"%lld\\n\",ask(1,l,r)); &#125; &#125; return 0;&#125;","tags":[{"name":"线段树","slug":"线段树","permalink":"http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"},{"name":"时间复杂度","slug":"时间复杂度","permalink":"http://yoursite.com/tags/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"}]},{"title":"一类区间分治技巧","date":"2018-10-30T08:03:00.000Z","path":"2018/10/30/一类区间分治技巧/","text":"对于一类区间询问问题，如果可以离线并且可以快速合并区间信息那么就有一个非常实用的分治方法。首先我们对总区间分治下去，当前区间$[l , r]$中点为$mid$，那么我们将所有的询问分成三类，一类包括$mid$这个点，一类完全在左侧，一类完全在右侧，我们只要在当前这层解决第一类的所有询问，后两类分治下去即可。怎么快速的求呢？方法也非常简单，因为信息可以快速合并，那么我们以$mid$为界，往前处理出所有后缀信息，往后处理出所有前缀信息，对于一个跨过$mid$的询问，拿两部分拼一下就算出答案了！ 比在线算法优秀的地方在于可以优雅的去掉询问数所乘的log。 练习题目1.2017-2018 Petrozavodsk Winter Training Camp, Saratov SU Contest J. Subsequence Sum Queries考虑背包dp，如果用普通的线段树，时间复杂度$O((n+q)m^2logn)$，因为拆成logn个区间，要完全合并两个背包log次，合并一次(循环卷积)复杂度是$O(m^2)$，必T无疑。用优秀的分治就可以降到$O(m(nlogn+q))$。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;bits/stdc++.h&gt;using namespace std;#define N 200010const int mod=1e9+7;struct node&#123; int l,r,o;&#125; t[N],tmp[N];int n,m,len;int sub[N][22],pre[N][22];int a[N],ans[N];int calc(int *f,int *g)&#123; int ans=0; for(int i=0;i&lt;m;++i) &#123; ans+=1LL*f[i]*g[(m-i)%m]%mod; if(ans&gt;=mod) ans-=mod; &#125; return ans;&#125;void solve(int l,int r,int L,int R)&#123; if(l&gt;r||L&gt;R) return ; int mid=l+r&gt;&gt;1; int x=L-1,y=R+1,now=L,j; for(int i=L;i&lt;=R;++i) if(t[i].r&lt;mid) tmp[++x]=t[i]; else if(t[i].l&gt;mid) tmp[--y]=t[i]; else t[now++]=t[i]; sub[mid+1][0]=1; for(int i=1;i&lt;m;++i) sub[mid+1][i]=0; for(int i=mid;i&gt;=l;--i) for(int j=0;j&lt;m;++j) sub[i][j]=(sub[i+1][j]+sub[i+1][(j-a[i]+m)%m])%mod; pre[mid][0]=1; for(int i=1;i&lt;m;++i) pre[mid][i]=0; for(int i=mid+1;i&lt;=r;++i) for(int j=0;j&lt;m;++j) pre[i][j]=(pre[i-1][j]+pre[i-1][(j-a[i]+m)%m])%mod; for(int i=L;i&lt;now;++i) ans[t[i].o]=calc(sub[t[i].l],pre[t[i].r]); for(int i=L;i&lt;=x;++i) t[i]=tmp[i]; for(int i=y;i&lt;=R;++i) t[i]=tmp[i]; solve(l,mid-1,L,x); solve(mid+1,r,y,R);&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); for(int i=1;i&lt;=n;++i) &#123; scanf(\"%d\",&amp;a[i]); a[i]%=m; &#125; scanf(\"%d\",&amp;len); for(int i=1;i&lt;=len;++i) &#123; scanf(\"%d%d\",&amp;t[i].l,&amp;t[i].r); t[i].o=i; &#125; solve(1,n,1,len); for(int i=1;i&lt;=len;++i) printf(\"%d\\n\",ans[i]); return 0;&#125; 2.2018 Multi-University Training Contest 3 Problem J. Rectangle Radar Scanner对x轴分治，对于y用线段树维护一下就好了 时间复杂度$O(nlog^2n+mlogn)$ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define N 100010#define M 1000010#define ls(p) (p&lt;&lt;1)#define rs(p) (p&lt;&lt;1|1)const int INF=0x3f3f3f3f;struct segment&#123; int l,r; int min,max,prod;&#125; t[N&lt;&lt;2];struct REC&#123; int xl,xr,yl,yr,o;&#125; rec[M],tmp[M];int n,m,K;int mn[M],mx[M],prod[M];pair&lt;int,int&gt; val[N];bool cmpl(const REC &amp;a,const REC &amp;b)&#123; return a.xl&gt;b.xl;&#125;bool cmpr(const REC &amp;a,const REC &amp;b)&#123; return a.xr&lt;b.xr;&#125;void push_up(int p)&#123; t[p].min=min(t[ls(p)].min,t[rs(p)].min); t[p].max=max(t[ls(p)].max,t[rs(p)].max); t[p].prod=1LL*t[ls(p)].prod*t[rs(p)].prod%K;&#125;void build(int p,int l,int r)&#123; t[p].l=l;t[p].r=r; t[p].min=INF; t[p].max=-INF; t[p].prod=1; if(l==r) return; int mid=l+r&gt;&gt;1; build(ls(p),l,mid); build(rs(p),mid+1,r);&#125;void insert(int p,int x,int y)&#123; if(t[p].l==t[p].r) &#123; t[p].min=min(t[p].min,y); t[p].max=max(t[p].max,y); t[p].prod=1LL*t[p].prod*y%K; return; &#125; int mid=t[p].l+t[p].r&gt;&gt;1; if(x&lt;=mid) insert(ls(p),x,y); else insert(rs(p),x,y); push_up(p);&#125;void ask(int p,int x)&#123; if(rec[x].yl&lt;=t[p].l &amp;&amp; t[p].r&lt;=rec[x].yr) &#123; int o=rec[x].o; mn[o]=min(mn[o],t[p].min); mx[o]=max(mx[o],t[p].max); prod[o]=1LL*prod[o]*t[p].prod%K; return; &#125; int mid=t[p].l+t[p].r&gt;&gt;1; if(rec[x].yl&lt;=mid) ask(ls(p),x); if(rec[x].yr&gt;mid) ask(rs(p),x);&#125;void travel(int p)&#123; if(t[p].min==INF) return; t[p].min=INF; t[p].max=-INF; t[p].prod=1; if(t[p].l==t[p].r) return; travel(ls(p)); travel(rs(p));&#125;void solve(int l,int r,int L,int R)&#123; if(l&gt;r||L&gt;R) return; int mid=l+r&gt;&gt;1; int x=L-1,y=R+1,now=L,j; for(int i=L;i&lt;=R;++i) if(rec[i].xr&lt;mid) tmp[++x]=rec[i]; else if(rec[i].xl&gt;mid) tmp[--y]=rec[i]; else rec[now++]=rec[i]; sort(rec+L,rec+now,cmpl); j=mid+1; for(int i=L;i&lt;now;++i) &#123; while(j&gt;rec[i].xl) &#123; --j; insert(1,val[j].first,val[j].second); &#125; ask(1,i); &#125; travel(1); sort(rec+L,rec+now,cmpr); j=mid; for(int i=L;i&lt;now;++i) &#123; while(j&lt;rec[i].xr) &#123; ++j; insert(1,val[j].first,val[j].second); &#125; ask(1,i); &#125; travel(1); for(int i=L;i&lt;=x;++i) rec[i]=tmp[i]; for(int i=y;i&lt;=R;++i) rec[i]=tmp[i]; solve(l,mid-1,L,x); solve(mid+1,r,y,R);&#125;void read()&#123; int a[2],b[2],c[2],d[2]; int p,q,r,mod; scanf(\"%d%d%d%d%d%d%d%d%d%d\",&amp;m,a,b,c,d,&amp;p,&amp;q,&amp;r,&amp;mod,&amp;K); for(int i=1;i&lt;=m;++i) &#123; a[i&amp;1]=(1LL*p*a[(i&amp;1)^1]+1LL*q*b[(i&amp;1)^1]+r)%mod; b[i&amp;1]=(1LL*p*b[(i&amp;1)^1]+1LL*q*a[(i&amp;1)^1]+r)%mod; c[i&amp;1]=(1LL*p*c[(i&amp;1)^1]+1LL*q*d[(i&amp;1)^1]+r)%mod; d[i&amp;1]=(1LL*p*d[(i&amp;1)^1]+1LL*q*c[(i&amp;1)^1]+r)%mod; rec[i].xl=min(a[i&amp;1]%n,b[i&amp;1]%n)+1; rec[i].xr=max(a[i&amp;1]%n,b[i&amp;1]%n)+1; rec[i].yl=min(c[i&amp;1]%n,d[i&amp;1]%n)+1; rec[i].yr=max(c[i&amp;1]%n,d[i&amp;1]%n)+1; rec[i].o=i; mn[i]=INF; mx[i]=-INF; prod[i]=1; &#125;&#125;int main()&#123; int T; scanf(\"%d\",&amp;T); while(T--) &#123; scanf(\"%d\",&amp;n); for(int i=1;i&lt;=n;++i) &#123; int x,y; scanf(\"%d%d\",&amp;x,&amp;y); val[i]=make_pair(x,y); &#125; build(1,1,n); read(); solve(1,n,1,m); long long ans=0; for(int i=1;i&lt;=m;++i) if(mn[i]!=INF) ans+=prod[i]^mx[i]^mn[i]; printf(\"%lld\\n\",ans); &#125; return 0;&#125;","tags":[{"name":"分治","slug":"分治","permalink":"http://yoursite.com/tags/%E5%88%86%E6%B2%BB/"}]},{"title":"高维前缀和","date":"2018-10-29T12:30:00.000Z","path":"2018/10/29/高维前缀和/","text":"问题的引入一个$n \\times m$二维矩阵$A$的前缀和$S$,一般来说定义为$S_{x,y}=\\sum_{i=1}^{x}\\sum_{j=1}^{y}A_{i,j}$。 代码常见的写法就是用容斥加加减减： 123for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) S[i][j]=S[i-1][j]+S[i][j-1]-S[i-1][j-1]+A[[i][j]; 这是二维的情况，如果是三维或者是更高的k维，不难发现复杂度有一个$2^k$，指数爆炸了。 然而，用高维前缀和的技巧，就可以有效的将时间复杂度降下来。具体的思路是一维一维的求和。比如还是刚才二维的例子，为方便叙述，想象矩阵左上角是$(1,1)$，我们先对每行分别从左到右累加，即对每行求一维前缀和，再对每列从上到下累加，还是相同的过程，这样求出的结果就是二维前缀和了。也可以从定义前缀和的式子入手考虑，每个求和号就代表一个维度，我们的计算过程就相当于一个求和号一个求和号的算，比较简单。 高维前缀和代码，简洁的一匹： 12345678910for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) S[i][j]=A[i][j];for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) S[i][j]+=S[i][j-1];for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) S[i][j]+=S[i-1][j]; 子集和变换高维前缀和在二进制数上的应用就是做子集和变换。比如有一些小于$2^{20}$正整数给一个数$x$，我要统计所有满足$x\\&amp;y=y$的数y有多少个，这里的and就是二进制与。这里其实还是高维前缀和，可以把每一个数看成$20$维超立方体的其中一个格子，满足上述式子的$x$和$y$的关系就是，每一个维度下$y$对应的值都要小于等于$x$对应的值（虽然每个维度只有两种值，0或1）这样就是相同的问题了，于是我们不仅可以维护一个子集的信息，还可以维护超集的信息，维护的内容也不只限于求和，还可以求最值等等。 求超集和： 12345678void doit(int *f,int n)&#123; int len=1&lt;&lt;n; for(int i=0;i&lt;n;++i) for(int j=0;j&lt;len;++j) if(~j&amp;(1&lt;&lt;i)) f[j]+=f[j^(1&lt;&lt;i)];&#125; 第一层循环枚举维度，第二层枚举所有元素，注意第二层循环正序或者倒序都是一样的，因为每个维度大小只有2，即0或1，做的就是把“1”加到“0”上。 练习题目1.SPOJ Time Limit Exceeded简单的递推一下就是记$dp_{i,j}$表示考虑前$i$个数，第$i$个数为$j$的方案数，转移方程很容易$dp_{i,j}=\\sum_{k=0}^{2^m-1}dp_{i-1,k}[j\\&amp;k=0]$,并且如果j是$c_i$的倍数，那么$dp_{i,j}=0$。 然而朴素的转移是$O(n(2^m)^2)$，显然会TLE。转化一下$j\\&amp; k=0$等价于$j\\&amp;(\\sim k)=(\\sim k)$，那么我们把上一次的dp值状态取反，然后求超集和就ok了，时间复杂度$O(n^{2}2^{m})$。 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;bits/stdc++.h&gt;using namespace std;const int mod=1e9;#define N 55#define M 16int n,m;int c[N];int dp[1&lt;&lt;M];void doit(int *f,int n)&#123; int len=1&lt;&lt;n; for(int i=0;i&lt;n;++i) for(int j=0;j&lt;len;++j) if(~j&amp;(1&lt;&lt;i)) f[j]=(f[j]+f[j^(1&lt;&lt;i)])%mod;&#125;int main()&#123; int T; scanf(\"%d\",&amp;T); while(T--) &#123; scanf(\"%d%d\",&amp;n,&amp;m); for(int i=1;i&lt;=n;++i) scanf(\"%d\",c+i); int len=1&lt;&lt;m; for(int i=1;i&lt;len;++i)dp[i]=0; dp[0]=1; for(int i=1;i&lt;=n;++i) &#123; for(int j=0;j&lt;len;j+=2) swap(dp[j],dp[j^(len-1)]); doit(dp,m); for(int j=0;j&lt;len;j+=c[i]) dp[j]=0; &#125; int ans=0; for(int i=0;i&lt;len;++i) ans=(ans+dp[i])%mod; printf(\"%d\\n\",ans); &#125;&#125; 2.codeforces 449D - Jzzhu and Numbers求and起来为0的子集的个数。 先用高维前缀和算出$dp_S$表示状态包含S的数的个数，然后令$2^{dp_S}-1$就是and起来包含S的子集的个数，然后再高维差分回去，就能求出答案了。 123456789101112131415161718192021222324252627282930313233343536373839#include&lt;bits/stdc++.h&gt;using namespace std;const int mod=1e9+7;int n;int dp[1&lt;&lt;20];int power(int x,int n)&#123; int ans=1; while(n) &#123; if(n&amp;1) ans=1LL*ans*x%mod; x=1LL*x*x%mod; n&gt;&gt;=1; &#125; return ans;&#125;void doit(int *f,int n,int o)&#123; int len=1&lt;&lt;n; for(int i=0;i&lt;n;++i) for(int j=0;j&lt;len;++j) if(~j&amp;(1&lt;&lt;i)) f[j]=(f[j]+f[j^(1&lt;&lt;i)]*o)%mod;&#125;int main()&#123; scanf(\"%d\",&amp;n); for(int i=0;i&lt;n;++i) &#123; int x; scanf(\"%d\",&amp;x); dp[x]++; &#125; doit(dp,20,1); for(int i=0;i&lt;(1&lt;&lt;20);++i) dp[i]=power(2,dp[i]); doit(dp,20,-1); printf(\"%d\\n\",(dp[0]+mod)%mod); return 0;&#125; 3.hihocoder 1496 寻找最大值求$a_i\\times a_j \\times (a_i \\&amp; a_j)$的最大值，枚举$\\&amp;$值，前面就选超集中的最大值和次大值，用高维前缀和处理出来。 1234567891011121314151617181920212223242526272829303132333435363738394041#include&lt;bits/stdc++.h&gt;using namespace std;int n;int f[1&lt;&lt;20];int g[1&lt;&lt;20];int main()&#123; int T; scanf(\"%d\",&amp;T); while(T--) &#123; scanf(\"%d\",&amp;n); int len=1&lt;&lt;20; for(int i=0;i&lt;len;++i) f[i]=g[i]=0; for(int i=1;i&lt;=n;++i) &#123; int x; scanf(\"%d\",&amp;x); if(f[x]) g[x]=x; f[x]=x; &#125; for(int i=0;i&lt;20;++i) for(int j=0;j&lt;len;++j) if((~j)&amp;(1&lt;&lt;i)) &#123; int k=j^(1&lt;&lt;i); if(f[k]&gt;f[j]) &#123; g[j]=max(f[j],g[k]); f[j]=f[k]; &#125; else g[j]=max(g[j],f[k]); &#125; long long ans=0; for(int i=0;i&lt;len;++i) ans=max(ans,1LL*f[i]*g[i]*i); printf(\"%lld\\n\",ans); &#125; return 0;&#125; 4.2016 Multi-University Training Contest 4 Bonds给一个不超过20个点的无向连通图，无重边无自环，求每条边被多少个极小割边集包括。 显然能观察到极小割只会将图分成两个连通块，那么我们先用点的连通性作为状态bfs一下，得到所有可能的分法。之后如果暴力统计的话复杂度就是$O(n^{2}2^{n})$，我们计算反面，每条边极小割边集出出现的次数等于极小割总数减去这条边连接的两点在同一连通块的情况，然后就可以高维前缀和了，$O(n2^{n})$。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include&lt;bits/stdc++.h&gt;using namespace std;#define lowbit(x) (x&amp;(-x))int bs[1&lt;&lt;21];int q[1&lt;&lt;21];int ans[1&lt;&lt;21];bool vis[1&lt;&lt;21];int n,m;int a[400],b[400];void bfs()&#123; int l=0,r=0; for(int i=0;i&lt;n;++i) q[r++]=1&lt;&lt;i,vis[1&lt;&lt;i]=true; while(l!=r) &#123; int x=q[l++]; int y=bs[x]&amp;(~x); while(y) &#123; if(!vis[x|lowbit(y)]) &#123; vis[x|lowbit(y)]=true; q[r++]=x|lowbit(y); &#125; y-=lowbit(y); &#125; &#125;&#125;int main()&#123; int T; scanf(\"%d\",&amp;T); for(int cas=1;cas&lt;=T;++cas) &#123; scanf(\"%d%d\",&amp;n,&amp;m); int all=1&lt;&lt;n; for(int i=0;i&lt;all;++i) bs[i]=0,vis[i]=0,ans[i]=0; for(int i=1;i&lt;=m;++i) &#123; scanf(\"%d%d\",a+i,b+i); bs[1&lt;&lt;a[i]]|=1&lt;&lt;b[i]; bs[1&lt;&lt;b[i]]|=1&lt;&lt;a[i]; &#125; for(int i=0;i&lt;all;++i) bs[i]=bs[i^lowbit(i)]|bs[lowbit(i)]; bfs(); int tot=0; for(int i=0;i&lt;all;++i) if(i&lt;((all-1)^i) &amp;&amp; vis[i] &amp;&amp; vis[(all-1)^i]) ans[i]++,ans[(all-1)^i]++,tot++; for(int i=0;i&lt;n;++i) for(int j=0;j&lt;all;++j) if(~j&amp;(1&lt;&lt;i)) ans[j]+=ans[j^(1&lt;&lt;i)]; printf(\"Case #%d:\",cas); for(int i=1;i&lt;=m;++i) printf(\" %d\",tot-ans[(1&lt;&lt;a[i])|(1&lt;&lt;b[i])]); puts(\"\"); &#125; return 0;&#125; 5.2017-2018 Petrozavodsk Winter Training Camp, Saratov SU Contest F.GCD先从$n$个数中随机一个数，然后就有大于二分之一的概率选到了最优解中的一个数，那么枚举这个数的所有约数，用至少是$n-k$个数的约数的数更新答案，重复多做几次，降低随不到的概率。关键是怎么不暴力的做后面说的这个事情。首先，一个$10^{18}$范围内的数的约数个数不会很多，大概几倍的$10^{6}$就够，具体范围我记得有一个表格。然后将随到数分解质因数，每个不同的质因数看成一个维度，然后求个高维后缀和，就可以了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define N 100010int prime[1000010],tot;bool vis[1000010];ll a[N],ans;int n,k;void getprime()&#123; for(int i=2;i&lt;=1000000;++i) &#123; if(!vis[i]) prime[++tot]=i; for(int j=1;j&lt;=tot &amp;&amp; prime[j]&lt;=1000000/i;++j) &#123; vis[i*prime[j]]=true; if(i%prime[j]==0) break; &#125; &#125;&#125;ll p[50];int num[50];int cnt;ll dv[5000010];int f[5000010];int len;void dfs(int x,ll now)&#123; if(x&gt;cnt) &#123; dv[++len]=now; return; &#125; dfs(x+1,now); for(int i=1;i&lt;=num[x];++i) &#123; now*=p[x]; dfs(x+1,now); &#125;&#125;void divide(ll x)&#123; for(int i=1;i&lt;=tot;++i) if(x%prime[i]==0) &#123; ++cnt; p[cnt]=prime[i]; num[cnt]=0; while(x%prime[i]==0) x/=prime[i],++num[cnt]; &#125; for(int i=1;i&lt;=n;++i) &#123; ll g=__gcd(x,a[i]); if(g&gt;1 &amp;&amp; g&lt;x) &#123; if(g==x/g) ++cnt,p[cnt]=g,num[cnt]=2; else &#123; p[++cnt]=g;num[cnt]=1; p[++cnt]=x/g;num[cnt]=1; if(p[cnt-1]&gt;p[cnt]) swap(p[cnt-1],p[cnt]); &#125; x=1; break; &#125; &#125; if(x&gt;1) p[++cnt]=x,num[cnt]=1;&#125;void work(ll now)&#123; cnt=len=0; divide(now); dfs(1,1); sort(dv+1,dv+len+1); for(int i=1;i&lt;=len;++i) f[i]=0; for(int i=1;i&lt;=n;++i) &#123; ll g=__gcd(now,a[i]); ++f[lower_bound(dv+1,dv+len+1,g)-dv]; &#125; for(int i=1;i&lt;=cnt;++i) &#123; ll x=p[i]; for(int j=len,k=len;j&gt;=1;--j) if(dv[j]%x==0) &#123; ll y=dv[j]/x; while(dv[k]&gt;y) --k; f[k]+=f[j]; &#125; &#125; for(int i=1;i&lt;=len;++i) if(f[i]&gt;=n-k) ans=max(ans,dv[i]);&#125;int main()&#123; mt19937 rnd(time(0)); getprime(); scanf(\"%d%d\",&amp;n,&amp;k); for(int i=1;i&lt;=n;++i) scanf(\"%lld\",a+i); ans=1; for(int i=1;i&lt;=20;++i) work(a[rnd()%n+1]); printf(\"%lld\\n\",ans); return 0;&#125;","tags":[]},{"title":"线段树优化凸壳","date":"2018-10-09T12:10:00.000Z","path":"2018/10/09/线段树优化凸壳/","text":"Lena and Queries题目链接：http://codeforces.com/contest/678/problem/F 三种操作，1.插入一个点$(x,y)$ 2.删除之前第$i$个操作插入的点 3.给一个$q$，询问在已有点中$qx+y$最大是多少 如果没有删除完全可以cdq分治然后在上凸壳上三分。有删除操作的话因为贡献不独立，所以不能cdq分治。 但是可以用上一次线段树优化建图一样的技巧，按时间来看，因为每个点的存在是一段区间，那么就可以用线段树拆成log个区间，然后把点“打”在上面（加进vector），最后对于线段树上每个区间，做凸壳然后询问就行了。每个询问会被问log次，所以时间复杂度粗略算有$O(nlog^2n)$。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define N 300010const ll NINF=1LL&lt;&lt;63;struct Point&#123; ll x,y; Point()&#123;&#125; Point(ll x_,ll y_) &#123; x=x_; y=y_; &#125; Point operator -(const Point &amp;t)const &#123; return Point(x-t.x,y-t.y); &#125; ll operator *(const Point &amp;t)const &#123; return x*t.x+y*t.y; &#125; ll operator ^(const Point &amp;t)const &#123; return x*t.y-t.x*y; &#125; bool operator &lt;(const Point &amp;t)const &#123; return x&lt;t.x||(x==t.x &amp;&amp; y&lt;t.y); &#125;&#125; p[N],res[N];vector&lt;Point&gt; v[N&lt;&lt;2];int opt[N];bool del[N],emp[N];int n,top;ll ans[N];void insert(int o,int l,int r,int ql,int qr,int x)&#123; if(ql&lt;=l &amp;&amp; r&lt;=qr) &#123; v[o].push_back(p[x]); return; &#125; int mid=l+r&gt;&gt;1; if(ql&lt;=mid) insert(o&lt;&lt;1,l,mid,ql,qr,x); if(mid&lt;qr) insert(o&lt;&lt;1|1,mid+1,r,ql,qr,x);&#125;void ask(int o)&#123; int l=1,r=top; while(r-l&gt;=3) &#123; int x=(l*2+r)/3; int y=(l+2*r)/3; if(p[o]*res[x]&lt;p[o]*res[y]) l=x; else r=y; &#125; for(int i=l;i&lt;=r;++i) ans[o]=max(ans[o],p[o]*res[i]);&#125;void solve(int o,int l,int r)&#123; if(l&lt;r) &#123; int mid=l+r&gt;&gt;1; solve(o&lt;&lt;1,l,mid); solve(o&lt;&lt;1|1,mid+1,r); &#125; sort(v[o].begin(),v[o].end()); top=0; //cout&lt;&lt;o&lt;&lt;\" \"&lt;&lt;l&lt;&lt;\" \"&lt;&lt;r&lt;&lt;\" \"&lt;&lt;v[o].size()&lt;&lt;endl; for(int i=0;i&lt;v[o].size();++i) &#123; while(top&gt;1 &amp;&amp; ((res[top]-res[top-1])^(v[o][i]-res[top]))&gt;=0) --top; res[++top]=v[o][i]; &#125; for(int i=l;i&lt;=r;++i) if(opt[i]==3 &amp;&amp; !emp[i]) &#123; //cout&lt;&lt;\"ask\"&lt;&lt;endl; ask(i); //cout&lt;&lt;ans[i]&lt;&lt;endl; &#125;&#125;int main()&#123; scanf(\"%d\",&amp;n); int cnt=0; for(int i=1;i&lt;=n;++i) &#123; scanf(\"%d\",&amp;opt[i]); if(opt[i]==1) &#123; scanf(\"%lld%lld\",&amp;p[i].x,&amp;p[i].y); ++cnt; &#125; else if(opt[i]==2) &#123; int x; scanf(\"%d\",&amp;x); del[x]=true; --cnt; insert(1,1,n,x,i-1,x); &#125; else &#123; scanf(\"%lld\",&amp;p[i].x); p[i].y=1; if(cnt==0) emp[i]=true; &#125; &#125; for(int i=1;i&lt;=n;++i) if(opt[i]==1 &amp;&amp; !del[i]) insert(1,1,n,i,n,i); for(int i=1;i&lt;=n;++i) ans[i]=NINF; solve(1,1,n); for(int i=1;i&lt;=n;++i) if(opt[i]==3) &#123; if(emp[i]) printf(\"EMPTY SET\\n\"); else printf(\"%lld\\n\",ans[i]); &#125; return 0;&#125;/*31 -1 01 -1 13 -2*/","tags":[{"name":"线段树","slug":"线段树","permalink":"http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"}]},{"title":"2018 CCPC网络赛 GuGu Convolution","date":"2018-10-08T07:23:00.000Z","path":"2018/10/08/2018-CCPC网络赛-GuGu-Convolution/","text":"题目链接 http://acm.hdu.edu.cn/showproblem.php?pid=6442 定义序列${a}=(a_0,a_1,a_2,\\dots)$ 它的指数型生成函数为$g_(x)=\\sum_{i=0}^{\\infty}\\frac{a_i}{i!}x^i$ 设$c$是一个常数 定义序列${u_c}=(c^0,c^1,c^2,\\dots)$,${e_c}=(0,c^1,0,c^3,0,c^5,\\dots)$ 定义两个生成函数$g_,g_$的卷积$G(x)=(g_*g_)(x)=\\sum_{n=0}^{\\infty}(\\sum_{i+j=n}\\frac{a_i}{i!}\\frac{b_j}{j!})x^n$(原题面省略了阶乘，可能是写错了?) 现在给三个正整数$n,A,B$,求$G(x)=g_{u_A}*g_{e_{\\sqrt{B}}}$的$x^n$前的系数乘上$n!$后的结果 赛中走了很多弯路，思路大概是这样的 首先用泰勒展开，可以看出 $g_{u_A}=e^{Ax},g_{e_B}=\\frac{1}{2}(e^{\\sqrt{B}x}-e^{-\\sqrt{B}x})$ 所以$G(x)=g_{u_A}*g_{e_{\\sqrt{B}}}=\\frac{1}{2}(e^{(A+\\sqrt{B})x}-e^{(A-\\sqrt{B})x})$ 第n项系数为$\\frac{(A+\\sqrt{B})^n-(A-\\sqrt{B})^n}{2}$ 类似斐波那契数列也可以强行求出线性递推的式子然后矩阵快速幂，就是推得比较难受罢了== 更快的方法 不用泰勒展开，直接用二项式定理类似的凑一下就可以得到第$n$项系数的式子，最后也不用推递推式，答案就是$(A+\\sqrt{B})^n=x+y\\sqrt{B}$中去掉整数项$x$，直接快速幂就做完了。 赛中代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;ll a,b,n,mod;struct matrix&#123; ll mx[2][2]; matrix() &#123; memset(mx,0,sizeof(mx)); &#125; void clear() &#123; memset(mx,0,sizeof(mx)); &#125; void init() &#123; memset(mx,0,sizeof(mx)); mx[0][0]=mx[1][1]=1; &#125; friend matrix operator *(const matrix &amp;a,const matrix &amp;b) &#123; matrix c; for(int i=0;i&lt;2;++i) for(int k=0;k&lt;2;++k) for(int j=0;j&lt;2;++j) c.mx[i][j]=(c.mx[i][j]+a.mx[i][k]*b.mx[k][j])%mod; return c; &#125;&#125;A,ans;int main()&#123; int T; scanf(\"%d\",&amp;T); while(T--) &#123; scanf(\"%I64d%I64d%I64d%I64d\",&amp;a,&amp;b,&amp;n,&amp;mod); ans.init(); A.mx[0][0]=2*a%mod;A.mx[0][1]=1; A.mx[1][0]=(b-a*a%mod+mod)%mod;A.mx[1][1]=0; --n; while(n) &#123; if(n&amp;1) ans=ans*A; A=A*A; n&gt;&gt;=1; &#125; ll pp=0; for(ll i=1;1LL*i*i&lt;=b;++i) if(b%(i*i)==0) pp=i; printf(\"%d %I64d %I64d\\n\",1,ans.mx[0][0]*pp%mod,b/(pp*pp)); &#125;&#125;","tags":[{"name":"生成函数","slug":"生成函数","permalink":"http://yoursite.com/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"}]},{"title":"线段树优化建图","date":"2018-09-30T13:28:00.000Z","path":"2018/09/30/线段树优化建图/","text":"有一类经典的问题，之前见过很多次了，好像某一场区域赛的热身赛里就出过：一维数轴上有$n$个炸弹，$x_i,r_i$分别表示第$i$个炸弹的位置和引爆半径，即如果引爆炸弹$i$，那么位置在$[x_i-r_i,x_i+r_i]$范围内的炸弹都会爆炸，并且引发连锁反应。然后比如询问最少引爆几个炸弹才能全部炸完。 首先一个建图思路是如果$i$能引爆$j$，那么$i$向$j$连一条边，做tarjan求强连通分量就可以知道很多信息了。但是这样暴力连边是$O(n^2)$的，需要优化。一个显然的观察是，一个点$i$的引爆范围是一段区间（这句是废话），所以是和一个区间的点连边，那么我们把炸弹按位置排序后，$1$到$n$编好号，建线段树，线段树每个点向左右儿子分别连边。如果$i$要向区间$(l,r)$所有点连边的话，就在线段树中将区间$(l,r)$分解成$O(logn)$条线段，这样就转化成了向对应的线段树中的一些点连边，总的边数就是$O(nlogn)$。 来看两道具体的题目： bzoj 5017 [Snoi2017]炸弹询问如果把第 $i$ 个炸弹引爆，将引爆多少个炸弹。 线段树优化建图，然后tarjan，答案是从$i$所在的SCC出发，能走到的SCC含有的原炸弹数之和。因为对于每个$i$都要询问，所以这里不能暴力，一个方法是在这个DAG的反图上拓扑序dp一下。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define N 2000010#define M 11000010const ll mod=1e9+7;const ll mod2=mod*mod;struct node&#123; ll x,r;&#125; a[N];ll pos[N];int tot,rt,n;int ls[N],rs[N];int e,head[M],last[M],p[N];int dfn[N],low[N],sta[N],color[N],val[N];int in[N],q[N];bool v[N];int dfstime,num,siz,len;vector&lt;int&gt; redge[N];pair&lt;int,int&gt; pr[M];bool cmp(const node &amp;a,const node &amp;b)&#123; return a.x&lt;b.x;&#125;void add(int x,int y)&#123; head[++e]=y; last[e]=p[x]; p[x]=e;&#125;void build(int &amp;x,int l,int r)&#123; x=(l==r)?l:(++tot); if(l==r) return; int mid=l+r&gt;&gt;1; build(ls[x],l,mid); build(rs[x],mid+1,r); add(x,ls[x]); add(x,rs[x]);&#125;void ins(int x,int l,int r,int L,int R,int y)&#123; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; add(y,x); return; &#125; int mid=l+r&gt;&gt;1; if(L&lt;=mid) ins(ls[x],l,mid,L,R,y); if(mid&lt;R) ins(rs[x],mid+1,r,L,R,y);&#125;void tarjan(int x)&#123; int y; dfn[x]=low[x]=++dfstime; sta[++siz]=x; v[x]=true; for(int j=p[x];j;j=last[j]) if(!dfn[y=head[j]]) &#123; tarjan(y); low[x]=min(low[x],low[y]); &#125; else if(v[y]) low[x]=min(low[x],dfn[y]); if(low[x]==dfn[x]) &#123; ++num; do &#123; y=sta[siz--]; color[y]=num; v[y]=false; &#125;while(y!=x); &#125;&#125;int main()&#123; scanf(\"%d\",&amp;n); for(int i=1;i&lt;=n;++i) &#123; scanf(\"%lld%lld\",&amp;a[i].x,&amp;a[i].r); pos[i]=a[i].x; &#125; tot=n; build(rt,1,n); for(int i=1;i&lt;=n;++i) &#123; int l=lower_bound(pos+1,pos+n+1,a[i].x-a[i].r)-pos; int r=upper_bound(pos+1,pos+n+1,a[i].x+a[i].r)-pos-1; ins(rt,1,n,l,r,i); &#125; for(int i=1;i&lt;=tot;++i) if(!dfn[i]) tarjan(i); for(int i=1;i&lt;=n;++i) val[color[i]]++; for(int x=1;x&lt;=tot;++x) &#123; for(int j=p[x];j;j=last[j]) &#123; int y=head[j]; if(color[x]==color[y]) continue; pr[++len]=make_pair(color[y],color[x]); &#125; &#125; sort(pr+1,pr+len+1); len=unique(pr+1,pr+len+1)-pr-1; for(int i=1;i&lt;=len;++i) &#123; redge[pr[i].first].push_back(pr[i].second); ++in[pr[i].second]; &#125; int l=0,r=0; for(int i=1;i&lt;=num;++i) if(!in[i]) q[r++]=i; while(l!=r) &#123; int x=q[l++]; for(int i=0;i&lt;redge[x].size();++i) &#123; int y=redge[x][i]; val[y]+=val[x]; if((--in[y])==0) q[r++]=y; &#125; &#125; ll ans=0; for(int i=1;i&lt;=n;++i) &#123; ans+=1LL*i*val[color[i]]; if(ans&gt;=mod2) ans-=mod2; &#125; ans%=mod; printf(\"%d\\n\",ans);&#125; Petrozavodsk Winter-2018. Carnegie Mellon U Contest A Mines现在每个炸弹多了一个初始的引爆费用，因为连锁发生的爆炸是免费的。有$q$次修改，每次修改一个炸弹的费用，对于每次修改都要查询当前要引爆所有炸弹的最小花费。 前面的操作都一样，首先一个显然的想法是只要引爆DAG中所有入度为$0$的SCC里的费用最小的炸弹。然后有个致命的问题是，入度为$0$的SCC可能不含有原$1$到$n$号点，所以需要做拓扑排序删掉没用的点，之后对于每次询问用set维护即可。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define NN 200010#define N 800010#define M 16000010#define rep(i,l,r) for(int i=l;i&lt;=r;++i)struct node&#123; int x,r,c,o;&#125; a[NN];int h[NN],pos[NN],ls[N],rs[N];int n,tot,m,rt,dfstime,siz,num;int e,head[M],last[M],p[N];int dfn[N],low[N],sta[N],color[N];int in[N],q[N];bool v[N],ok[N];vector&lt;int&gt; edge[N];multiset&lt;int&gt; st[N];bool cmp(const node &amp;a,const node &amp;b)&#123; return a.x&lt;b.x;&#125;void add(int x,int y)&#123; head[++e]=y; last[e]=p[x]; p[x]=e;&#125;void tarjan(int x)&#123; int y; dfn[x]=low[x]=++dfstime; sta[++siz]=x; v[x]=true; for(int j=p[x];j;j=last[j]) if(!dfn[y=head[j]]) &#123; tarjan(y); low[x]=min(low[x],low[y]); &#125; else if(v[y]) low[x]=min(low[x],dfn[y]); if(low[x]==dfn[x]) &#123; ++num; do &#123; y=sta[siz--]; color[y]=num; v[y]=false; &#125;while(y!=x); &#125;&#125;void build(int &amp;x,int l,int r)&#123; x=(l==r)?l:(++tot); if(l==r) return; int mid=l+r&gt;&gt;1; build(ls[x],l,mid); build(rs[x],mid+1,r); add(x,ls[x]); add(x,rs[x]);&#125;void ins(int x,int l,int r,int L,int R,int y)&#123; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; add(y,x); return; &#125; int mid=l+r&gt;&gt;1; if(L&lt;=mid) ins(ls[x],l,mid,L,R,y); if(mid&lt;R) ins(rs[x],mid+1,r,L,R,y);&#125;int main()&#123; #ifdef SK freopen(\"input.txt\",\"r\",stdin); #endif // SK scanf(\"%d%d\",&amp;n,&amp;m); rep(i,1,n) &#123; scanf(\"%d%d%d\",&amp;a[i].x,&amp;a[i].r,&amp;a[i].c); a[i].o=i; &#125; sort(a+1,a+n+1,cmp); rep(i,1,n) h[i]=a[i].x,pos[a[i].o]=i; tot=n; build(rt,1,n); rep(i,1,n) &#123; int l=lower_bound(h+1,h+n+1,a[i].x-a[i].r)-h; int r=upper_bound(h+1,h+n+1,a[i].x+a[i].r)-h-1; ins(rt,1,n,l,r,i); &#125; rep(i,1,tot) if(!dfn[i]) tarjan(i); rep(i,1,n) ok[color[i]]=true; for(int x=1;x&lt;=tot;++x) &#123; for(int j=p[x];j;j=last[j]) &#123; int y=head[j]; int xx=color[x],yy=color[y]; if(xx==yy) continue; edge[xx].push_back(yy); ++in[yy]; &#125; &#125; int l=0,r=0; rep(i,1,num) if(!in[i] &amp;&amp; !ok[i]) q[r++]=i; while(l!=r) &#123; int x=q[l++]; for(auto &amp;y:edge[x]) &#123; --in[y]; if(!in[y] &amp;&amp; !ok[y]) q[r++]=y; &#125; &#125; rep(i,1,n) if(!in[color[i]]) st[color[i]].insert(a[i].c); ll ans=0; rep(i,1,num) if(ok[i] &amp;&amp; !in[i] &amp;&amp; !st[i].empty()) ans+=*st[i].begin(); while(m--) &#123; int x,y; scanf(\"%d%d\",&amp;x,&amp;y); x=pos[x]; if(!in[color[x]]) &#123; ans-=*st[color[x]].begin(); auto it=st[color[x]].find(a[x].c); st[color[x]].erase(it); a[x].c=y; st[color[x]].insert(a[x].c); ans+=*st[color[x]].begin(); &#125; printf(\"%lld\\n\",ans); &#125; return 0;&#125;","tags":[{"name":"线段树","slug":"线段树","permalink":"http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"}]},{"title":"NOIP 2014","date":"2018-09-28T05:14:00.000Z","path":"2018/09/28/NOIP-2014/","text":"题目链接：https://vijos.org/p/category/2014 D1T1 生活大爆炸版 石头剪刀布没想到noip还会出纯模拟 1234567891011121314151617181920212223#include&lt;bits/stdc++.h&gt;using namespace std;#define N 205#define rep(i,l,r) for(int i=l;i&lt;=r;++i)int n,na,nb;int a[N],b[N];const int w[5][5]=&#123;&#123;0,-1,1,1,-1&#125;,&#123;1,0,-1,1,-1&#125;,&#123;-1,1,0,-1,1&#125;,&#123;-1,-1,1,0,1&#125;,&#123;1,1,-1,-1,0&#125;&#125;;int main()&#123; while(scanf(\"%d%d%d\",&amp;n,&amp;na,&amp;nb)!=EOF) &#123; rep(i,0,na-1) scanf(\"%d\",a+i); rep(i,0,nb-1) scanf(\"%d\",b+i); int ans1=0,ans2=0; rep(i,0,n-1) &#123; int x=a[i%na],y=b[i%nb]; if(w[x][y]&gt;0) ++ans1; else if(w[x][y]&lt;0) ++ans2; &#125; printf(\"%d %d\\n\",ans1,ans2); &#125;&#125; D1T2 联合权值dfs一下就统计出来了 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include&lt;bits/stdc++.h&gt;using namespace std;const int mod=10007;#define N 200010#define rep(i,l,r) for(int i=l;i&lt;=r;++i)int e,head[N&lt;&lt;1],last[N&lt;&lt;1],p[N];int deep[N];int a[N];int sum[N],md[N];int ans1,ans2;int n;void add(int &amp;x,int y)&#123; (x+=y)&gt;=mod &amp;&amp; (x-=mod);&#125;void addedge(int x,int y)&#123; head[++e]=y; last[e]=p[x]; p[x]=e;&#125;void dfs(int x,int pre,int dep)&#123; deep[x]=dep; sum[x]=0; md[x]=0; int now=0,ss=0,mm=0; int max1=0,max2=0; for(int j=p[x];j;j=last[j]) &#123; int y=head[j]; if(y==pre) continue; dfs(y,x,dep+1); add(sum[x],a[y]); add(now,a[y]*a[y]%mod); add(ss,sum[y]); md[x]=max(md[x],a[y]); mm=max(mm,md[y]); if(a[y]&gt;=max1) max2=max1,max1=a[y]; else max2=max(max2,a[y]); &#125; add(ans2,2*ss*a[x]%mod); add(ans2,(sum[x]*sum[x]-now+mod)%mod); ans1=max(ans1,mm*a[x]); ans1=max(ans1,max1*max2);&#125;int main()&#123; while(scanf(\"%d\",&amp;n)!=EOF) &#123; e=0; memset(p,0,sizeof(p)); memset(md,0,sizeof(md)); memset(sum,0,sizeof(sum)); rep(i,1,n-1) &#123; int x,y; scanf(\"%d%d\",&amp;x,&amp;y); addedge(x,y); addedge(y,x); &#125; rep(i,1,n) scanf(\"%d\",a+i); ans1=0,ans2=0; dfs(1,0,1); printf(\"%d %d\\n\",ans1,ans2); &#125;&#125; D1T3 飞扬的小鸟这个dp有、东西，日常不会dp 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;bits/stdc++.h&gt;using namespace std;#define N 10010#define M 1010#define rep(i,l,r) for(int i=l;i&lt;=r;++i)const int INF=0x3f3f3f3f;bool wall[N];vector&lt;int&gt; now,las;int n,m,q;int a[N],b[N];int l[N],r[N];int main()&#123; scanf(\"%d%d%d\",&amp;n,&amp;m,&amp;q); rep(i,0,n-1) &#123; scanf(\"%d%d\",a+i,b+i); l[i]=0; r[i]=m+1; &#125; l[n]=0;r[n]=m+1; rep(i,1,q) &#123; int x; scanf(\"%d\",&amp;x); scanf(\"%d%d\",&amp;l[x],&amp;r[x]); wall[x]=true; &#125; now.resize(m+5); las.resize(m+5); rep(i,1,m) las[i]=0; las[0]=INF; int ans1=INF,ans2=0; rep(i,1,n) &#123; int x=a[i-1]; rep(j,0,m) now[j]=INF; rep(j,x,m) &#123; now[j]=min(now[j],las[j-x]+1); now[j]=min(now[j],now[j-x]+1); &#125; rep(j,m-x,m) &#123; now[m]=min(now[m],las[j]+1); now[m]=min(now[m],now[j]+1); &#125; rep(j,l[i]+1,r[i]-1) if(j+b[i-1]&lt;=m) now[j]=min(now[j],las[j+b[i-1]]); rep(j,0,l[i]) now[j]=INF; rep(j,r[i],m) now[j]=INF; if(wall[i]) rep(j,l[i]+1,r[i]-1) if(now[j]&lt;INF) &#123; ++ans2; break; &#125; swap(now,las); &#125; rep(j,1,m) ans1=min(ans1,las[j]); if(ans1&lt;INF) &#123; puts(\"1\"); printf(\"%d\\n\",ans1); &#125; else &#123; puts(\"0\"); printf(\"%d\\n\",ans2); &#125;&#125; D2T1 无线网络发射器选址记前缀和，然后枚举 123456789101112131415161718192021222324252627282930313233#include&lt;bits/stdc++.h&gt;using namespace std;#define rep(i,l,r) for(int i=l;i&lt;=r;++i)int n,d;int a[130][130];int main()&#123; scanf(\"%d\",&amp;d); scanf(\"%d\",&amp;n); rep(i,1,n) &#123; int x,y,c; scanf(\"%d%d%d\",&amp;x,&amp;y,&amp;c); ++x;++y; a[x][y]+=c; &#125; int ans1=0,ans2=0; rep(i,1,129) rep(j,1,129) a[i][j]+=a[i-1][j]+a[i][j-1]-a[i-1][j-1]; rep(i,1,129) rep(j,1,129) &#123; int x=min(129,i+d); int y=min(129,j+d); int xx=max(0,i-d-1); int yy=max(0,j-d-1); int now=a[x][y]-a[x][yy]-a[xx][y]+a[xx][yy]; if(now&gt;ans2) ans1=1,ans2=now; else if(now==ans2) ++ans1; &#125; printf(\"%d %d\\n\",ans1,ans2);&#125; D2T2 寻找道路先在反图上从终点bfs，求出哪些点能到终点，然后从起点正着按题意bfs就好了 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include&lt;bits/stdc++.h&gt;using namespace std;#define rep(i,l,r) for(int i=l;i&lt;=r;++i)#define N 10010#define M 200010vector&lt;int&gt; edge[N];vector&lt;int&gt; redge[N];queue&lt;int&gt; q;bool vis[N];bool ok[N];int dis[N];int n,m;void pre(int s)&#123; vis[s]=true; q.push(s); while(!q.empty()) &#123; int x=q.front(); q.pop(); for(auto &amp;y:redge[x]) if(!vis[y]) &#123; vis[y]=true; q.push(y); &#125; &#125;&#125;int bfs(int st,int ed)&#123; if(!ok[st]) return -1; memset(dis,-1,sizeof(dis)); dis[st]=0; q.push(st); while(!q.empty()) &#123; int x=q.front(); q.pop(); for(auto &amp;y:edge[x]) if(ok[y] &amp;&amp; dis[y]==-1) &#123; dis[y]=dis[x]+1; q.push(y); &#125; &#125; return dis[ed];&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); rep(i,1,m) &#123; int x,y; scanf(\"%d%d\",&amp;x,&amp;y); redge[y].push_back(x); edge[x].push_back(y); &#125; int st,ed; scanf(\"%d%d\",&amp;st,&amp;ed); pre(ed); memset(ok,true,sizeof(ok)); rep(y,1,n) if(!vis[y]) for(auto &amp;x:redge[y]) ok[x]=false; printf(\"%d\\n\",bfs(st,ed));&#125; D2T3 解方程直接解肯定没办法，只能枚举答案，然后随机素数取模验证。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define rep(i,l,r) for(int i=l;i&lt;=r;++i)#define N 1000010char s[105][10010];int val[105][205];int f[20000][10];bool ok[N];const int prime[]=&#123;19997,19961,19759,18013,17011,15359&#125;;const int tot=6;int n,m;int calc(char *s,int mod)&#123; int now=0; for(int i=(s[0]=='-')?1:0;s[i];++i) now=(1LL*now*10+s[i]-'0')%mod; if(s[0]=='-') now=(mod-now)%mod; return now;&#125;int check(int x,int y,int mod)&#123; int now=1,ans=0; rep(i,0,n) &#123; ans+=1LL*val[i][y]*now%mod; if(ans&gt;=mod) ans-=mod; now=1LL*now*x%mod; &#125; return ans;&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); rep(i,0,n) &#123; scanf(\"%s\",s[i]); rep(j,0,tot-1) val[i][j]=calc(s[i],prime[j]); &#125; rep(i,1,m) ok[i]=true; int ans=0; rep(i,0,m) if(ok[i]) &#123; for(int j=0;j&lt;tot;++j) &#123; if(i&lt;prime[j]) f[i][j]=check(i,j,prime[j]); if(f[i%prime[j]][j]) ok[i]=false; &#125; if(i&gt;0 &amp;&amp; ok[i]) ++ans; &#125; printf(\"%d\\n\",ans); rep(i,1,m) if(ok[i]) printf(\"%d\\n\",i);&#125;","tags":[{"name":"noip","slug":"noip","permalink":"http://yoursite.com/tags/noip/"}]},{"title":"NOIP 2013","date":"2018-09-26T15:59:00.000Z","path":"2018/09/26/NOIP-2013/","text":"最近突然想回顾一下历年noip题目，就开个新坑吧，题解就从略了 题目链接 https://vijos.org/p/category/2013 D1T1 转圈游戏公式就$(x+m10^k)%n$，现在一眼的事情当时想了很久orz 12345678910111213141516171819202122#include&lt;bits/stdc++.h&gt;using namespace std;int power(int x,int n,int mod)&#123; int ans=1; while(n) &#123; if(n&amp;1) ans=1LL*ans*x%mod; x=1LL*x*x%mod; n&gt;&gt;=1; &#125; return ans;&#125;int main()&#123; int n,m,k,x; while(scanf(\"%d%d%d%d\",&amp;n,&amp;m,&amp;k,&amp;x)!=EOF) &#123; int ans=(x+1LL*m*power(10,k,n))%n; printf(\"%d\\n\",ans); &#125;&#125; D1T2 火柴排队首先肯定是小对小，大对大，才能使那个式子最小，这一点可以交换一下然后做差说明。并且题目保证了高度互不相同，也就是给了两个排列，问最少交换相邻元素多少次，才能使两个排列一样，再转化一步，假设第一个排列就是1,2,3,…n，问第二个排列最少交换相邻元素几次才能变成1,2,3,…n，这就是逆序对的定义了。 不知道如果不保证高度互不相同该怎么做orz 当时这个题爆零了，一点也不会QAQ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include&lt;bits/stdc++.h&gt;using namespace std;const int mod=99999997;#define N 100010#define rep(i,l,r) for(int i=l;i&lt;=r;++i)int a[N],b[N],h[N];int c[N];int n;int lowbit(int x)&#123; return x&amp;(-x);&#125;int ask(int x)&#123; int ans=0; for(;x&lt;=n;x+=lowbit(x)) ans+=c[x]; return ans;&#125;void change(int x,int y)&#123; for(;x;x-=lowbit(x)) c[x]+=y;&#125;int main()&#123; while(scanf(\"%d\",&amp;n)!=EOF) &#123; rep(i,1,n) scanf(\"%d\",a+i),h[i]=a[i]; sort(h+1,h+n+1); rep(i,1,n) a[i]=lower_bound(h+1,h+n+1,a[i])-h; rep(i,1,n) scanf(\"%d\",b+i),h[i]=b[i]; sort(h+1,h+n+1); rep(i,1,n) b[i]=lower_bound(h+1,h+n+1,b[i])-h; rep(i,1,n) h[a[i]]=i; rep(i,1,n) b[i]=h[b[i]],c[i]=0; int ans=0; rep(i,1,n) &#123; change(b[i],1); ans+=ask(b[i]+1); if(ans&gt;=mod) ans-=mod; &#125; printf(\"%d\\n\",ans); &#125;&#125; D1T3 货车运输这个不难看出是最大生成树上倍增求路径边权最小值。要注意的是可能是一个森林，当时蠢的用tarjan判连通性了，强行增加码量。还好在赛前刚给别人讲过倍增，这题满分了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115#include&lt;bits/stdc++.h&gt;using namespace std;#define rep(i,l,r) for(int i=l;i&lt;=r;++i)#define dow(i,l,r) for(int i=l;i&gt;=r;--i)#define N 10010#define M 50010const int INF=0x3f3f3f3f;struct edge&#123; int x,y,c;&#125; t[M];int n,m,q;int fa[N];bool root[N];bool cmp(const edge &amp;a,const edge &amp;b)&#123; return a.c&gt;b.c;&#125;int getfa(int x)&#123; return x==fa[x]?x:fa[x]=getfa(fa[x]);&#125;bool Union(int x,int y)&#123; x=getfa(x); y=getfa(y); if(x==y) return false; fa[x]=y; return true;&#125;namespace TREE&#123;int e,head[M&lt;&lt;1],last[M&lt;&lt;1],w[M&lt;&lt;1],p[N];int f[N][21],g[N][21];int deep[N];void add(int x,int y,int c)&#123; head[++e]=y;w[e]=c; last[e]=p[x]; p[x]=e;&#125;void dfs(int x,int pre,int dep)&#123; deep[x]=dep; for(int j=p[x];j;j=last[j]) &#123; int y=head[j]; if(y==pre) continue; f[y][0]=x; g[y][0]=w[j]; rep(i,1,20) &#123; f[y][i]=f[f[y][i-1]][i-1]; g[y][i]=min(g[y][i-1],g[f[y][i-1]][i-1]); &#125; dfs(y,x,dep+1); &#125;&#125;int askmax(int x,int y)&#123; if(deep[x]&gt;deep[y]) swap(x,y); int ans=INF; dow(i,20,0) if(deep[f[y][i]]&gt;=deep[x]) ans=min(ans,g[y][i]),y=f[y][i]; if(x==y) return ans; dow(i,20,0) if(f[x][i]!=f[y][i]) &#123; ans=min(&#123;ans,g[x][i],g[y][i]&#125;); x=f[x][i],y=f[y][i]; &#125; ans=min(&#123;ans,g[x][0],g[y][0]&#125;); return ans;&#125;&#125;//TREEint main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); rep(i,1,m) &#123; int x,y,c; scanf(\"%d%d%d\",&amp;x,&amp;y,&amp;c); t[i]=edge&#123;x,y,c&#125;; &#125; sort(t+1,t+m+1,cmp); rep(i,1,n) fa[i]=i; rep(i,1,m) &#123; int x=t[i].x; int y=t[i].y; int c=t[i].c; if(Union(x,y)) &#123; TREE::add(x,y,c); TREE::add(y,x,c); &#125; &#125; rep(i,1,n) root[getfa(i)]=true; memset(TREE::g,INF,sizeof(TREE::g)); rep(i,1,n) if(root[i]) TREE::dfs(i,0,1); scanf(\"%d\",&amp;q); while(q--) &#123; int x,y; scanf(\"%d%d\",&amp;x,&amp;y); if(getfa(x)!=getfa(y)) puts(\"-1\"); else printf(\"%d\\n\",TREE::askmax(x,y)); &#125;&#125; D2T1 积木大赛可能太简单，这题没什么印象了 1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std;#define rep(i,l,r) for(int i=l;i&lt;=r;++i)#define N 100010int n;int h[N];int main()&#123; scanf(\"%d\",&amp;n); int ans=0; rep(i,1,n) &#123; scanf(\"%d\",h+i); ans+=max(0,h[i]-h[i-1]); &#125; printf(\"%d\\n\",ans);&#125; D2T2 花匠当时从最长上升子序列的思路出发，然后推了推，写了个单调队列，具体怎么写的忘了，不过也是AC。实际上最简单的做法只需要扫一遍，求出拐点的个数，加2就是答案了。 12345678910111213141516171819202122232425262728#include&lt;bits/stdc++.h&gt;using namespace std;#define rep(i,l,r) for(int i=l;i&lt;=r;++i)#define N 100010int n;int a[N];int main()&#123; scanf(\"%d\",&amp;n); int ans=0; int now=0; rep(i,1,n) &#123; scanf(\"%d\",a+i); if(i==1||a[i-1]==a[i]) continue; if(a[i-1]&lt;a[i]) &#123; if(now==-1) ++ans; now=1; &#125; if(a[i-1]&gt;a[i]) &#123; if(now==1) ++ans; now=-1; &#125; &#125; printf(\"%d\\n\",ans+2);&#125; D2T3 华容道这题xjb搜，就得了5分… 正确做法是bfs预处理，拆点，建图跑最短路。 具体来说：可以观察到只有空白块位于指定块的四方向上，指定块才可以移动。本质上还有另外一种移动方式，就是指定块不动，空白块从它的上/下左/右中的一个移动到另一个。那么这样就可以bfs预处理了，状态也有了，(x,y,k)表示指定块在(x,y)，空白块在相邻的k方向上。spfa求最短路即可。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152#include&lt;bits/stdc++.h&gt;using namespace std;#define rep(i,l,r) for(int i=l;i&lt;=r;++i)const int INF=0x3f3f3f3f;const int dx[]= &#123;0,0,1,-1&#125;;const int dy[]= &#123;1,-1,0,0&#125;;const int N=31*31*4;const int M=4*N;struct node&#123; int x,y;&#125; q[32*32*4];int n,m,k;int dis[32][32];int can[32][32];int e,head[M],last[M],w[M],p[N];bool vis[N];int dist[N];bool ok(int x,int y)&#123; return x&gt;=0 &amp;&amp; x&lt;n &amp;&amp; y&gt;=0 &amp;&amp; y&lt;m &amp;&amp; can[x][y];&#125;void bfs(int sx,int sy)&#123; memset(dis,INF,sizeof(dis)); dis[sx][sy]=0; int l=0,r=0; q[r++]=node&#123;sx,sy&#125;; while(l!=r) &#123; int x=q[l].x; int y=q[l].y; l++; rep(i,0,3) &#123; int xx=x+dx[i]; int yy=y+dy[i]; if(ok(xx,yy) &amp;&amp; dis[xx][yy]==INF) &#123; dis[xx][yy]=dis[x][y]+1; q[r++]=node&#123;xx,yy&#125;; &#125; &#125; &#125;&#125;int calc(int x,int y,int k)&#123; return x*m*4+y*4+k;&#125;void add(int x,int y,int c)&#123; head[++e]=y; w[e]=c; last[e]=p[x]; p[x]=e;&#125;void init()&#123; rep(i,0,n-1) rep(j,0,m-1) if(ok(i,j)) &#123; rep(k,0,3) &#123; int x=i+dx[k]; int y=j+dy[k]; if(!ok(x,y)) continue; can[i][j]=0; bfs(x,y); can[i][j]=1; rep(h,0,3) if(h!=k) &#123; int xx=i+dx[h]; int yy=j+dy[h]; if(ok(xx,yy) &amp;&amp; dis[xx][yy]!=INF) add(calc(i,j,k),calc(i,j,h),dis[xx][yy]); &#125; add(calc(i,j,k),calc(x,y,k^1),1); &#125; &#125;&#125;void spfa(int sx,int sy)&#123; queue&lt;int&gt; q; memset(vis,0,sizeof(vis)); memset(dist,INF,sizeof(dist)); rep(i,0,3) if(ok(sx+dx[i],sy+dy[i]) &amp;&amp; dis[sx+dx[i]][sy+dy[i]]!=INF) &#123; int now=calc(sx,sy,i); dist[now]=dis[sx+dx[i]][sy+dy[i]]; vis[now]=true; q.push(now); &#125; while(!q.empty()) &#123; int x=q.front(); q.pop(); vis[x]=false; for(int j=p[x]; j; j=last[j]) &#123; int y=head[j]; if(dist[y]&gt;dist[x]+w[j]) &#123; dist[y]=dist[x]+w[j]; if(!vis[y]) &#123; vis[y]=true; q.push(y); &#125; &#125; &#125; &#125;&#125;int work(int x,int y,int sx,int sy,int tx,int ty)&#123; if(sx==tx &amp;&amp; sy==ty) return 0; can[sx][sy]=0; bfs(x,y); can[sx][sy]=1; spfa(sx,sy); int ans=INF; rep(i,0,3) ans=min(ans,dist[calc(tx,ty,i)]); if(ans==INF) ans=-1; return ans;&#125;int main()&#123; scanf(\"%d%d%d\",&amp;n,&amp;m,&amp;k); rep(i,0,n-1) rep(j,0,m-1) scanf(\"%d\",&amp;can[i][j]); init(); while(k--) &#123; int x,y,sx,sy,tx,ty; scanf(\"%d%d%d%d%d%d\",&amp;x,&amp;y,&amp;sx,&amp;sy,&amp;tx,&amp;ty); --x;--y;--sx;--sy;--tx;--ty; printf(\"%d\\n\",work(x,y,sx,sy,tx,ty)); &#125;&#125;/*3 4 20 1 1 10 1 1 00 1 0 03 2 1 2 2 21 2 2 2 3 2*/","tags":[{"name":"noip","slug":"noip","permalink":"http://yoursite.com/tags/noip/"}]},{"title":"Dominator Tree","date":"2018-09-14T04:28:00.000Z","path":"2018/09/14/Dominator-Tree/","text":"问题引入题目要求解决的模型： 给定有向图G（可能有环）和图中的一个点r，对于G中的任意一个点x，求从r到x的路径上（可能有很多条）必须经过的点集。 Flow Graph：若有向图G中存在一点r，从r出发可到达G中所有的点，则称G是Flow Graph，记为(G,r)。 必经点（dom）：若在(G,r)中从r到y的路径一定经过点x，则称x是从r到达y的必经点，记为x dom y。 从r出发到达y的所有必经点构成的集合记为dom(y)，即dom(y)={x | x dom y}。 最近必经点（idom）： 节点y的必经点集合dom(y)中dfn值最大的点x是距离y最近的必经点，称为y的最近必经点。最近必经点是唯一的，因此可以记x=idom(y)。 于是可以按下面$O(V^2)$暴力求解 $pre(y)={x|(x,y)\\in E}$ y的前驱节点集合 $suc(x)={y|(x,y)\\in E}$ x的后继节点集合 $dom(r)={r}$ $dom(y)=\\cap _{x\\in pre(y)} dom(x) \\cup {y}$ $idom(x)=id[Max{dfn[y]|y\\in dom(x)}]$ Dominator Tree设有向图$G=(V,E)$，$(G,r)$是一个Flow Graph，则称$(G,r)$的子图$D=(V, { (idom(i),i) | i\\in V , i\\neq r }, r)$为$(G,r)$的一棵Dominator Tree。 $(G,r)$的Dominator Tree是一棵有向有根树，从$r$出发可以到达G中的所有点，并且树上的每条边$(u,v)$都满足：$u=idom(v)$，即父节点是子节点的最近必经点。 $x=idom(y)$，当且仅当有向边$(x,y)$是Dominator Tree中的一条树枝边。 $x dom y$，当且仅当在Dominator Tree中存在一条从$x$到$y$的路径。 $x$的必经点集合$dom(x)$是Dominator Tree上$x$的所有祖先以及$x$自身。 半必经点半必经点（semi） 在搜索树T上点$y$的祖先中，经过时间戳比$y$大的节点可以到达$y$的深度最小的祖先$x$，称为$y$的半必经点。关于半必经点有如下性质： 半必经点也是唯一的，因此可以记$x=semi(y)$。 一个点的半必经点必定是它在dfs树上的祖先，$dfn[semi[x]]&lt;dfn[x]$。 半必经点不一定是x的必经点。 &nbsp&nbsp&nbsp 如何求半必经点：对于G中一点y，考虑所有$x\\in pre(y)$，设$temp=INF$。 若$dfn[x]&lt;dfn[y]$，则$(x,y)$为树枝边或前向边，此时$temp=min(temp,dfn[x])$ 若$dfn[x]&gt;dfn[y]$，则$(x,y)$为横叉边或后向边，此时任意$x$在$T$中的祖先$z$，满足$dfn[z]&gt;dfn[y]$时，$temp=min(temp,dfn[semi[z]])$ $semi[y]=id[temp]$ 必经点对于G中的一点$x$，考虑搜索树T中$semi(x)$到$x$的路径上除端点之外的点构成的集合path 设$y=id[min{dfn[semi(z)]|z\\in path}]$，即path中半必经节点的时间戳最小的节点。 $semi(x)=semi(y)$时，$idom(x)=semi(x)$ $semi(x)\\neq semi(y)$时，$idom(x)=idom(y)$ 题目1.hdu 4694 Important Sisters给一个有向图，输出每个点的必经点集合里的点的编号和，源点是n 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#include&lt;bits/stdc++.h&gt;using namespace std;#define N 500010vector&lt;int&gt; edge[N],redge[N],edom[N];int mn[N],dfn[N],idom[N],sdom[N],id[N],fa[N],f[N];int cnt;int find(int x)&#123; if(f[x]==x)return x; int y=find(f[x]); if(sdom[mn[x]]&gt;sdom[mn[f[x]]])mn[x]=mn[f[x]]; return f[x]=y;&#125;void dfs(int u)&#123; id[dfn[u]=++cnt]=u; for(auto &amp;v:edge[u]) if(!dfn[v])dfs(v),fa[dfn[v]]=dfn[u];&#125;int n,m;inline void tarjan(int s)&#123; for(int i=1; i&lt;=n; i++)f[i]=sdom[i]=mn[i]=fa[i]=i,dfn[i]=0; cnt=0; dfs(s); int k,x; for(int i=cnt; i&gt;1; i--) &#123; for(auto &amp;v:redge[id[i]]) if(dfn[v]) find(k=dfn[v]),sdom[i]= sdom[i]&lt;sdom[mn[k]]?sdom[i]:sdom[mn[k]]; edom[sdom[i]].push_back(i); f[i]=x=fa[i]; for(auto &amp;v:edom[x]) find(k=v),idom[k] = sdom[mn[k]] &lt; x?mn[k]:x; edom[x].clear(); &#125; for(int i=2; i&lt;=cnt; i++) &#123; if(idom[i]!=sdom[i])idom[i]=idom[idom[i]]; edom[id[idom[i]]].push_back(id[i]); //if(idom[i]==i)puts(\"WA\"); &#125;&#125;int Ans[N];void Mp(int u,int p)&#123; Ans[u]=p; for(auto &amp;v:edom[u]) Mp(v,p+v);&#125;void out(int x)&#123; if(!x) &#123; putchar('0'); return ; &#125; if(x&gt;9)out(x/10); putchar('0'+x%10);&#125;int main()&#123; while(scanf(\"%d%d\",&amp;n,&amp;m)!=EOF) &#123; cnt=0; for(int i=1;i&lt;=n;++i) edge[i].clear(),redge[i].clear(),edom[i].clear(); for(int i=1; i&lt;=m; i++) &#123; int x,y; scanf(\"%d%d\",&amp;x,&amp;y); edge[x].push_back(y); redge[y].push_back(x); &#125; tarjan(n); Mp(n,n); for(int i=1; i&lt;=n; i++) out(Ans[i]),putchar(i==n?'\\n':' '),Ans[i]=0; &#125; return 0;&#125; 2.2017-2018 Petrozavodsk Winter Training Camp, Saratov SU Contest L无向图，边有边权，起点为1号点，询问如果增大输入中第i条边的边权，最短路会受到影响的点有多少个。 做法很自然，在最短路构成的DAG上求支配树，询问的就是支配树子树大小了。这里把边新建点，方便处理。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179#include&lt;bits/stdc++.h&gt;using namespace std;#define N 400010typedef long long ll;int n,m,e;int p[N],head[N],last[N],w[N];bool vis[N];ll dis[N];int id[N],ans[N],num[N];void add(int x,int y,int c)&#123; head[e]=y;w[e]=c; last[e]=p[x]; p[x]=e++;&#125;struct node&#123; int x; ll dis; node()&#123;&#125; node(int x_,ll dis_) &#123; x=x_; dis=dis_; &#125; bool operator &lt;(const node &amp;t)const &#123; return dis&gt;t.dis; &#125;&#125;;priority_queue&lt;node&gt; q;void dijkstra()&#123; for(int i=0;i&lt;n;++i) &#123; dis[i]=1LL&lt;&lt;60; vis[i]=0; &#125; dis[0]=0; q.push(node(0,0)); while(!q.empty()) &#123; int x=q.top().x; q.pop(); if(vis[x]) continue; vis[x]=true; for(int j=p[x];j!=-1;j=last[j]) &#123; int y=head[j]; if(dis[y]&gt;dis[x]+w[j]) &#123; dis[y]=dis[x]+w[j]; q.push(node(y,dis[y])); &#125; &#125; &#125;&#125;int fa[N],nodeName[N],nodeID[N];int ncnt=0;vector&lt;int&gt; edge[N],redge[N];void dfs(int x)&#123; vis[x]=true; nodeID[x]=ncnt; nodeName[ncnt++]=x; for(auto &amp;y:edge[x]) if(!vis[y]) &#123; fa[y]=x; dfs(y); &#125;&#125;int semi[N],idom[N],ufs[N];int mnsemi[N];vector&lt;int&gt; bucket[N];int ufs_union(int x,int y)&#123; ufs[x]=y;&#125;void ufs_internal_find(int x)&#123; if(ufs[ufs[x]]==ufs[x]) return; ufs_internal_find(ufs[x]); if(semi[mnsemi[ufs[x]]]&lt;semi[mnsemi[x]]) mnsemi[x]=mnsemi[ufs[x]]; ufs[x]=ufs[ufs[x]];&#125;int ufs_find(int x)&#123; if(ufs[x]==x) return x; ufs_internal_find(x); return mnsemi[x];&#125;void calc_dominator_tree(int n)&#123; for(int i=0;i&lt;n;++i) semi[i]=mnsemi[i]=ufs[i]=i; for(int x=n-1;x&gt;0;x--) &#123; int tfa=nodeID[fa[nodeName[x]]]; for(auto &amp;y:redge[nodeName[x]]) if(vis[y]) &#123; int fy=ufs_find(nodeID[y]); if(semi[fy]&lt;semi[x]) semi[x]=semi[fy]; &#125; bucket[semi[x]].push_back(x); ufs_union(x,tfa); for(auto &amp;y:bucket[tfa]) &#123; int fy=ufs_find(y); idom[nodeName[y]]=nodeName[semi[fy]&lt;semi[y]?fy:tfa]; &#125; bucket[tfa].clear(); &#125; for(int x=1;x&lt;n;++x) if(idom[nodeName[x]]!=nodeName[semi[x]]) idom[nodeName[x]]=idom[idom[nodeName[x]]]; idom[nodeName[0]]=-1;&#125;void dfs(int x,int pre)&#123; num[x]=(x&lt;n); for(auto &amp;y:edge[x]) if(y!=pre) &#123; dfs(y,x); num[x]+=num[y]; &#125;&#125;int main()&#123; memset(p,-1,sizeof(p)); scanf(\"%d%d\",&amp;n,&amp;m); for(int i=0;i&lt;m;++i) &#123; int x,y,c; scanf(\"%d%d%d\",&amp;x,&amp;y,&amp;c); --x;--y; add(x,y,c); add(y,x,c); &#125; dijkstra(); int tot=n; for(int j=0;j&lt;e;++j) &#123; if(dis[head[j]]==dis[head[j^1]]+w[j]) &#123; id[tot]=j/2; edge[head[j^1]].push_back(tot); edge[tot].push_back(head[j]); redge[head[j]].push_back(tot); redge[tot].push_back(head[j^1]); ++tot; //cout&lt;&lt;head[j^1]&lt;&lt;\" \"&lt;&lt;head[j]&lt;&lt;endl; &#125; &#125; memset(fa,-1,sizeof(fa)); memset(idom,-1,sizeof(idom)); memset(vis,0,sizeof(vis)); ncnt=0; dfs(0); calc_dominator_tree(ncnt); for(int i=0;i&lt;tot;++i) edge[i].clear(); for(int i=1;i&lt;tot;++i) edge[idom[i]].push_back(i); dfs(0,-1); for(int i=n;i&lt;tot;++i) ans[id[i]]=num[i]; for(int i=0;i&lt;m;++i) printf(\"%d\\n\",ans[i]); return 0;&#125;","tags":[{"name":"图论","slug":"图论","permalink":"http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"}]},{"title":"Knapsack and Queries","date":"2018-09-12T02:40:00.000Z","path":"2018/09/12/Knapsack-and-Queries/","text":"来自Petrozavodsk Winter-2018. AtCoder Contest里的D题 题意是说，有$Q$次操作，分为两种，一是添加一个重量为$w$，价值为$v$的物品，保证插入的$w$单增，二是删除当前重量最小的物品。每次操作完之后，都有一个询问，询问能否从已有物品中选出一个子集，使得重量之和在模$M$之后在区间$[l,r]$内，并且价值和最大。 数据范围，$Q\\le 100000,2\\le M\\le 500$。 $Q$和$M$一开始给定，之后每次操作强制在线。 做法：首先背包比较容易看出，但是有动态的插入、删除，这里的动态实际上是队列的模型，队尾入队，队首出队。我们将所有物品分成两部分，右半部分直接组成一个背包，左半部分记录从分界线开始的所有后缀组成的背包状态。那么插入就直接背进右边，删除直接删除左边第一个物品，不影响其他后缀，当左边为空时，就将右边所有物品移到左边，即将分界线移到最右侧，然后对每个后缀求背包。查询时，只需合并一次两边的背包，可以用单调队列优化。 这样每个物品最多只会用来做两次背包，做背包和合并两个背包的时间复杂度都是$O(M)$，所以总的时间复杂度为$O(QM)$。因为要记录左侧每个后缀，所以空间复杂度最多也是$O(QM)$。 代码仿照标程用了一些C++11的东西，比如template+using，swap两个vector，比较实用。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160#include &lt;bits/stdc++.h&gt;using namespace std;class Crypto &#123;public: Crypto() &#123; sm = cnt = 0; seed(); &#125; int decode(int z) &#123; z ^= next(); z ^= (next() &lt;&lt; 8); z ^= (next() &lt;&lt; 16); z ^= (next() &lt;&lt; 22); return z; &#125; void query(long long z) &#123; const long long B = 425481007; const long long MD = 1000000007; cnt++; sm = ((sm * B % MD + z) % MD + MD) % MD; seed(); &#125;private: long long sm; int cnt; uint8_t data[256]; int I, J; void swap_data(int i, int j) &#123; uint8_t tmp = data[i]; data[i] = data[j]; data[j] = tmp; &#125; void seed() &#123; uint8_t key[8]; for (int i = 0; i &lt; 4; i++) &#123; key[i] = (sm &gt;&gt; (i * 8)); &#125; for (int i = 0; i &lt; 4; i++) &#123; key[i+4] = (cnt &gt;&gt; (i * 8)); &#125; for (int i = 0; i &lt; 256; i++) &#123; data[i] = i; &#125; I = J = 0; int j = 0; for (int i = 0; i &lt; 256; i++) &#123; j = (j + data[i] + key[i%8]) % 256; swap_data(i, j); &#125; &#125; uint8_t next() &#123; I = (I+1) % 256; J = (J + data[I]) % 256; swap_data(I, J); return data[(data[I] + data[J]) % 256]; &#125;&#125; c;using Pair=pair&lt;int,int&gt;;using LL=long long;template&lt;class T&gt; using V = vector&lt;T&gt;;const LL INF=(LL)1e18;int mod,Q;V&lt;Pair&gt; rq;V&lt;LL&gt; now,las;V&lt;V&lt;LL&gt;&gt; lq;void init()&#123; now.resize(mod,0); las.resize(mod,0); lq.push_back(V&lt;LL&gt;(mod,0)); for(int i=1;i&lt;mod;++i) lq[0][i]=now[i]=las[i]=-INF;&#125;int add(int x)&#123; return (x&gt;=mod)?x-mod:x;&#125;void packinit(V&lt;LL&gt; &amp;a)&#123; a[0]=0; for(int i=1;i&lt;mod;++i) a[i]=-INF;&#125;void pack(V&lt;LL&gt; &amp;a,const V&lt;LL&gt; &amp;b,int w,int v)&#123; for(int i=0;i&lt;mod;++i) a[i]=b[i]; for(int i=0;i&lt;mod;++i) a[add(i+w)]=max(a[add(i+w)],b[i]+v);&#125;void push(int w,int v)&#123; rq.push_back(Pair(w,v)); pack(las,now,w,v); swap(now,las);&#125;void realloc()&#123; packinit(now); while(!rq.empty()) &#123; lq.push_back(V&lt;LL&gt;(mod)); pack(lq.back(),lq[lq.size()-2],rq.back().first,rq.back().second); rq.pop_back(); &#125;&#125;void pop()&#123; if(lq.size()==1) realloc(); lq.pop_back();&#125;LL ask(const V&lt;LL&gt; &amp;a,const V&lt;LL&gt; &amp;pb,int l,int r)&#123; static int que[1005]; static LL b[1005]; int head=0,tail=0,len=r-l+1; for(int i=0;i&lt;mod;++i) b[i]=b[i+mod]=pb[i]; LL ans=-INF; for(int i=mod-1,j=l;i&gt;=0;--i) &#123; while(head&lt;tail &amp;&amp; que[head]&lt;l-i+mod) ++head; while(j&lt;r-i+mod) &#123; ++j; while(head&lt;tail &amp;&amp; b[que[tail-1]]&lt;=b[j]) --tail; que[tail++]=j; &#125; ans=max(ans,a[i]+b[que[head]]); &#125; if(ans&lt;0) ans=-1; return ans;&#125;int main()&#123; scanf(\"%d%d\",&amp;mod,&amp;Q); init(); while(Q--) &#123; int t,w,v,l,r; scanf(\"%d%d%d%d%d\",&amp;t,&amp;w,&amp;v,&amp;l,&amp;r); t=c.decode(t); w=c.decode(w); v=c.decode(v); l=c.decode(l); r=c.decode(r); if(t==1) push(w%mod,v); else pop(); LL ans=ask(lq.back(),now,l,r); c.query(ans); printf(\"%lld\\n\",ans); &#125; return 0;&#125;","tags":[{"name":"背包","slug":"背包","permalink":"http://yoursite.com/tags/%E8%83%8C%E5%8C%85/"},{"name":"单调队列","slug":"单调队列","permalink":"http://yoursite.com/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"}]},{"title":"超实用！Stern-Brocot tree总结奉上","date":"2018-09-11T13:07:00.000Z","path":"2018/09/11/超实用！Stern-Brocot-tree总结奉上/","text":"关于Stern-Brocot tree网上的资料较少（后记：实际上并不少，只是竞赛中讨论的不多），能够找到的资源有Wikipedia以及《具体数学》上的介绍，这里大概总结一下这个树形结构的性质。 Stern-Brocot tree: Stern-Brocot tree构成了一个无限的二叉排序树，可以将所有的正有理数从小到大列举出来。 构造方法可以理解为：先在左边写上$\\frac{0}{1}$，右边写上$\\frac{1}{0}$，代表零和正无穷，然后分子、分母分别相加，得到$\\frac{1}{1}$，写在中间，之后每次把当前层复制到下一层，然后对于下一层相邻两个有理数之间还是分子分母分别相加，得到新的有理数，写在两者中间，重复这个操作就可以无限的写下去，进而得到所有的有理数。树形结构的获得见上图。 记树中的一个节点$\\frac{y}{x}$，它是由$\\frac{L_m}{L_n},\\frac{R_m}{R_n}$这两个数产生的，那么可以发现： 1.$\\frac{L_m}{L_n}$是位于左上方且离它最近的祖先，$\\frac{R_m}{R_n}$是位于右上方且离它最近的祖先。 2.$gcd(x,y)=1$。 3.$R_mL_n-L_mR_n=1$。 4.以$\\frac{y}{x}$为根的子树中的所有数都落在区间$(\\frac{L_m}{L_n},\\frac{R_m}{R_n})$中 找一个数$\\frac{b}{a}$在树中的位置可以通过在树上二分，但如果一步一步走的话，时间复杂度关于a,b是线性的，比如找$\\frac{1}{10^9}$，需要从根一直往左走$10^9-1$步。但是*可以证明，在树上“拐弯”的次数是$O(log)$的 *，可以与辗转相除法联系起来，详见这个视频。这样每次直走的步数我们可以列不等式$O(1)$求出，拐弯的过程递归下去就好了。也可以用具体数学书上的结论。 题目列表：1.Alice, Bob, Oranges and Apples题意：懒得叙述了，总之把在Stern-Brocot tree上走的过程抽象了一下，简化的题意就是给一个分数，输出从根到该点的路径。 123456789101112131415161718192021222324#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;int main()&#123; ll x,y; while(scanf(\"%lld%lld\",&amp;x,&amp;y)!=EOF)&#123; if(__gcd(x,y)&gt;1)&#123; puts(\"Impossible\"); continue; &#125; while(x!=y)&#123; if(x&lt;y) &#123; ll t=(y-1)/x; y-=t*x; printf(\"%lldB\",t); &#125; else &#123; ll t=(x-1)/y; x-=t*y; printf(\"%lldA\",t); &#125; &#125; puts(\"\"); &#125;&#125; 2. 2017 CCPC 哈尔滨 Cow`s Segment题意：给两个高精度浮点数$a,b$，求最小的正整数$x$使得区间$[ax,bx)$包含整数（注，原题面有误，真实的数据是左闭右开的）。 思路：设$ax\\le y&lt;bx$，即$a\\le \\frac{y}{x}&lt;b$，就按上面说的，在Stern-Brocot tree上二分，直到找到第一个符合条件的点，同时就是x的最小值。 (Java写起来太长了 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576import java.io.*;import java.util.*;import java.math.*;public class Main&#123; final static BigInteger one=BigInteger.ONE; final static BigInteger zero=BigInteger.ZERO; final static BigInteger base=BigInteger.valueOf(10); final static int LEN=300; static BigInteger ans; public static BigInteger trans(String s)&#123; int len=s.length(); int num=LEN,flag=0; BigInteger ans=BigInteger.valueOf(0); for(int i=0;i&lt;len;++i) &#123; if(s.charAt(i)=='.') flag=1; else &#123; num-=flag; int now=s.charAt(i)-'0'; ans=ans.multiply(base).add(BigInteger.valueOf(now)); &#125; &#125; for(int i=1;i&lt;=num;++i) ans=ans.multiply(base); return ans; &#125; public static void dfs(BigInteger a,BigInteger b,BigInteger c,BigInteger d, BigInteger la,BigInteger lb,BigInteger ra,BigInteger rb, BigInteger x,BigInteger y) &#123; BigInteger le=b.multiply(x).subtract(a.multiply(y)); BigInteger ri=d.multiply(x).subtract(c.multiply(y)); if(le.compareTo(zero)&lt;=0 &amp;&amp; ri.compareTo(zero)&gt;0) &#123; ans=x; return ; &#125; BigInteger k,tem; if(le.compareTo(zero)&gt;0) &#123; tem=a.multiply(rb).subtract(b.multiply(ra)); k=le.add(tem.subtract(one)).divide(tem); dfs(a,b,c,d, x.add(k.subtract(one).multiply(ra)),y.add(k.subtract(one).multiply(rb)), ra,rb, x.add(k.multiply(ra)),y.add(k.multiply(rb))); &#125; else &#123; ri=ri.negate(); tem=d.multiply(la).subtract(c.multiply(lb)); k=ri.divide(tem).add(one); dfs(a,b,c,d, la,lb, x.add(k.subtract(one).multiply(la)),y.add(k.subtract(one).multiply(lb)), x.add(k.multiply(la)),y.add(k.multiply(lb))); &#125; &#125; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); BigInteger pow=base.pow(LEN); BigInteger a,b; int T=cin.nextInt(); for(int cas=1;cas&lt;=T;++cas) &#123; String s=cin.next(),t=cin.next(); a=trans(s); b=trans(t); dfs(pow,a,pow,b,one,zero,zero,one,one,one); System.out.println(ans); &#125; &#125;&#125; 3.Petrozavodsk Winter-2018. AtCoder Contest C Construct Point题意：二维平面上给整点三角形的三个顶点坐标，判断三角形内部（不含边界）是否存在整点，如果有输出任意一个。 思路：先考虑这么一个子问题，在直线$y=\\frac{b}{a}x$和$y=\\frac{d}{c}x$之间找一个整点，范围$0&lt;x\\le D$，那么还是$\\frac{b}{a}x &lt; y&lt;\\frac{d}{c}x$，得到$\\frac{b}{a}&lt;\\frac{y}{x}&lt;\\frac{d}{c}$，找到最小的x和D比较即可。对于任意三角形的话，通过分割，平移，对称的变换就能规约成上述子问题啦。 代码略。","tags":[{"name":"Stern-Brocot tree","slug":"Stern-Brocot-tree","permalink":"http://yoursite.com/tags/Stern-Brocot-tree/"}]},{"title":"线段树合并","date":"2018-09-05T09:31:00.000Z","path":"2018/09/05/线段树合并/","text":"适用条件：动态开点的(权值)线段树。 关于时间复杂度的结论： 每次合并的代价是两棵树的公共节点数。 若有n棵含有单个元素的树，经过n-1次merge操作，将他们合并成一棵树的代价是$O(nlogn)$或$O(nlogC)$的 单次merge操作开销可大可小，均摊下一次就是一个log的。 关于空间复杂度，普通版本是$O(nlogn)$的。 直接给出代码，merge操作十分简洁： 12345678910111213141516void insert(int &amp;x,int y,int l,int r)&#123; ++sum[x=++tot]; if(l==r) return; int mid=l+r&gt;&gt;1; if(y&lt;=mid) insert(ls[x],y,l,mid); else insert(rs[x],y,mid+1,r);&#125;int merge(int x,int y)&#123; if(!x||!y) return x+y; sum[x]=sum[x]+sum[y]; ls[x]=merge(ls[x],ls[y]); rs[x]=merge(rs[x],rs[y]); return x;&#125; 题目1.BZOJ 2212: [Poi2011]Tree Rotations递归的给一颗二叉树，只有叶子有权值，对于每个非叶节点可以交换左右子树，使遍历后构成的序列逆序对最小。 对于一个子树，逆序对来自三部分，一个完全在左子树，一个完全在右子树，还有就是跨越左右子树的逆序对，可以发现交换左右子树的操作只会改变跨越部分的贡献，这里可以在线段树合并过程中求出逆序对的个数。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define N 600010int n,m;int son[N][2];int root[N],rt;int tot,ls[N*20],rs[N*20],sum[N*20];ll ans0,ans1,ans;void insert(int &amp;x,int y,int l,int r)&#123; ++sum[x=++tot]; if(l==r) return; int mid=l+r&gt;&gt;1; if(y&lt;=mid) insert(ls[x],y,l,mid); else insert(rs[x],y,mid+1,r);&#125;void read(int &amp;x)&#123; x=++m; int y; scanf(\"%d\",&amp;y); if(y) &#123; insert(root[x],y,1,n); return; &#125; read(son[x][0]); read(son[x][1]);&#125;int merge(int x,int y)&#123; if(!x||!y) return x+y; ans0+=1LL*sum[rs[x]]*sum[ls[y]]; ans1+=1LL*sum[rs[y]]*sum[ls[x]]; sum[x]=sum[x]+sum[y]; ls[x]=merge(ls[x],ls[y]); rs[x]=merge(rs[x],rs[y]); return x;&#125;void solve(int x)&#123; if(!son[x][0] &amp;&amp; !son[x][1]) return; solve(son[x][0]); solve(son[x][1]); ans0=ans1=0; root[x]=merge(root[son[x][0]],root[son[x][1]]); ans+=min(ans0,ans1);&#125;int main()&#123; scanf(\"%d\",&amp;n); read(rt); solve(rt); printf(\"%lld\\n\",ans); return 0;&#125; 2.BZOJ 2733: [HNOI2012]永无乡每个元素有点权，支持合并两个集合，查询一个集合内第k小的元素。 之前的做法是启发式合并+平衡树，每个元素最多插入$O(logn)$次，插入一次$O(logn)$，所以总的时间复杂度$O(nlog^{2}n)$。 用线段树合并就可以做到$O(nlogn)$了，查询非常简单。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include&lt;bits/stdc++.h&gt;using namespace std;#define N 100010int tot;int sum[N*20],ls[N*20],rs[N*20];int fa[N],siz[N],root[N],id[N],val[N];int n,m,q;void insert(int &amp;x,int y,int l,int r)&#123; ++sum[x=++tot]; if(l==r) return; int mid=l+r&gt;&gt;1; if(y&lt;=mid) insert(ls[x],y,l,mid); else insert(rs[x],y,mid+1,r);&#125;int merge(int x,int y)&#123; if(!x||!y) return x+y; sum[x]=sum[x]+sum[y]; ls[x]=merge(ls[x],ls[y]); rs[x]=merge(rs[x],rs[y]); return x;&#125;int ask(int x,int y,int l,int r)&#123; if(l==r) return l; int mid=l+r&gt;&gt;1; if(y&lt;=sum[ls[x]]) return ask(ls[x],y,l,mid); else return ask(rs[x],y-sum[ls[x]],mid+1,r);&#125;int getfa(int x)&#123; return x==fa[x]?x:fa[x]=getfa(fa[x]);&#125;void Union(int x,int y)&#123; x=getfa(x);y=getfa(y); if(x==y) return; if(siz[x]&gt;siz[y]) swap(x,y); fa[x]=y; siz[y]+=siz[x]; root[y]=merge(root[x],root[y]);&#125;int Ask(int x,int y)&#123; x=getfa(x); if(siz[x]&lt;y) return -1; return id[ask(root[x],y,1,n)];&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); tot=0; for(int i=1;i&lt;=n;++i) &#123; scanf(\"%d\",&amp;val[i]);id[val[i]]=i; fa[i]=i; siz[i]=1; insert(root[i],val[i],1,n); &#125; for(int i=1;i&lt;=m;++i) &#123; int x,y; scanf(\"%d%d\",&amp;x,&amp;y); Union(x,y); &#125; scanf(\"%d\",&amp;q); while(q--) &#123; char opt[3]; int x,y; scanf(\"%s%d%d\",opt,&amp;x,&amp;y); if(opt[0]=='Q') printf(\"%d\\n\",Ask(x,y)); else Union(x,y); &#125; return 0;&#125; 3.2018 南京网络赛 H set首先这个题不是线段树，而是trie树，我们把每个数二进制从低位到高位插入trie，维护子树中插入的数的个数，合并类似线段树合并，修改操作比较巧妙，+1就相当于最低位+1，也就是最低位0变1，1变0，那么交换左右子树即可，进位的话就是进入（交换后）的左子树继续交换左右子树，递归下去。这样总的时间复杂度就是$O(nlogC)$。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293#include&lt;bits/stdc++.h&gt;using namespace std;#define N 600010int tot;int sum[N*32],son[N*32][2];int fa[N],root[N];int n,m;void read(int &amp;x)&#123; char ch; while(!isdigit(ch=getchar())); x=ch-'0'; while(isdigit(ch=getchar())) x=x*10+ch-'0';&#125;int insert(int y)&#123; int now=++tot; int res=now; ++sum[now]; for(int i=0;i&lt;32;++i,y&gt;&gt;=1) &#123; son[now][y&amp;1]=++tot; ++sum[now=son[now][y&amp;1]]; &#125; return res;&#125;int merge(int x,int y)&#123; if(!x||!y) return x+y; sum[x]=sum[x]+sum[y]; son[x][0]=merge(son[x][0],son[y][0]); son[x][1]=merge(son[x][1],son[y][1]); return x;&#125;void change(int x)&#123; if(x==0) return; swap(son[x][0],son[x][1]); change(son[x][0]);&#125;int ask(int x,int k,int y)&#123; for(int i=0;i&lt;k;++i,y&gt;&gt;=1) x=son[x][y&amp;1]; return sum[x];&#125;int getfa(int x)&#123; return x==fa[x]?x:fa[x]=getfa(fa[x]);&#125;void Union(int x,int y)&#123; x=getfa(x);y=getfa(y); if(x==y) return; fa[x]=y; root[y]=merge(root[x],root[y]);&#125;int main()&#123; read(n);read(m); for(int i=1;i&lt;=n;++i) &#123; int y;read(y); root[i]=insert(y); fa[i]=i; &#125; while(m--) &#123; int opt; scanf(\"%d\",&amp;opt); if(opt==1) &#123; int x,y; scanf(\"%d%d\",&amp;x,&amp;y); Union(x,y); &#125; else if(opt==2) &#123; int x; scanf(\"%d\",&amp;x); change(root[getfa(x)]); &#125; else &#123; int x,k,y; scanf(\"%d%d%d\",&amp;x,&amp;k,&amp;y); printf(\"%d\\n\",ask(root[getfa(x)],k,y)); &#125; &#125; return 0;&#125;","tags":[{"name":"线段树","slug":"线段树","permalink":"http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"}]},{"title":"2017 西安网络赛 A题 TREE","date":"2018-08-31T06:45:00.000Z","path":"2018/08/31/2017-西安网络赛-A题-TREE/","text":"最近想起来这么一道题，当时q神没rush出来，赛后几分钟AC掉的 题目链接：https://nanti.jisuanke.com/t/17114 题意是树上有$N$个点，每个点的点权是一个01矩阵，有$Q$次询问，每次问树上从x到y这条路径上的矩阵依次乘起来的结果是多少(模2意义下)。数据范围$N\\le 3000,Q\\le 30000$，矩阵大小$64\\times 64$。 首先这里的模2意义下的矩阵乘法可以用bitset优化，每行一个bitset，每列一个bitset，这样做乘法就是左行右列and起来，然后count一下1的个数，复杂度$O({64}^2)$。 注意到这道题中维护的信息只能合并，不能做“减法”，也就是不能使用逆矩阵，因为逆矩阵不一定存在。 一个显然的暴力思路是就是树上倍增，但很不幸，时间复杂度$O({64}^2QlogN)$达到了$1.4\\times 10^9$肯定会超时。 我们用离线求LCA的方法，就可以把log去掉了。这里要注意题目中是点权，我们要先把点权看成边权，然后再把x与y的LCA处的矩阵乘上。另外，矩阵乘法是有顺序的，所以一条链，从上到下与从下到上乘起来是不一样的，所以要用两个并查集分别维护。忽略并查集的话，最终总的时间复杂度为$O({64}^2N+{64}^2Q)$。 这个题实际上还有树分治的写法，改天补一下。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177#include&lt;bits/stdc++.h&gt;using namespace std;#define N 30010typedef unsigned long long ull;typedef long long ll;const ll mod=19260817;const ll mod2=mod*mod;int p19[66],p26[66];int _e,_p[N],_last[N&lt;&lt;1],_head[N&lt;&lt;1],_w[N&lt;&lt;1],_dir[N&lt;&lt;1];vector&lt;int&gt; edge[N];int fa[2][N],lca[N];bool vis[N];int n,m;ull seed;struct node&#123; int x,i,o;&#125;;vector&lt;node&gt; que[N];struct matrix64&#123; bitset&lt;64&gt; mx[64],my[64]; matrix64() &#123; for(int i=0;i&lt;64;++i) mx[i].reset(),my[i].reset(); &#125; void clear() &#123; for(int i=0;i&lt;64;++i) mx[i].reset(),my[i].reset(); &#125; void init() &#123; for(int i=0;i&lt;64;++i) mx[i].reset(),my[i].reset(); for(int i=0;i&lt;64;++i) mx[i][i]=my[i][i]=1; &#125; void set(int x,int y) &#123; mx[x][y]=1; my[y][x]=1; &#125; friend matrix64 operator *(const matrix64 &amp;a,const matrix64 &amp;b) &#123; matrix64 c; bitset&lt;64&gt; tmp; for(int i=0;i&lt;64;++i) for(int j=0;j&lt;64;++j) &#123; tmp=a.mx[i]&amp;b.my[j]; if(tmp.count()&amp;1) &#123; c.mx[i][j]=1; c.my[j][i]=1; &#125; &#125; return c; &#125;&#125; A[N],dis[2][N],ans[2][N];void addquery(int x,int y,int c,int o)&#123; _head[++_e]=y;_w[_e]=c;_dir[_e]=o; _last[_e]=_p[x]; _p[x]=_e;&#125;int getfa(int x,int o)&#123; if(x==fa[o][x]) return x; int rt=getfa(fa[o][x],o); if(o==0) dis[o][x]=dis[o][x]*dis[o][fa[o][x]]; else dis[o][x]=dis[o][fa[o][x]]*dis[o][x]; return fa[o][x]=rt;&#125;void dfs(int x,int pre)&#123; fa[0][x]=x;fa[1][x]=x; dis[0][x].init();dis[1][x].init(); vis[x]=true; for(int i=0;i&lt;edge[x].size();++i) &#123; int y=edge[x][i]; if(y!=pre) &#123; dfs(y,x); fa[0][y]=x;fa[1][y]=x; dis[0][y]=A[y];dis[1][y]=A[y]; &#125; &#125; for(int j=_p[x];j;j=_last[j]) &#123; int y=_head[j]; int i=_w[j],o=_dir[j]; if(vis[y]) &#123; lca[i]=getfa(y,o); ans[o][i]=dis[o][y]; que[lca[i]].push_back(node&#123;x,i,o^1&#125;); &#125; &#125; for(auto &amp;pr:que[x]) &#123; getfa(pr.x,pr.o); ans[pr.o][pr.i]=dis[pr.o][pr.x]; &#125;&#125;int calc(matrix64 &amp;tmp)&#123; ll now=0; for(int j=0;j&lt;64;++j) for(int k=0;k&lt;64;++k) if(tmp.mx[j][k]) &#123; now=(now+1LL*p19[j+1]*p26[k+1]); if(now&gt;=mod2) now-=mod2; &#125; return now%mod;&#125;int main()&#123; p19[0]=p26[0]=1; for(int i=1;i&lt;=64;++i) &#123; p19[i]=19LL*p19[i-1]%mod; p26[i]=26LL*p26[i-1]%mod; &#125; while(scanf(\"%d%d\",&amp;n,&amp;m)!=EOF) &#123; _e=0; for(int i=1;i&lt;=n;++i) &#123; _p[i]=0; edge[i].clear(); que[i].clear(); &#125; for(int i=1;i&lt;n;++i) &#123; int x,y; scanf(\"%d%d\",&amp;x,&amp;y); edge[x].push_back(y); edge[y].push_back(x); &#125; scanf(\"%llu\",&amp;seed); for(int i=1;i&lt;=n;++i) &#123; A[i].clear(); for(int j=0;j&lt;64;++j) &#123; seed^=seed*seed+15; for(int k=0;k&lt;64;++k) if((seed&gt;&gt;k)&amp;1) A[i].set(j,k); &#125; &#125; for(int i=1;i&lt;=m;++i) &#123; int x,y; scanf(\"%d%d\",&amp;x,&amp;y); addquery(x,y,i,1); addquery(y,x,i,0); ans[0][i].init(); ans[1][i].init(); &#125; for(int i=1;i&lt;=n;++i) vis[i]=false; dfs(1,0); for(int i=1;i&lt;=m;++i) &#123; matrix64 tmp=ans[0][i]*A[lca[i]]; tmp=tmp*ans[1][i]; printf(\"%d\\n\",calc(tmp)); &#125; &#125;&#125;","tags":[{"name":"LCA","slug":"LCA","permalink":"http://yoursite.com/tags/LCA/"},{"name":"bitset","slug":"bitset","permalink":"http://yoursite.com/tags/bitset/"}]},{"title":"高维偏序问题","date":"2018-08-30T11:55:00.000Z","path":"2018/08/30/高维偏序问题/","text":"最近做了几道高维偏序的简单题。 对于这类题目一般有三种通用方法，一是cdq分治，维数越多嵌套次数就越多，总体来说思路就是对时间分治，每次统计出左半区间的贡献点对右半区间的询问点的贡献，这样对于每个询问点来说，它前面的所有对它造成影响的点就都会被算到。二是用bitset优化暴力，应该只能处理计数问题，但优点是好写，适合做高维偏序。三是KDtree，emmmm，这个没怎么写过，多校训练十分艰难的写过一次，通过了90%的数据然后TLE了。 1.LOJ#112 三维偏序计数题，对其中一维排序后，cdq分治套树状数组，时间复杂度$O(nlog^{2}n)$。 2.COGS 2479[HZOI 2016] 偏序计数题，四维偏序，cdq分治套cdq分治套树状数组，时间复杂度$O(nlog^{3}n)$。 怎么理解这个分治套分治呢。假设属性为a,b,c，第一次分治的时候我们将区间[l,mid]的点标记成贡献点，[mid+1,r]的点标记成询问点，然后区间[l,r]按a属性排序，消去a的影响，这样问题就变成了有n次操作，每次要么插入一个点(b,c)，要么查询之前插入的点中有多少点在(b,c)左下方，这样问题就降了一维化成了三维偏序了。 3.COGS 2580 [HZOI 2015]偏序 II计数题，五维偏序，在上一题的基础上外面再套一次cdq分治，时间复杂度十分感人$O(nlog^{4}n)$。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define N 100010struct node&#123; int w,x,y,z; bool t,s;&#125; a[N],b[N],c[N],d[N];int n;ll ans;struct BIT&#123; int c[N]; void add(int x,int y) &#123; for(; x&lt;=n; x+=x&amp;(-x)) c[x]+=y; &#125; int ask(int x) &#123; int ans=0; for(; x; x-=x&amp;(-x)) ans+=c[x]; return ans; &#125;&#125; bit;void cdq3(int l,int r)&#123; if(l==r) return; int mid=(l+r)&gt;&gt;1; cdq3(l,mid); cdq3(mid+1,r); int i=l,j=mid+1,k=l; while(i&lt;=mid &amp;&amp; j&lt;=r) &#123; if(c[i].y&lt;c[j].y) &#123; if(!c[i].s &amp;&amp; !c[i].t) bit.add(c[i].z,1); d[k++]=c[i++]; &#125; else &#123; if(c[j].s &amp;&amp; c[j].t) ans+=bit.ask(c[j].z); d[k++]=c[j++]; &#125; &#125; while(i&lt;=mid) &#123; if(!c[i].s &amp;&amp; !c[i].t) bit.add(c[i].z,1); d[k++]=c[i++]; &#125; while(j&lt;=r) &#123; if(c[j].s &amp;&amp; c[j].t) ans+=bit.ask(c[j].z); d[k++]=c[j++]; &#125; for(int i=l; i&lt;=mid; ++i) if(!c[i].s &amp;&amp; !c[i].t) bit.add(c[i].z,-1); for(int i=l; i&lt;=r; ++i) c[i]=d[i];&#125;void cdq2(int l,int r)&#123; if(l==r) return; int mid=(l+r)&gt;&gt;1; cdq2(l,mid); cdq2(mid+1,r); int i=l,j=mid+1,k=l; while(i&lt;=mid &amp;&amp; j&lt;=r) &#123; if(b[i].x&lt;b[j].x) c[k]=b[i++],c[k++].s=false; else c[k]=b[j++],c[k++].s=true; &#125; while(i&lt;=mid) c[k]=b[i++],c[k++].s=false; while(j&lt;=r) c[k]=b[j++],c[k++].s=true; for(int i=l; i&lt;=r; ++i) b[i]=c[i]; cdq3(l,r);&#125;void cdq1(int l,int r)&#123; if(l==r) return; int mid=(l+r)&gt;&gt;1; cdq1(l,mid); cdq1(mid+1,r); int i=l,j=mid+1,k=l; while(i&lt;=mid &amp;&amp; j&lt;=r) &#123; if(a[i].w&lt;a[j].w) b[k]=a[i++],b[k++].t=false; else b[k]=a[j++],b[k++].t=true; &#125; while(i&lt;=mid) b[k]=a[i++],b[k++].t=false; while(j&lt;=r) b[k]=a[j++],b[k++].t=true; for(int i=l; i&lt;=r; ++i) a[i]=b[i]; cdq2(l,r);&#125;int main()&#123; while(scanf(\"%d\",&amp;n)!=EOF) &#123; for(int i=1; i&lt;=n; i++)scanf(\"%d\",&amp;a[i].w); for(int i=1; i&lt;=n; i++)scanf(\"%d\",&amp;a[i].x); for(int i=1; i&lt;=n; i++)scanf(\"%d\",&amp;a[i].y); for(int i=1; i&lt;=n; i++)scanf(\"%d\",&amp;a[i].z); ans=0; cdq1(1,n); printf(\"%lld\\n\",ans); &#125;&#125; 4.COGS 2639. [HZOI 2015] 偏序++计数题，七维偏序。只能bitset了，每个元素开一个bitset表示哪些点比它小，一维一维的考虑，从小到大枚举值，然后对每个元素and一下就行了。时间复杂度$O(kn^2/64)$ 123456789101112131415161718192021#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int N=40005;bitset&lt;N&gt; bs[N],tmp;int n,k,ans;int pos[N],a[N];int main()&#123; scanf(\"%d%d\",&amp;n,&amp;k); for(int i=1;i&lt;=n;++i) bs[i]=bs[i-1],bs[i][i-1]=1; while(k--) &#123; for(int i=1;i&lt;=n;++i) scanf(\"%d\",a+i),pos[a[i]]=i; tmp.reset(); for(int i=1;i&lt;=n;++i) bs[pos[i]]&amp;=tmp,tmp[pos[i]]=1; &#125; ll ans=0; for(int i=1;i&lt;=n;++i) ans+=bs[i].count(); printf(\"%lld\\n\",ans);&#125; 5.SPOJ LIS2 Another Longest Increasing Subsequence Problem求最优解，即最长上升子序列的长度，每个元素有两个属性。回忆一下一个属性的话，我们可以用树状数组求前缀最大值的方法优化dp的转移，再加一维就用cdq分治套一下就行了。 与之前计数题不同的地方在于，计数题中贡献对询问的影响是独立的，没有先后顺序的问题，但是做这个dp的过程就必须是从前往后了，比如说序列1,2,3,4，如果用3去更新4的话，3的dp值就必须在之前就已经算出来是3。稍微改一下分治的顺序就可以了，先递归到[l,mid]，然后用左半区间更新右半区间的dp值，然后递归到右半区间。 6.2018 牛客网暑期ACM多校训练营（第九场）Longest Common Subsequence求四个序列的最长公共子序列，保证值范围1-n，前三个序列中每一种值出现次数不超过2次。 先考虑四个序列都是排列的情况，假设对于值x来说pa[x],pb[x],pc[x],pd[x]在四个序列中的位置，那么最长公共子序列就转化成了求四维偏序的最长链。对于这个题目我们可以2的3次方枚举每个值的位置三元组，这样总点数就是8n的，还是求四维偏序的最长链。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int N=80005;int n;int dp[N],vis[N];int pos[N][3][2];struct node&#123; int x,y,z,t,o; void show() &#123; printf(\"%d:(%d,%d,%d) %d\\n\",o,x,y,z,dp[o]); &#125;&#125; a[N],b[N],c[N];bool cmpx(const node &amp;a,const node &amp;b)&#123; if(a.x!=b.x) return a.x&lt;b.x; return a.y&gt;b.y;&#125;bool cmpy(const node &amp;a,const node &amp;b)&#123; if(a.y!=b.y) return a.y&lt;b.y; return a.z&gt;b.z;&#125;struct BIT&#123; int c[N]; void change(int x,int y) &#123; for(; x&lt;=n; x+=x&amp;(-x)) c[x]=max(c[x],y); &#125; void clear(int x) &#123; for(; x&lt;=n; x+=x&amp;(-x)) c[x]=0; &#125; int ask(int x) &#123; int ans=0; for(; x; x-=x&amp;(-x)) ans=max(ans,c[x]); return ans; &#125;&#125; bit;void cdq2(int l,int r)&#123; if(l==r) return; int mid=(l+r)&gt;&gt;1; cdq2(l,mid); for(int i=l; i&lt;=r; ++i) c[i]=b[i]; sort(c+l,c+mid+1,cmpy); sort(c+mid+1,c+r+1,cmpy); int i=l,j=mid+1; for(; j&lt;=r; ++j) &#123; for(; i&lt;=mid &amp;&amp; c[i].y&lt;c[j].y; ++i) if(c[i].t==0) bit.change(c[i].z,dp[c[i].o]); if(c[j].t==1) dp[c[j].o]=max(dp[c[j].o],bit.ask(c[j].z-1)+1); &#125; for(i=l; i&lt;=mid; ++i) if(c[i].t==0) bit.clear(c[i].z); cdq2(mid+1,r);&#125;void cdq1(int l,int r)&#123; if(l==r) return; int mid=(l+r)&gt;&gt;1; cdq1(l,mid); for(int i=l; i&lt;=r; ++i) b[i]=a[i],b[i].t=(i&gt;mid); sort(b+l,b+r+1,cmpx); cdq2(l,r); cdq1(mid+1,r);&#125;int main()&#123; scanf(\"%d\",&amp;n); for(int i=0; i&lt;3; ++i) &#123; memset(vis,0,sizeof(vis)); for(int j=1; j&lt;=n; ++j) &#123; int x; scanf(\"%d\",&amp;x); if(!vis[x]) pos[x][i][0]=pos[x][i][1]=j,vis[x]=1; else pos[x][i][1]=j; &#125; &#125; int cnt=0; for(int i=1; i&lt;=n; ++i) &#123; int x; scanf(\"%d\",&amp;x); if(!pos[x][0][0]||!pos[x][1][0]||!pos[x][2][0]) continue; for(int j=7; j&gt;=0; --j) &#123; ++cnt; a[cnt].o=cnt; a[cnt].x=pos[x][0][j&amp;1]; a[cnt].y=pos[x][1][j&gt;&gt;1&amp;1]; a[cnt].z=pos[x][2][j&gt;&gt;2&amp;1]; a[cnt].t=0; //a[cnt].show(cnt); dp[cnt]=1; &#125; &#125; cdq1(1,cnt); int ans=0; for(int i=1; i&lt;=cnt; ++i) ans=max(ans,dp[i]); printf(\"%d\\n\",ans); return 0;&#125;/*(1,1,2)(2,2,3)(3,4,4)(4,5,5)*/","tags":[{"name":"偏序","slug":"偏序","permalink":"http://yoursite.com/tags/%E5%81%8F%E5%BA%8F/"}]},{"title":"偏序集","date":"2018-08-29T08:47:00.000Z","path":"2018/08/29/偏序集/","text":"偏序关系首先回顾一下偏序，集合X上的偏序是一个自反、反对称且传递的关系 如果对于X中所有的x，都有x R x，则R是自反的 如果对于X中所有x和y，若x R y和y R x同时成立则x=y，则R是反对称的 对于X中所有的x，y和z，只要x R y且y R z，就有x R z，则R是传递的 通常用$\\le$取代R来表示偏序关系，常见的偏序关系有集合的包含，小于等于，整除等。$&lt;$表示严格偏序（反自反，反对称，传递），比如严格包含于，小于关系等。 可比与不可比对于X中x和y，如果x R y或者y R x，则说x和y是可比的，否则就说x和y不可比 极小元极大元对于偏序集X中的元素a，不存在满足x&lt;a的元素x，则a是偏序集的一个极小元。对于偏序集X中的元素b，不存在满足b&lt;y的元素y，则b是偏序集的一个极大元。 链与反链设$(X,\\le)$是有限偏序集，链是X的一个子集C，它的每一对元素都可比，因此链C是X的一个全序子集，链的元素可以被线性排序。反链是X的一个子集A，他的任意两个元素都不可比。 由定义可知 链的子集也是链，反链的子集还是反链。 如果A是一个反链而C是一个链，则$\\left| A\\cap C\\right|\\le 1$ 重要定理定理1 设$(X,\\le)$是有限偏序集，设r是链的最大大小。则X可以被划分成r个反链，但不能划分成少于r个反链 定理2 (Dilworth定理) 设$(X,\\le)$是有限偏序集，设m是反链的最大大小。则X可以被划分成m个链，但不能划分成少于m个链 定理1的证明大概是每次找到偏序集的极小元集合，然后删掉，这样实际上得到的r个极小元集合就是划分成r个反链的方案。定理2是定理1的“对偶”定理，但是证明就比较复杂了。 题目1.导弹拦截最经典的题目，把一个数列划分成最少的最长不升子序列的数目就等于这个数列的最长上升子序列的长度。这里的偏序关系i R j，可以理解为i&lt;j且a[i]&lt;a[j]。 2.2017 ICPC Nanning The Maximum Unreachable Node Set求一个DAG的最大的两两不可达的点集大小。 需要先做floyd，然后转化为求最小不相交路径覆盖就可以了，每个点拆成两个点，形成一个左右各n个点的二分图，对于一条边(i,j)左边的i连向右边的j，最终答案为n减去二分图最大匹配的数量。","tags":[{"name":"偏序","slug":"偏序","permalink":"http://yoursite.com/tags/%E5%81%8F%E5%BA%8F/"}]},{"title":"类欧几里得算法","date":"2018-08-28T09:41:00.000Z","path":"2018/08/28/类欧几里得算法/","text":"推导有时候需要快速计算如下式子(比如数据范围都是1e9) $$f(a,b,c,n)=\\sum_{i=0}^{n}\\lfloor\\frac{ai+b}{c}\\rfloor$$ $$g(a,b,c,n)=\\sum_{i=0}^{n}i\\lfloor\\frac{ai+b}{c}\\rfloor$$ $$h(a,b,c,n)=\\sum_{i=0}^{n} {\\lfloor\\frac{ai+b}{c}\\rfloor}^2$$ 先推导一下$f(a,b,c,n)$，分两种情况 1.当$a\\ge c$或$b \\ge c$时， $$f(a,b,c,n)=f(a%c,b%c,c,n)+\\frac{n(n+1)}{2}\\lfloor\\frac{a}{c}\\rfloor+(n+1)\\lfloor\\frac{b}{c}\\rfloor$$ 2.当$a&lt;c$且$b&lt;c$时，令$m=\\lfloor\\frac{an+b}{c}\\rfloor$ $$f(a,b,c,n)=\\sum_{i=0}^{n}\\sum_{j=1}^{m}\\left[\\lfloor\\frac{ai+b}{c}\\rfloor\\ge j\\right]$$ $$f(a,b,c,n)=\\sum_{i=0}^{n}\\sum_{j=0}^{m-1}\\left[\\lfloor\\frac{ai+b}{c}\\rfloor\\ge j+1\\right]$$ $$f(a,b,c,n)=\\sum_{i=0}^{n}\\sum_{j=0}^{m-1}\\left[ai\\ge jc+c-b\\right]$$ $$f(a,b,c,n)=\\sum_{i=0}^{n}\\sum_{j=0}^{m-1}\\left[ai&gt; jc+c-b-1\\right]$$ $$f(a,b,c,n)=\\sum_{i=0}^{n}\\sum_{j=0}^{m-1}\\left[i&gt;\\frac{jc+c-b-1}{a}\\right]$$ 最后交换求和 $$f(a,b,c,n)=\\sum_{j=0}^{m-1}(n-\\lfloor\\frac{jc+c-b-1}{a}\\rfloor)$$ 得到 $$f(a,b,c,n)=nm-f(c,c-b-1,a,m-1)$$ 因为系数$a,c$变成了$c,a%c$，所以叫类欧几里得算法。 题目1.bzoj2987: Earthquake给定a,b,c,求满足方程Ax+By&lt;=C的非负整数解 $$ans=\\sum_{x=0}^{\\lfloor\\frac{c}{a}\\rfloor}\\lfloor\\frac{c-ax}{b}\\rfloor+1$$ 负数再变形一下，可以看成把x从大到小遍历 $$ans=\\sum_{x=0}^{\\lfloor\\frac{c}{a}\\rfloor}\\lfloor\\frac{c%a+ax}{b}\\rfloor+1$$ 2.牛客网暑期ACM多校训练营（第十场）Rikka with Ants在二维坐标系有两条直线$y=\\frac{a}{b}x,y=\\frac{c}{d}x$。对于每一条直线，有一只蚂蚁从(1,0)出发，只能向上或向右走一格，并且蚂蚁一直都在直线下方，每次优先向上走，如果越过了直线就改为向右走。问对于这两个蚂蚁走过的点的交集大小。 斜率相等时交集点数无穷大。 对于直线$y=\\frac{a}{b}x$，走到的点为$\\frac{a}{b}(x-1)-1 &lt; y \\le \\frac{a}{b}x,x\\ge 1$ 假设直线$y=\\frac{c}{d}x$斜率较小，那么交集为 $$\\frac{a}{b}(x-1)-1 &lt; y \\le \\frac{c}{d}x, 1 \\le x \\le n$$ 其中 $$n=\\lfloor\\frac{d(a+b)}{ad-bc}\\rfloor$$ 最终要求的式子 $$\\sum_{x=0}^{n-1}\\lfloor\\frac{cx+c}{d}\\rfloor-\\sum_{x=0}^{n-1}\\lfloor\\frac{ax}{b}-1\\rfloor$$ 参考资料： https://blog.csdn.net/WorldWide_D/article/details/54730588","tags":[{"name":"math","slug":"math","permalink":"http://yoursite.com/tags/math/"}]},{"title":"后缀自动机学习笔记","date":"2018-08-18T07:15:00.000Z","path":"2018/08/18/后缀自动机学习笔记/","text":"写在前面推荐hihocoder上的讲解，可以说是十分清楚了。 用好后缀自动机不是十分容易，但看完本文的总结应该能至少达到签到水平… 正文后缀自动机（Suffix Automaton，简称SAM）。对于一个字符串S，它对应的后缀自动机是一个最小的确定有限状态自动机（DFA），接受且只接受S的后缀。 先给出一张图和一个表格。 对于字符串STR=”aabbabd”，它的后缀自动机是： 状态 子串 endpos S 空串 {0,1,2,3,4,5,6} 1 a {1,2,5} 2 aa {2} 3 aab {3} 4 aabb,abb,bb {4} 5 b {3,4,6} 6 aabba,abba,bba,ba {5} 7 aabbab,abbab,bbab,bab {6} 8 ab {3,6} 9 aabbabd,abbabd,bbabd,babd,abd,bd,d {7} 接下来从状态(State)、转移函数(Transition Function)、后缀链接(Suffix Link)三个方面全方位了解一下后缀自动机的性质。 状态：记号： $length(s)$表示字符串s的长度。 $endpos(s)$表示字符串s在STR中所有出现的结束位置集合。 $substrings(st)$表示状态st中包含的所有子串的集合。 $longest(st)$表示状态st包含的最长的子串，$shortest(st)$表示st包含的最短的子串。 $maxlen(st)=length(longest(st))$。 性质: 从起始状态S出发，沿着图中蓝线转移，对于STR的子串最终会到达一个合法状态，不是子串的话最终会无路可走。 对于STR的两个子串$s_1$和$s_2$，不妨设$length(s_1) \\leq length(s_2)$，$s_1$是$s_2$的后缀当且仅当$endpos(s_2) \\subseteq endpos(s_1)$，$s_1$不是$s_2$的后缀当且仅当$endpos(s_1) \\bigcap endpos(s_2) = \\emptyset$ 对于一个后缀自动机的状态$st$，$substrings(st)$里的字符串$endpos$集都相同，或者说同一个状态下的字符串构成了一个等价类，这样记$endpos(st)$表示该状态的$endpos$集。 对于一个后缀自动机的状态$st$，以及任意$s \\in substrings(st)$，都有$s$是$longest(st)$的后缀。 对于一个状态$st$，以及任意的$longest(st)$的后缀$s$，如果$s$的长度满足：$length(shortest(st)) \\leq length(s) \\leq length(longsest(st))$，那么$s \\in substrings(st)$。 换句话说，$substrings(st)$包含的是$longest(st)$的一系列连续后缀。 转移函数： 记字符集合$next(st)$表示对于一个状态st，从它开始下一个遇到的字符可能有哪些，形式化的写出来，有$next(st) = {STR[i+1] | i \\in endpos(st)}$。对于一个状态st来说和一个$next(st)$中的字符c，你会发现$substrings(st)$中的所有子串后面接上一个字符c之后，新的子串仍然都属于同一个状态。比如对于状态4，$next(4)={a}$，aabb,abb,bb后面接上字符a得到aabba，abba，bba，这些子串都属于状态6。 定义转移函数$trans(st, c) = x | longest(st) + c \\in substrings(x) $。换句话说，我们在$longest(st)$（随便哪个子串都会得到相同的结果）后面接上一个字符c得到一个新的子串s，找到包含s的状态x，那么$trans(st, c)$就等于x。 对应图中蓝线，比如$trans(4, a)=6$。 后缀链接： 前面我们讲到$substrings(st)$包含的是$longest(st)$的一系列连续后缀。这连续的后缀在某个地方会“断掉”。比如状态7，包含的子串依次是aabbab,abbab,bbab,bab。按照连续的规律下一个子串应该是“ab”，但是“ab”没在状态7里，这是因为串变短了，就有可能在别的地方也会出现，即$endpos$集合大小变大了。比如aabbab,abbab,bbab,bab（状态7）的$endpos$集为{6}，而“ab”（状态8）的$endpos$集为{3,6}，“b”（状态5）的$endpos$集为{3,4,6}。 于是我们可以发现一条状态序列：7-&gt;8-&gt;5-&gt;S。这个序列的意义是longest(7)即aabbab的后缀依次在状态7、8、5、S中。我们用Suffix Link这一串状态链接起来，这条link就是上图中的绿色虚线。 后缀链接组成了一棵以S为根的树。 构造后缀自动机：构造比较复杂，还是推荐看 http://hihocoder.com/contest/hiho128/problem/1 具体改天再写 时间复杂度$O(N) $，空间上状态数不超过$2N$。 代码中son表示转移函数，pre表示后缀链接，cnt表示$endpos$集合大小。 添加字符的过程中只能标出$endpos$大小为1的那些状态，需要对后缀链接构成的树形结构从叶子开始做拓扑排序，得到所有状态的$endpos$集合大小。 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;bits/stdc++.h&gt;using namespace std;#define N 1000010struct SAM&#123; int tot,last; int son[N&lt;&lt;1][26],maxlen[N&lt;&lt;1],pre[N&lt;&lt;1]; int cnt[N&lt;&lt;1],in[N&lt;&lt;1],q[N&lt;&lt;1]; void init() &#123; tot=0; last=newnode(); &#125; int newnode() &#123; ++tot; memset(son[tot],0,sizeof(son[tot])); maxlen[tot]=pre[tot]=cnt[tot]=in[tot]=0; return tot; &#125; void add(int c) &#123; int now=newnode(); maxlen[now]=maxlen[last]+1; cnt[now]=1; while(last &amp;&amp; son[last][c]==0) son[last][c]=now,last=pre[last]; if(last) &#123; int x=son[last][c]; if(maxlen[x]==maxlen[last]+1) pre[now]=x; else &#123; int nq=newnode(); maxlen[nq]=maxlen[last]+1; memcpy(son[nq],son[x],sizeof(son[x])); pre[nq]=pre[x]; pre[x]=pre[now]=nq; while(last &amp;&amp; son[last][c]==x) son[last][c]=nq,last=pre[last]; &#125; &#125; else pre[now]=1; last=now; &#125; void endpos() &#123; int l=0,r=0; for(int i=1;i&lt;=tot;++i) ++in[pre[i]]; for(int i=1;i&lt;=tot;++i) if(!in[i]) q[r++]=i; while(l!=r) &#123; int x=q[l++]; if(pre[x]==0) continue; cnt[pre[x]]+=cnt[x]; if((--in[pre[x]])==0) q[r++]=pre[x]; &#125; &#125;&#125; sam;char s[N];int main()&#123; sam.init(); scanf(\"%s\",s); for(int i=0;s[i];++i) sam.add(s[i]-'a'); sam.endpos();&#125; 广义后缀自动机解决多个串的问题，做法很简单，只需要添加每个串前让last=1即可，或者也可以对trie树建后缀自动机，则新加点时last为trie上的父节点。分析与证明在2015年国家集训队论文里有。 如果要记录一些信息，比如strval表示每个状态里的子串在多少个串中出现过，需要额外加一个lc维护该状态上一次出现是哪个串，每次沿着Parent向上更新出现次数，遇到lc=当前串的就停止。时间复杂度还不太会分析，待补。 12345678910111213141516171819202122232425262728293031323334353637383940414243void add(int id,int c)//id表示第几个串，编号从1开始&#123; int now=newnode(); maxlen[now]=maxlen[last]+1; cnt[now]=1; while(last &amp;&amp; son[last][c]==0) son[last][c]=now,last=pre[last]; if(last) &#123; int x=son[last][c]; if(maxlen[x]==maxlen[last]+1) pre[now]=x; else &#123; int nq=newnode(); maxlen[nq]=maxlen[last]+1; memcpy(son[nq],son[x],sizeof(son[x])); pre[nq]=pre[x]; lc[nq]=lc[x];strval[nq]=strval[x];//额外的信息 pre[x]=pre[now]=nq; while(last &amp;&amp; son[last][c]==x) son[last][c]=nq,last=pre[last]; &#125; &#125; else pre[now]=1; last=now; //广义后缀自动机 while(now &amp;&amp; lc[now]!=id) &#123; lc[now]=id; ++strval[now]; now=pre[now]; &#125;&#125;//mainsam.init();for(int i=1;i&lt;=n;++i)&#123; sam.last=1; scanf(\"%s\",s); for(int j=0;s[j];++j) sam.add(i,s[j]-'a');&#125; 练习题目：1.hihocoder #1445 : 后缀自动机二·重复旋律5求字符串本质不同子串的个数，直接累加$\\left|substrings(st) \\right|$，利用maxlen数组及suffix link不难得出。 1234567ll count()&#123; ll ans=0; for(int i=1;i&lt;=tot;++i) ans+=maxlen[i]-maxlen[pre[i]]; return ans;&#125; 2.spoj1811 LCS求两个串最长公共子串，对一个串建后缀自动机，另一个串在上面走，如果当前状态没有当前字符的转移，就沿着suffix link往回跳，很好理解。 123456789101112131415161718int LCS(char *s)&#123; int now=1,len=0,ans=0; for(int i=0;s[i];++i) &#123; int x=s[i]-'a'; if(son[now][x]) ++len,now=son[now][x]; else &#123; while(now &amp;&amp; son[now][x]==0) now=pre[now]; if(now==0) len=0,now=1; else len=maxlen[now]+1,now=son[now][x]; &#125; ans=max(ans,len); &#125; return ans;&#125; 3.bzoj3998: [TJOI2015]弦论求一个串的第K小子串，T为0表示不同位置的相同子串算作一个，T=1则表示不同位置的相同子串算作多个。 还是先计算$endpos$集合大小cnt，如果T==0，则每个状态cnt值都是1，如果T==1，则还是和之前的代码一样，在suffix link构成的树上做拓扑排序，转移出cnt。 另外还需要知道从 每个状态往后走会有多少种子串，记为$Sum[x]$，还是用同样的拓扑序转移 $$Sum[x]=cnt[x]+\\sum_{i=0}^{25} Sum[son[x][i]]$$ 然后从根开始按照字典序dfs一下就可以求出第K小子串了。 4.bzoj3238: [AHOI2013]差异给一个字符串S，求$\\sum_{1\\le i&lt;j\\le n} len(T_i)+len(T_j)-2lcp(T_i,T_j)$，其中T_i表示i开始的后缀，lcp表示最长公共前缀。 把原串倒过来建后缀自动机，这样就把前缀变成了后缀。两个前缀的最长公共后缀是对应后缀自动机上两结点的LCA，实上统计的话，枚举LCA做类似树dp的事情数一数即可。 123456789101112131415161718void addedge()&#123; for(int i=2;i&lt;=tot;++i) e[pre[i]].push_back(i);&#125;void dfs(int x)&#123; ll now=0; for(int i=0;i&lt;e[x].size();++i) &#123; int y=e[x][i]; dfs(y); ans-=2LL*now*cnt[y]*maxlen[x]; now+=cnt[y]; &#125; if(cnt[x]==1) ans-=2*now*maxlen[x]; cnt[x]+=now;&#125; 或者这样，类似容斥一下的统计 12345678910void dfs(int x)&#123; for(int i&#x3D;0;i&lt;e[x].size();++i) &#123; int y&#x3D;e[x][i]; dfs(y); cnt[x]+&#x3D;cnt[y]; &#125; if(x!&#x3D;1) ans-&#x3D;1LL*cnt[x]*(cnt[x]-1)*(maxlen[x]-maxlen[pre[x]]);&#125; 5.是男人就过 8 题–Pony.AI A String GameAlice和Bob玩游戏，有n个串Si，保证都是t的子串，每人轮流从n个串中取出一个串，并在结尾添加一个字符后放回去，要求是添加字符之后也要保证该串是t的子串，无法操作的人输，Alice先手，问谁赢。 显然是要在t的后缀自动机上博弈，要注意不能直接从根开始dfs，需要先做搞出拓扑序。 1234567891011121314151617181920212223242526272829303132333435int calc(char *s,int n)&#123; int now=1; for(int i=0;i&lt;n;++i) now=son[now][s[i]-'a']; return ans[now];&#125;void work()&#123; for(int i=1;i&lt;=tot;++i) for(int j=0;j&lt;26;++j) if(son[i][j]) &#123; e[son[i][j]].push_back(i); in[i]++; &#125; int l=0,r=0; for(int i=1;i&lt;=tot;++i) if(!in[i]) q[r++]=i; while(l!=r) &#123; int x=q[l++]; int now=0; while(vis[x][now]) ++now; ans[x]=now; for(auto &amp;y:e[x]) &#123; vis[y][ans[x]]=true; --in[y]; if(!in[y]) q[r++]=y; &#125; &#125;&#125; 6.bzoj1396: 识别子串给一个串，求每个位置的最短识别子串的长度，最短识别子串定义是，在整个串中出现一次且覆盖到这个位置的最短的一个子串。 做法是找$endpos$集合大小为1的那些串，用线段树维护答案，具体是区间和一个数取min，以及和一个等差数列取min，稍微转化一下就很好写了。","tags":[{"name":"后缀自动机","slug":"后缀自动机","permalink":"http://yoursite.com/tags/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/"}]},{"title":"诗词两首","date":"2018-06-22T04:44:00.000Z","path":"2018/06/22/诗词两首/","text":"西江月 瑟瑟微风夜半，潇潇细雨黎明。雄鸡一唱与谁听？几度茫然光景。 壮志还须努力，何时乡返功成。椟中美玉尚无名，待得他人相赠。 七绝·四季 漫漫冰霜眼底收， 西风萧瑟欲何求。 独怜明媚绝非夏， 四季如春花满楼。 第一首是词的作业，第二首是诗词格律与写作期末题，这学期另作了一首五古，质量不高，就不放出来了=、= 关于诗词创作就到这里了（撒花）","tags":[{"name":"诗词","slug":"诗词","permalink":"http://yoursite.com/tags/%E8%AF%97%E8%AF%8D/"}]},{"title":"多维快速傅里叶变换","date":"2018-05-21T10:39:00.000Z","path":"2018/05/21/多维快速傅里叶变换/","text":"以下内容摘自《算法导论》思考题30-3 我们可以将一维离散傅里叶变换推广到d维上，这时输入是一个d维的数组$A=(a_{j_1,j_2,\\dots,j_d})$，维数分别为$n_1,n_2,\\dots,n_d$，其中$n_1n_2\\dots n_d=n$。定义d维离散傅里叶变换如下: $$y_{k_1,k_2,\\dots,k_d}=\\sum_{j_1=0}^{n_1-1}\\sum_{j_2=0}^{n_2-1}\\dots\\sum_{j_d=0}^{n_d-1}a_{j_1,j_2,\\dots,j_d}\\omega _{n_1}^{j_1k_1}\\omega _{n_2}^{j_2k_2}\\dots\\omega _{n_d}^{j_dk_d}$$ 其中$0\\le k_1&lt;n_1,0\\le k_2&lt;n_2,\\dots,0\\le k_d&lt;n_d$ a.证明：我们可以依次在每个维度上计算一维的DFT来计算一个d维的DFT。也就是说，首先沿着第1维计算$n/n_1$个独立的一维DFT。然后，把沿着第一维的DFT的结果作为输入，我们计算沿着第2维的$n/n_2$个独立的一维DFT。利用这个结果作为输入，我们计算沿着第3维的$n/n_3$个独立的一维DFT，如此下去，直到第d维。 b.证明：维度的次序并无影响，于是可以通过在d个维度的任意顺序中计算一维DFT来计算一个d为的DFT。 c.证明：如果采用计算快速傅里叶变换计算每个一维的DFT，那么计算一个d维的DFT的总时间是$O(nlogn)$，与d无关。 练习题目 Five Dimensional Discrete Fourier Transform 2017年ICPC南宁赛区的G题 直接做多维DFT，复杂度$O(TN^6)$，需要卡卡常数。 代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146#include&lt;bits/stdc++.h&gt;using namespace std;typedef double db;const db pi=acos(-1.0);struct Complex&#123; db x,y; Complex(db x_=0,db y_=0) &#123; x=x_; y=y_; &#125; Complex operator -(const Complex &amp;t)const &#123; return Complex(x-t.x,y-t.y); &#125; Complex operator +(const Complex &amp;t)const &#123; return Complex(x+t.x,y+t.y); &#125; Complex operator *(const Complex &amp;t)const &#123; return Complex(x*t.x-y*t.y,x*t.y+y*t.x); &#125; Complex operator *(const db &amp;t)const &#123; return Complex(x*t,y*t); &#125;&#125; a[10][10][10][10][10],A[10][10][10][10][10],w[20],x[20],y[20];Complex e(db t)&#123; return Complex(cos(t),sin(t));&#125;int n[10];db alpha;void dft(Complex *x,Complex *y,int n)&#123; for(int j=0;j&lt;n;++j) w[j]=e(-2*pi/n*j); for(int i=0;i&lt;n;++i) &#123; y[i]=Complex(0,0); for(int j=0;j&lt;n;++j) y[i]=y[i]+x[j]*w[i*j%n]; &#125;&#125;db calc()&#123; db ans=0; for(int i0=0;i0&lt;n[0];++i0) for(int i1=0;i1&lt;n[1];++i1) for(int i2=0;i2&lt;n[2];++i2) for(int i3=0;i3&lt;n[3];++i3) for(int i4=0;i4&lt;n[4];++i4) ans+=abs(A[i0][i1][i2][i3][i4].x); int nn=n[0]*n[1]*n[2]*n[3]*n[4]; return ans/sqrt(1.0*nn*nn*nn);&#125;void baoli()&#123; for(int i0=0;i0&lt;n[0];++i0) for(int i1=0;i1&lt;n[1];++i1) for(int i2=0;i2&lt;n[2];++i2) for(int i3=0;i3&lt;n[3];++i3) for(int i4=0;i4&lt;n[4];++i4) &#123; A[i0][i1][i2][i3][i4]=Complex(0,0); for(int j0=0;j0&lt;n[0];++j0) for(int j1=0;j1&lt;n[1];++j1) for(int j2=0;j2&lt;n[2];++j2) for(int j3=0;j3&lt;n[3];++j3) for(int j4=0;j4&lt;n[4];++j4) A[i0][i1][i2][i3][i4]=A[i0][i1][i2][i3][i4]+a[j0][j1][j2][j3][j4]*e(2*pi*(1.0*i0*j0/n[0]+1.0*i1*j1/n[1]+1.0*i2*j2/n[2]+1.0*i3*j3/n[3]+1.0*i4*j4/n[4])); &#125;&#125;void dft()&#123; for(int i1=0;i1&lt;n[1];++i1) for(int i2=0;i2&lt;n[2];++i2) for(int i3=0;i3&lt;n[3];++i3) for(int i4=0;i4&lt;n[4];++i4) &#123; for(int i0=0;i0&lt;n[0];++i0) x[i0]=a[i0][i1][i2][i3][i4]; dft(x,y,n[0]); for(int i0=0;i0&lt;n[0];++i0) a[i0][i1][i2][i3][i4]=y[i0]; &#125; for(int i0=0;i0&lt;n[0];++i0) for(int i2=0;i2&lt;n[2];++i2) for(int i3=0;i3&lt;n[3];++i3) for(int i4=0;i4&lt;n[4];++i4) &#123; for(int i1=0;i1&lt;n[1];++i1) x[i1]=a[i0][i1][i2][i3][i4]; dft(x,y,n[1]); for(int i1=0;i1&lt;n[1];++i1) a[i0][i1][i2][i3][i4]=y[i1]; &#125; for(int i0=0;i0&lt;n[0];++i0) for(int i1=0;i1&lt;n[1];++i1) for(int i3=0;i3&lt;n[3];++i3) for(int i4=0;i4&lt;n[4];++i4) &#123; for(int i2=0;i2&lt;n[2];++i2) x[i2]=a[i0][i1][i2][i3][i4]; dft(x,y,n[2]); for(int i2=0;i2&lt;n[2];++i2) a[i0][i1][i2][i3][i4]=y[i2]; &#125; for(int i0=0;i0&lt;n[0];++i0) for(int i1=0;i1&lt;n[1];++i1) for(int i2=0;i2&lt;n[2];++i2) for(int i4=0;i4&lt;n[4];++i4) &#123; for(int i3=0;i3&lt;n[3];++i3) x[i3]=a[i0][i1][i2][i3][i4]; dft(x,y,n[3]); for(int i3=0;i3&lt;n[3];++i3) a[i0][i1][i2][i3][i4]=y[i3]; &#125; for(int i0=0;i0&lt;n[0];++i0) for(int i1=0;i1&lt;n[1];++i1) for(int i2=0;i2&lt;n[2];++i2) for(int i3=0;i3&lt;n[3];++i3) &#123; for(int i4=0;i4&lt;n[4];++i4) x[i4]=a[i0][i1][i2][i3][i4]; dft(x,y,n[4]); for(int i4=0;i4&lt;n[4];++i4) a[i0][i1][i2][i3][i4]=y[i4]; &#125; for(int i0=0;i0&lt;n[0];++i0) for(int i1=0;i1&lt;n[1];++i1) for(int i2=0;i2&lt;n[2];++i2) for(int i3=0;i3&lt;n[3];++i3) for(int i4=0;i4&lt;n[4];++i4) A[i0][i1][i2][i3][i4]=a[i0][i1][i2][i3][i4];&#125;int main()&#123; int T; scanf(\"%d\",&amp;T); while(T--) &#123; for(int i=0;i&lt;5;++i) scanf(\"%d\",&amp;n[i]); scanf(\"%lf\",&amp;alpha); for(int i0=0;i0&lt;n[0];++i0) for(int i1=0;i1&lt;n[1];++i1) for(int i2=0;i2&lt;n[2];++i2) for(int i3=0;i3&lt;n[3];++i3) for(int i4=0;i4&lt;n[4];++i4) a[i0][i1][i2][i3][i4]=e((i0-i1+i2-i3+i4)*alpha)*(i0^i1^i2^i3^i4); //baoli(); dft(); printf(\"%.6f\\n\",calc()); &#125;&#125;","tags":[{"name":"fft","slug":"fft","permalink":"http://yoursite.com/tags/fft/"}]},{"title":"快速傅里叶变换学习笔记","date":"2018-05-09T06:04:00.000Z","path":"2018/05/09/快速傅里叶变换学习笔记/","text":"一、写在前面最近数字图像处理课正在学快速傅里叶变换，发现自己对此理解的还不是很到位。于是借此机会，对照着《算法导论》，对这部分内容啃一啃。 两个$n$次多项式相加的最直接方法所需的时间是$O(n)$，但是相乘的最直接方法所需的时间为$O(n^2)$。用快速傅里叶变换（Fast Fourier Transform，FFT）可以使多项式相乘的时间复杂度降低为$O(nlogn)$。 需要的一些前置技能：复数、多项式、线性代数。 二、多项式一个以$x$为变量的多项式定义在一个代数域$F$上，将函数$A(x)$表示为形式和: $$A(x)=\\sum_{j=0}^{n-1}a_jx^j$$ 我们称$a_0,a_1,\\dots,a_{n-1}$为如上多项式的系数，所有系数都属于域$F$，典型的情形是复数集合$C$。 如果一个多项式$A(x)$的最高次的非零系数是$a_k$，则称$A(x)$的次数是$k$，记$degree(A)=k$。任何严格大于一个多项式次数的整数都是该多项式的次数界，因此，对于次数界为$n$的多项式，其次数可以是$0\\sim n-1$之间的任何整数。 多项式加法如果$A(x)$和$B(x)$是次数界为$n$的多项式，那么它们的和也是一个次数界为$n$的多项式$C(x)$，对所有属于定义域的$x$，都有$C(x)=A(x)+B(x)$。也就是说， 若 $$A(x)=\\sum_{j=0}^{n-1}a_jx^j$$ $$B(x)=\\sum_{j=0}^{n-1}b_jx^j$$ 则 $$C(x)=\\sum_{j=0}^{n-1}c_jx^j(c_j=a_j+b_j)$$ 例如，如果有多项式$A(x)=6x^3+7x^2-10x+9$和$B(x)=-2x^3+4x-5$，那么$C(x)=4x^3+7x^2-6x+4$。 多项式乘法如果$A(x)$和$B(x)$是次数界为$n$的多项式，那么它们的乘积$C(x)$是一个次数界为$2n-1$的多项式$C(x)$，对所有属于定义域的$x$，都有$C(x)=A(x)B(x)$。方法类似还是用上一个例子，那么得到 $$C(x)=-12x^6-14x^5+44x^4-20x^3-75x^2+86x-45$$ 形式化的式子有 $$C(x)=\\sum_{j=0}^{2n-2}c_jx^j$$ 其中 $$c_j=\\sum_{k=0}^{j}a_{k}b_{j-k}$$ 此时 $$degree(C)=degree(A)+degree(B)$$ 多项式的表示从某种意义上，多项式的系数表达与点值表达式等价的。 系数表达对一个次数界为$n$的多项式$A(x)=\\sum_{j=0}^{n-1}a_jx^j$而言，其系数表达是一个由系数组成的（列）向量$a=(a_0,a_1,\\dots,a_{n-1})$。对于多项式乘法，系数向量$c$成为输入向量$a$和$b$的卷积，表示成$c=a\\otimes b$。 点值表达一个次数界为$n$的多项式$A(x)$的点值表达就是一个由$n$个点值对组成的集合 $${(x_0,y_0),(x_1,y_1),\\dots,(x_{n-1},y_{n-1})}$$ 使得对$k=0,1,\\dots,n-1$，所有$x_k$各不相同，且$y_k=A(x_k)$。 一个多项式可以有很多不同的点值表达。如果采用的点都相同的话，用点值表达多项式做乘法只需$O(n)$的时间。 求值与插值从一个多项式的系数表达转化为点值表达的过程是求值，其逆运算称为插值。 定理（插值多项式的唯一性）：对于任意n个点值对组成的集合${(x_0,y_0),(x_1,y_1),\\dots,(x_{n-1},y_{n-1})}$，其中所有的$x_k$都不同，那么存在唯一的次数界为n的多项式$A(x)$，满足$y_k=A(x_k)$。 证明列出矩阵方程，然后结合范德蒙德矩阵的性质。 简单的求值和插值（拉格朗日插值）的时间复杂度都是$O(n^2)$的。 我们之后就要通过巧妙选取点来加速这两个过程，使其运行时间变为$O(nlogn)$。 三、单位复数根$n$次单位复数根是满足$\\omega ^n=1$的复数$\\omega$。 $n$次单位复数根恰好有$n$个： $$\\omega _{n}^{0},\\omega _{n}^{1},\\dots,\\omega _{n}^{n-1}$$ 其中主$n$次单位复数根为 $$\\omega _n=e^{2\\pi i/n}=\\cos(2\\pi/n)+i\\sin(2\\pi/n)$$ 其他$n$次单位复数根都是$\\omega _n$的幂次。 消去引理：对于任何整数$n\\ge 0,k\\ge 0,d&gt;0$，有$\\omega _{dn}^{dk}=\\omega _{n}^{k}$ 推论：对于任意偶数$n&gt;0$，有$\\omega _{n}^{n/2}=\\omega _{2}=-1$ 折半引理：如果$n&gt;0$为偶数，那么$n$个$n$次单位复数根的平方的集合就是$n/2$个$n/2$次单位复数根的集合 求和引理：对任意整数$n\\geq 1$和不能被$n$整除的非负整数$k$，有$\\sum_{j=0}^{n-1}(\\omega _n^k)^j=0$ 四、快速傅里叶变换DFT现在我们希望计算次数界$n$的多项式 $$A(x)=\\sum_{j=0}^{n-1}a_jx^j$$ 在$\\omega_{n}^{k}$处的值，记为$y_k$ $$y_k=A(\\omega_{n}^{k})=\\sum_{j=0}^{n-1}a_j\\omega_{n}^{kj}$$ 向量$y=(y_0,y_1,\\dots,y_{n-1})$就是系数向量$a=(a_0,a_1,\\dots,a_{n-1})$的离散傅里叶变换（DFT），记为$y=DFT_n(a)$。 FFT快速傅里叶变换（FFT）利用复数单位根的特殊性质，可以在$O(nlogn)$时间内计算出$DFT_n(a)$。首先通篇假设$n$恰好是$2$的整数幂。 FFT利用了分治策略，采用$A(x)$中偶数下标的系数与奇数下标的系数，分别定义两个新的次数界为$n/2$的多项式$A^{[0]}(x)$和$A^{[1]}(x)$: $$A^{[0]}(x)=a_{0}+a_{2}x+a_{4}x^2+\\dots+a_{n-2}x^{n/2-1}$$ $$A^{[1]}(x)=a_{1}+a_{3}x+a_{5}x^2+\\dots+a_{n-1}x^{n/2-1}$$ 于是有 $$A(x)=A^{[0]}(x^2)+xA^{[1]}(x^2)$$ 所以，求$A(x)$在$\\omega _{n}^{0},\\omega _{n}^{1},\\dots,\\omega _{n}^{n-1}$处的值转换为求次数界为$n/2$的多项式$A^{[0]}(x)$和$A^{[1]}(x)$在点$(\\omega _{n}^{0})^2,(\\omega _{n}^{1})^2,\\dots,(\\omega _{n}^{n-1})^2$的值。可以发现其实是$n/2$个$n/2$次单位复数根，且每个根恰好出现两次。 IDFT将点值表达的多项式转换回系数表达，是相似的过程。 我们把DFT写成矩阵乘积$y=V_{n}a$。 其中$V_{n}$是一个范德蒙德矩阵，在$(k,j)$处的元素为$\\omega _{n}^{kj}$。 对于逆运算$a=DFT_{n}^{-1}(y)$，我们把$y$乘以$V_{n}$的逆矩阵来处理。 定理：对$j,k=0,1,\\dots,n-1$，$V_{n}^{-1}$在$(j,k)$元素为$\\omega _{n}^{-kj}/n$。 证明$V_{n}^{-1}V_{n}=I_n$时用求和引理即可，注意使用条件。 所以可以推导出$DFT_{n}^{-1}(y)$： $$a_j=\\frac{1}{n}\\sum_{k=0}^{n-1}y_{k}\\omega_n^{-kj}$$ 可以看出只需将单位根取倒数，做一次FFT，最后将结果都除以n，就做完逆变换了。 五、代码实现首先是手写复数类，也可以用std::complex。 123456789101112131415161718192021struct Complex&#123; double x,y; Complex(double x_=0,double y_=0) &#123; x=x_; y=y_; &#125; Complex operator -(const Complex &amp;t)const &#123; return Complex(x-t.x,y-t.y); &#125; Complex operator +(const Complex &amp;t)const &#123; return Complex(x+t.x,y+t.y); &#125; Complex operator *(const Complex &amp;t)const &#123; return Complex(x*t.x-y*t.y,x*t.y+y*t.x); &#125;&#125;; 递归实现12345678910111213141516171819202122void fft(Complex y[],int n)&#123; if(n==1) return; static Complex c[MAXN]; int m=n/2; for(int i=0;i&lt;m;++i) &#123; c[i]=y[i*2]; c[i+m]=y[i*2+1]; &#125; copy(c,c+n,y); Complex *a0=y,*a1=y+m; fft(a0,m); fft(a1,m); for(int i=0;i&lt;m;++i) &#123; Complex w(cos(-2*PI/n*i),sin(-2*PI/n*i)); c[i]=a0[i]+w*a1[i]; c[i+m]=a0[i]-w*a1[i]; &#125; copy(c,c+n,y);&#125; 合并过程的推导： 对于$0 \\le k &lt; n/2$ $$\\begin{aligned}y _k &amp; =A(\\omega _{n}^{k}) \\\\&amp; =A^{[0]}(\\omega _{n}^{2k})+\\omega _{n}^{k}A^{[1]}(\\omega _{n}^{2k}) \\\\&amp; =A^{[0]}(\\omega _{n/2}^{k})+\\omega _{n}^{k}A^{[1]}(\\omega _{n/2}^{k}) \\\\&amp; =y_k^{[0]}+\\omega _{n}^{k}y_k^{[1]}\\end{aligned}$$ 前半段没什么问题，再来看后半段 $$\\begin{aligned} y_{k+(n/2)} &amp; =A(\\omega _{n}^{k+(n/2)}) \\\\&amp; =A^{[0]}(\\omega _{n}^{2k+n})+\\omega _{n}^{k+(n/2)}A^{[1]}(\\omega _{n}^{2k+n}) \\\\&amp; =A^{[0]}(\\omega _{n}^{2k})-\\omega _{n}^{k}A^{[1]}(\\omega _{n}^{2k}) \\\\&amp; =A^{[0]}(\\omega _{n/2}^{k})-\\omega _{n}^{k}A^{[1]}(\\omega _{n/2}^{k}) \\\\&amp; =y_k^{[0]}-\\omega _{n}^{k}y_k^{[1]}\\end{aligned}$$ 迭代实现递归实际运行起来常数很大，我们需要更高效的实现方法。 先来观察一下递归过程中输入向量的下标变化，以$n=8$举例，可以将这个过程自行脑补成一个完全二叉树的样子： 0 1 2 3 4 5 6 7 0 2 4 6 - 1 3 5 7 0 4 - 2 6 - 1 5 - 3 7 0 - 4 - 2 - 6 - 1 - 5 - 3 - 7 如果观察二进制的话会发现对应的下标是反转二进制位得到的，比如“011”变成“110”，即下标3变成了6。 代码实现举例两种 直接求出对应位置反转二进制位后的数，然后交换，时间复杂度$O(nlogn)$ 12345678910111213void change(Complex y[],int len)&#123; int k=0; while((1&lt;&lt;k)&lt;len) ++k; for(int i=0;i&lt;len;++i) &#123; int t=0; for(int j=0;j&lt;k;++j) if(i&gt;&gt;j&amp;1) t|=1&lt;&lt;(k-j-1); if(i&lt;t) swap(y[i],y[t]); &#125;&#125; 从高位模拟二进制加一，用经典的摊还分析可以证明复杂度是$O(n)$ 123456789101112131415void change(Complex y[],int len)&#123; int i,j,k; for(i=1,j=len/2;i&lt;len-1;i++) &#123; if(i&lt;j) swap(y[i],y[j]); k=len/2; while(j&gt;=k) &#123; j-=k; k/=2; &#125; if(j&lt;k) j+=k; &#125;&#125; 之后我们再考虑自底向上的合并，在之前的递归版本中，有一个公用子表达式$\\omega _{n}^{k}y_k^{[1]}$计算了两次，我们可以只计算一次乘积，存放在临时变量$t$里，然后从$y_k^{[0]}$中增加或者减去$t$，这一系列操作称为一个蝴蝶操作。 代码： 1234567891011121314151617181920212223void fft(Complex y[],int len,int on)&#123; change(y,len); for(int h=2;h&lt;=len;h&lt;&lt;=1) &#123; Complex wn(cos(-on*2*PI/h),sin(-on*2*PI/h)); for(int j=0;j&lt;len;j+=h) &#123; Complex w(1,0); for(int k=j;k&lt;j+h/2;k++) &#123; Complex u=y[k]; Complex t=w*y[k+h/2]; y[k]=u+t; y[k+h/2]=u-t; w=w*wn; &#125; &#125; &#125; if(on==-1) for(int i=0;i&lt;len;i++) y[i].x/=len;&#125; on取值1或-1，on为-1代表逆变换。 实际上，预处理单位根代替每次旋转精度会更好。 六、模板多项式乘法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long LL;const double PI=acos(-1.0);const int MAXN=1&lt;&lt;18;struct Complex&#123; double x,y; Complex(double x_=0,double y_=0) &#123; x=x_; y=y_; &#125; Complex operator -(const Complex &amp;t)const &#123; return Complex(x-t.x,y-t.y); &#125; Complex operator +(const Complex &amp;t)const &#123; return Complex(x+t.x,y+t.y); &#125; Complex operator *(const Complex &amp;t)const &#123; return Complex(x*t.x-y*t.y,x*t.y+y*t.x); &#125;&#125; x1[MAXN+5],x2[MAXN+5],wn[MAXN+5];void init()&#123; for(int i=0;i&lt;=MAXN;++i) wn[i]=Complex(cos(-2*PI*i/MAXN),sin(-2*PI*i/MAXN));&#125;void change(Complex y[],int len)&#123; int i,j,k; for(i=1,j=len/2;i&lt;len-1;i++) &#123; if(i&lt;j) swap(y[i],y[j]); k=len/2; while(j&gt;=k) &#123; j-=k; k/=2; &#125; if(j&lt;k) j+=k; &#125;&#125;void fft(Complex y[],int len,int on)&#123; change(y,len); for(int h=2;h&lt;=len;h&lt;&lt;=1) &#123; int st=MAXN/h; for(int j=0;j&lt;len;j+=h) &#123; int ptr=0; for(int k=j;k&lt;j+h/2;k++) &#123; Complex w=wn[on==1?ptr:MAXN-ptr]; Complex u=y[k],t=w*y[k+h/2]; y[k]=u+t; y[k+h/2]=u-t; ptr+=st; &#125; &#125; &#125; if(on==-1) for(int i=0;i&lt;len;i++) y[i].x/=len;&#125;int n,m;int main()&#123; init(); scanf(\"%d%d\",&amp;n,&amp;m); ++n;++m; int len=1; while(len&lt;(n&lt;&lt;1)||len&lt;(m&lt;&lt;1)) len&lt;&lt;=1; for(int i=0;i&lt;n;++i) &#123; int x; scanf(\"%d\",&amp;x); x1[i].x=x; &#125; for(int i=0;i&lt;m;++i) &#123; int x; scanf(\"%d\",&amp;x); x2[i].x=x; &#125; fft(x1,len,1); fft(x2,len,1); for(int i=0;i&lt;len;++i) x1[i]=x1[i]*x2[i]; fft(x1,len,-1); for(int i=0;i&lt;n+m-1;++i) printf(\"%d%c\",(int)(x1[i].x+0.5),\" \\n\"[i==n+m-2]); return 0;&#125; 七、结语啊，终于弄完快速傅里叶变换了，撒花！ 实际上，关于FFT还有很多东西没有讨论到，先到这里吧。","tags":[{"name":"fft","slug":"fft","permalink":"http://yoursite.com/tags/fft/"}]},{"title":"莫队算法总结","date":"2018-05-03T05:36:00.000Z","path":"2018/05/03/莫队算法总结/","text":"写在前面莫队算法用于离线解决一类区间问题。 普通莫队如果我们已知查询为区间$[l,r]$的答案，并且能在$O(1)$的时间内通过添加或删除一个元素得到$[l-1,r],[l+1,r],[l,r-1],[l,r+1]$的答案，那么就可以考虑使用莫队算法。 做法： 1.首先我们对原序列分块，原序列长度$N$,每块大小记为$Size$，那么块数为$\\lfloor \\frac{N-1}{Size} \\rfloor +1$，每块从左到右依次编号。 2.对所有询问$[l_i,r_i]$以询问左端点所在块的序号为第一关键字，右端点的大小为第二关键字进行排序。按照这样的顺序通过添加或删除元素求解每个询问的答案。 可以证明当$Size$取$\\sqrt{N}$时，总的时间复杂度为$O(N^{1.5})$。 左端点在同一块时，右端点是递增的，变化$N$次，共有$\\sqrt{N}$个块，这一部分复杂度为$O(N^{1.5})$。 左端点转移到下一块时，右端点最多变化$N$次，共有$\\sqrt{N}$个块，这一部分复杂度为$O(N^{1.5})$。 左端点在同一块时，每次最多变化$\\sqrt{N}$，转移到下一块时，最多变化$2\\sqrt{N}$，询问共$N$个，这一部分复杂度为$O(N^{1.5})$。 模板： 1234567891011121314151617181920212223const int SIZE=300;struct Q&#123;int l,r,order;&#125; q[N];bool cmp(const re &amp;a,const re &amp;b)&#123; if(pos[a.l]!=pos[b.l]) return pos[a.l]&lt;pos[b.l]; return a.r&lt;b.r;&#125;int main()&#123; for(int i=1;i&lt;=n;++i) pos[i]=(i-1)/SIZE+1; for(int i=1;i&lt;=m;++i) q[i].order=i; sort(q+1,q+m+1,cmp); for(int i=1,l=1,r=0; i&lt;=m; ++i) &#123; int L=q[i].l ,R=q[i].r; while(r&lt;R) add(++r); while(r&gt;R) del(r--); while(l&lt;L) del(l++); while(l&gt;L) add(--l) ans[q[i].order]=now; &#125; //for(int i=1; i&lt;=m; ++i) print ans[i]&#125; 带修改莫队对于一些带单点修改的问题，还是存在一种莫队姿势的。当然，一次修改要求$O(1)$完成。 每个修改操作记录位置和修改前后的值，这样方便还原修改。 每个询问除了记录区间$[l,r]$之外，还要记录在此询问之前的修改操作个数（也可以叫做时间）$t$，记$pos_x$表示$x$所在块的编号。 那么将所有询问按照$(pos_l,pos_r,t)$做三关键字排序。那么在普通莫队的基础上，再维护一个修改时间就可以了。 可以证明当$Size$取$N^{\\frac{2}{3}}$时，左端点、右端点、以及时间的移动复杂度均为$O(N^{\\frac{5}{3}})$，所以总的时间复杂度为$O(N^{\\frac{5}{3}})$。 懒得分析了。 模板： 123456789101112131415161718192021222324252627282930313233343536373839404142struct Change&#123; int x,y,pre;&#125;c[N];struct Ask&#123; int l,r,id,time;&#125;q[N];bool cmp(const Ask &amp;a,const Ask &amp;b)&#123; if(pos[a.l]!=pos[b.l]) return pos[a.l]&lt;pos[b.l]; if(pos[a.r]!=pos[b.r]) return pos[a.r]&lt;pos[b.r]; return a.time&lt;b.time;&#125;void change(int i,int l,int r,bool flag)&#123; int y=c[i].x; if(l&lt;=y &amp;&amp; y&lt;=r) erase(y); color[y]=flag?c[i].y:c[i].pre; if(l&lt;=y &amp;&amp; y&lt;=r) insert(y);&#125;int main()&#123; size=pow(n,2.0/3)+1; for(int i=1;i&lt;=n;++i) pos[i]=(i-1)/size+1; sort(q+1,q+numq+1,cmp); int l=1,r=0,curt=0; for(int i=1;i&lt;=numq;++i) &#123; while(curt&lt;q[i].time) change(++curt,l,r,1); while(q[i].time&lt;curt) change(curt--,l,r,0); while(l&lt;q[i].l) erase(l++); while(q[i].l&lt;l) insert(--l); while(q[i].r&lt;r) erase(r--); while(r&lt;q[i].r) insert(++r); ans[q[i].id]=now; &#125;&#125; 回滚莫队我们经常会遇到这样一种问题，即插入操作十分简单，但是直接删除却非常困难（举个例子，当你要维护最值时）。有没有一种办法避免删除呢？有的，用回滚莫队的姿势就好了~ 回滚，rollback，其实意思应该是还原到修改之前。假设当前询问为$[l,r]$。$pos_l$不变时，右端点一直增加，添加操作好说，和普通莫队一样做，但是左端点怎么办呢？我们可以暂时先不把开头$[l,pos_l\\times Size]$这部分添加，然后先存个档，暴力的插入这一小段，得到当前询问的答案后，再读档还原（有些是撤销修改），这就是回滚操作了。 bzoj 4241 历史研究： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define N 100010struct ask&#123; int l,r,o;&#125; q[N];int n,m;int a[N],hs[N],pos[N],num[N];ll now;ll ans[N];bool cmp(const ask &amp;a,const ask &amp;b)&#123; if(pos[a.l]!=pos[b.l]) return pos[a.l]&lt;pos[b.l]; return a.r&lt;b.r;&#125;void del(int x)&#123; --num[a[x]];&#125;void add(int x)&#123; ++num[a[x]]; now=max(now,1LL*hs[a[x]]*num[a[x]]);&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); int siz=sqrt(n); for(int i=1;i&lt;=n;++i) &#123; scanf(\"%d\",a+i); hs[i]=a[i]; pos[i]=(i-1)/siz+1; &#125; sort(hs+1,hs+n+1); int cnt=unique(hs+1,hs+n+1)-hs-1; for(int i=1;i&lt;=n;++i) a[i]=lower_bound(hs+1,hs+cnt+1,a[i])-hs; for(int i=1;i&lt;=m;++i) &#123; scanf(\"%d%d\",&amp;q[i].l,&amp;q[i].r); q[i].o=i; &#125; sort(q+1,q+m+1,cmp); int r=0; for(int i=1;i&lt;=m;++i) &#123; int L=q[i].l,R=q[i].r; if(pos[q[i].l]!=pos[q[i-1].l]) &#123; memset(num,0,sizeof(num)); r=pos[q[i].l]*siz; now=0; &#125; while(r&lt;R) add(++r); ll last=now; for(int j=L;j&lt;=pos[q[i].l]*siz &amp;&amp; j&lt;=R;++j) add(j); ans[q[i].o]=now; //rollback for(int j=L;j&lt;=pos[q[i].l]*siz &amp;&amp; j&lt;=R;++j) del(j); now=last; &#125; for(int i=1;i&lt;=m;++i) printf(\"%lld\\n\",ans[i]); return 0;&#125; 题目普通莫队 codeforces 617E XOR and Favorite Number 带修改莫队 bzoj 2120 数颜色 codeforces 940F Machine Learning 回滚莫队 bzoj 4241 历史研究","tags":[{"name":"莫队算法","slug":"莫队算法","permalink":"http://yoursite.com/tags/%E8%8E%AB%E9%98%9F%E7%AE%97%E6%B3%95/"}]},{"title":"七绝·三月十七日记雪","date":"2018-04-25T13:43:00.000Z","path":"2018/04/25/七律 三月十七日记雪/","text":"七绝·三月十七日记雪 情深几许总成空， 柳絮轻扬未遇风。 无奈曦园留不得， 只看劲挺一青松。 自注： 1.采用首句平起入韵的格式。 2.“空”、“风”为“一东韵”，“松”为“二冬韵” 3.第二句化用“未若柳絮因风起”。 4.第三句意指雪花落地即化。 其实是格律诗词与写作这门课的作业… 随便写了几句，没什么辞藻，格律是没问题的。 老师点评说有点惆怅的感觉:) 还有一个问题是逻辑不太通，这个我也觉得，不过本来就是拼凑的嘛… 就这样吧，嗯","tags":[{"name":"诗词","slug":"诗词","permalink":"http://yoursite.com/tags/%E8%AF%97%E8%AF%8D/"}]},{"title":"正则表达式","date":"2018-04-25T01:34:00.000Z","path":"2018/04/25/正则表达式/","text":"写在前面写这篇文章的初衷是解决一些简单的字符串模拟题目，对于特定的某些题目，有时候用C++11的正则表达式会方便很多。 本文主要总结一下常见的一些正则表达式写法，以及如何使用C++11的regex库，最后以几个具体题目举例。 总的来说，正则表达式最简单的应用是判断一个字符串中是否包含特定字符串。正则表达式是一种文本模式，由普通字符和元字符组成。 常用的元字符 “.” 匹配除“\\n”之外的任何单个字符。 “^” 匹配输入字符串的开始位置，不匹配任何字符，要匹配“^”字符本身，需使用“\\^”；同样的，“$”匹配输入字符串的结束位置。 “[xyz]”字符集，匹配其中包含的任一字符。 “|” 两个匹配条件逻辑或。 “\\w” 匹配字母或数字或下划线；“\\W”匹配任意不是字母、数字、下划线的字符。 “\\d” 匹配任意一个数字；“\\D”匹配任意非数字字符。 “\\s” 匹配任意的空白符，包括空格、制表符、换页符等空白字符的其中任意一个，与“[ \\f\\n\\r\\t\\v]”等效；“\\S” 匹配任意不是空白符的字符。 “\\b” 匹配一个单词边界；“\\B” 匹配非单词边界。 “*” 0次或多次匹配前面的字符或子表达式，“+” 1次或多次匹配前面的字符或子表达式，“?” 0次或1次匹配前面的字符或子表达式。 “{n}” 正好匹配n次，“{n,}” 至少匹配n次，“{n,m}” 匹配n到m次。 举一些例子： “him|her”匹配“him”和“her”，也可写作“h(im|er)” “\\bthe\\b”匹配“in the war”中的“the”，但不匹配“other”中的“the” 分组、捕获、反向引用“( )” 可以将“(”和“)”之间的表达式定义为组，并且将匹配这个表达式的字符保存到一个临时区域。匹配后的各组按照左括号出现的顺序（？）分别存到\\$1,\\$2,\\$3…中。 比如“2018-04-25”，我们用“(\\d{4})-(\\d\\d)-(\\d\\d)”去匹配， 那么 $1 = “2018” $2 = “04” $3 = “25” 如果想让某个括号里的内容不被捕获到，需要用到非捕获性分组 比如“h(im|er)”，就要改为“h(?:im|er)” 然后一个很重要的问题来了!如果想要匹配“看了看”、“研究研究”这样的重叠结构怎么办呢？ 这时候需要用到反向引用，用\\1,\\2,\\3…表示 上面的例子可以用“(..?)了?\\1”去匹配。 语法就先总结到这里，实际还有很多，估计是用不到了。 C++11 regexhttp://www.cplusplus.com/reference/regex/ 最常用的两个类 regex Regex (class ) smatch match_results for string objects (class ) 以及三个函数 regex_match、regex_search、regex_replace 要注意的一点就是在C++中“\\”需要转义，即“\\d”在C++中要写成“\\\\d”，诸如此类。 下面用具体的代码介绍这三个函数 regex_match 判断一个正则表达式是否能匹配整个字符串 123456789101112131415161718192021222324252627282930313233#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;regex&gt;using namespace std;int main ()&#123; if (regex_match (\"subject\", regex(\"(sub)(.*)\") )) cout &lt;&lt; \"string literal matched\\n\"; string s (\"subject\"); regex e (\"(sub)(.*)\"); if (regex_match (s,e)) cout &lt;&lt; \"string object matched\\n\"; if (regex_match ( s.begin(), s.end(), e ) ) cout &lt;&lt; \"range matched\\n\"; smatch sm; // same as std::match_results&lt;string::const_iterator&gt; sm; regex_match (s,sm,e); cout &lt;&lt; \"string object with \" &lt;&lt; sm.size() &lt;&lt; \" matches\\n\"; regex_match ( s.cbegin(), s.cend(), sm, e); cout &lt;&lt; \"range with \" &lt;&lt; sm.size() &lt;&lt; \" matches\\n\"; cout &lt;&lt; \"the matches were: \"; for (unsigned i=0; i&lt;sm.size(); ++i) cout &lt;&lt; \"[\" &lt;&lt; sm[i] &lt;&lt; \"] \"; cout &lt;&lt; endl; return 0;&#125; /* string literal matched string object matchedrange matched string object with 3 matchesrange with 3 matchesthe matches were: [subject] [sub] [ject] */ regex_search 来查找第一个能匹配正则表达式的子串 12345678910111213141516171819202122232425262728293031#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;regex&gt;using namespace std;int main ()&#123; string s (\"this subject has a submarine as a subsequence\"); smatch m; regex e (\"\\\\b(sub)([^ ]*)\"); // matches words beginning by \"sub\" cout &lt;&lt; \"Target sequence: \" &lt;&lt; s &lt;&lt; std::endl; cout &lt;&lt; \"Regular expression: /\\\\b(sub)([^ ]*)/\" &lt;&lt; std::endl; cout &lt;&lt; \"The following matches and submatches were found:\" &lt;&lt; std::endl; while (regex_search (s,m,e)) &#123; for (auto x:m) cout &lt;&lt; x &lt;&lt; \" \"; cout &lt;&lt; endl; s = m.suffix().str(); &#125; return 0;&#125;/*Target sequence: this subject has a submarine as a subsequenceRegular expression: /\\b(sub)([^ ]*)/The following matches and submatches were found:subject sub jectsubmarine sub marinesubsequence sub sequence*/ regex_replace 匹配并替换 12345678910111213141516171819202122232425262728293031// regex_replace example#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;regex&gt;#include &lt;iterator&gt;using namespace std;int main ()&#123; string s (\"there is a subsequence in the string\\n\"); regex e (\"\\\\b(sub)([^ ]*)\"); // matches words beginning by \"sub\" // using string/c-string (3) version: cout &lt;&lt; regex_replace (s,e,\"sub-$2\"); // using range/c-string (6) version: string result; regex_replace (back_inserter(result), s.begin(), s.end(), e, \"$2\"); cout &lt;&lt; result; // with flags: cout &lt;&lt; regex_replace (s,e,\"$1 and $2\",regex_constants::format_no_copy); cout &lt;&lt; endl; return 0;&#125;/*there is a sub-sequence in the stringthere is a sequence in the stringsub and sequence*/ 题目基本的工具基本介绍完了，可以来切一些水题了！ Two stringsfrom 2017 Multi-University Training Contest 给两个字符串A、B，其中A只包含大小写字母，B只包含大小写字母和两个特殊符号“.”、“*”。 “.”可以匹配任意字母，“*”表示前一个字符可以出现任意次。保证“*”不会在字符串开头，不会有两个连续的“*”。问A与B能否匹配。 首先，这里的“.*”和正则表达式里介绍的概念不一样。因为“*”使用的条件是前一个字符确定。即“.*”不能匹配“ab”，但是可以匹配“aa”或“bbb”这样。 这里用反向引用就好了，先将“.*”换成“(\\w)\\1*”即可。 AC代码只有这么短 1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std;string str1,str2;int main()&#123; int T; scanf(\"%d\",&amp;T); while(T--) &#123; cin&gt;&gt;str1&gt;&gt;str2; regex reg_rep(\"\\\\.\\\\*\"); str2=regex_replace(str2,reg_rep,\"(\\\\w)\\\\1*\"); regex reg(str2); if(regex_match(str1,reg)) puts(\"yes\"); else puts(\"no\"); &#125;&#125; Abbreviationfrom 2016-2017 ACM-ICPC Northeastern European Regional Contest (NEERC 16) 题意：大概是给一段包含大小写字母和逗号句号的文本，要求缩写连续的大写字母开头的单词。当时这个模拟写的十分难受想死，结果题解上写了一句有队伍用正则表达式很快就A了这个题目。 样例输入： 1234This is ACM North Eastern European Regional Contest,sponsored by International Business Machines.The. Best. Contest. Ever.A Great Opportunity for all contestants. 样例输出： 1234This is ACM NEERC (North Eastern European Regional Contest),sponsored by IBM (International Business Machines).The. Best. Contest. Ever.A GO (Great Opportunity) for all contestants. AC代码（赛后补的）： 12345678910111213141516171819202122232425262728293031#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; freopen(\"abbreviation.in\",\"r\",stdin); freopen(\"abbreviation.out\",\"w\",stdout); regex reg(\"\\\\b([A-Z][a-z]+ )+([A-Z][a-z]+)\\\\b\"); smatch reg_match; string str; while(getline(cin,str)) &#123; int len=str.length(); while(regex_search(str,reg_match,reg)) &#123; string sub=reg_match[0]; int sublen=sub.length(); int pos=str.find(sub); for(int i=0;i&lt;pos;++i) putchar(str[i]); for(int i=0;i&lt;sublen;++i) if(isupper(sub[i])) putchar(sub[i]); putchar(' '); putchar('('); for(int i=0;i&lt;sublen;++i) putchar(sub[i]); putchar(')'); str=reg_match.suffix().str(); &#125; for(auto &amp;ch:str) putchar(ch); puts(\"\"); &#125;&#125; 赛中写的字符串模拟： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include&lt;bits/stdc++.h&gt;using namespace std;string s;vector&lt;string&gt; vec;bool ok(string &amp;s)&#123; int len=s.length(); if(len&lt;=1) return false; if(!isupper(s[0])) return false; for(int i=1;i&lt;len;++i) if(!islower(s[i])) return false; return true;&#125;bool output(int l,int r)&#123; for(int i=l;i&lt;=r;++i) putchar(s[i]);&#125;int main()&#123; freopen(\"abbreviation.in\",\"r\",stdin); freopen(\"abbreviation.out\",\"w\",stdout); while(getline(cin,s)) &#123; int len=s.length(); int i=0; while(i&lt;len) &#123; // cout&lt;&lt;\"len=\"&lt;&lt;len&lt;&lt;endl; if(!isalpha(s[i])) putchar(s[i++]); else &#123; vec.clear(); while(i&lt;len) &#123; string word; while(i&lt;len &amp;&amp; isalpha(s[i])) word+=s[i],i++; vec.push_back(word); if(s[i]!=' ') break; else i++; //cout&lt;&lt;word&lt;&lt;endl; &#125; //cout&lt;&lt;i&lt;&lt;endl; int sz=vec.size(),num; //cout&lt;&lt;\"sz=\"&lt;&lt;sz&lt;&lt;endl; for(int k=0;k&lt;sz;++k) &#123; int now=k; while(now&lt;sz &amp;&amp; ok(vec[now])) ++now; if(now==k) &#123; cout&lt;&lt;vec[k]; if(k!=sz-1) cout&lt;&lt;\" \"; &#125; else if(k+1==now) &#123; --now; cout&lt;&lt;vec[k]; if(k!=sz-1) cout&lt;&lt;\" \"; &#125; else &#123; for(int j=k;j&lt;now;++j) putchar(vec[j][0]); putchar(' '); putchar('('); for(int j=k;j&lt;now;++j) &#123; cout&lt;&lt;vec[j]; if(j&lt;now-1) cout&lt;&lt;\" \"; &#125; putchar(')'); --now; if(now!=sz-1) cout&lt;&lt;\" \"; &#125; k=now; &#125; //cout&lt;&lt;endl; // cout&lt;&lt;\"ok\"&lt;&lt;endl; while(i&lt;len &amp;&amp; !isalpha(s[i])) putchar(s[i++]); &#125; &#125; puts(\"\"); &#125; return 0;&#125; 命名规范问题from 第十六届北京师范大学程序设计竞赛现场决赛 题意：给一些变量名，将符合(题中描述的) 驼峰命名法规范的变量名转换为下划线命名法。不符合的原样输出。 好吧，这个题其实是我出的，标程用正则表达式，20行左右搞定。 应该并不毒瘤吧，看大家模拟的挺开心的。 代码： 123456789101112131415161718192021#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; regex reg(\"\\\\b[A-Za-z][a-z]+([A-Z][a-z]+)+\\\\b\"); regex cap(\"[A-Z]\"); int T; cin&gt;&gt;T; while(T--) &#123; string now; cin&gt;&gt;now; if(regex_match(now,reg)) &#123; now=regex_replace(now,cap,\"_$0\"); transform(now.begin(),now.end(),now.begin(),::tolower); &#125; if(now[0]=='_') now.erase(0,1); cout&lt;&lt;now&lt;&lt;endl; &#125;&#125;","tags":[{"name":"regex","slug":"regex","permalink":"http://yoursite.com/tags/regex/"}]},{"title":"树链剖分","date":"2018-04-24T06:48:00.000Z","path":"2018/04/24/树链剖分/","text":"简单回顾一下树链剖分（以下摘自2009年漆子超的论文《分治算法在树的路径问题中的应用 》）： 定义： 将树中的边分为两类：轻边和重边。 记$Size(U)$表示以$U$为根的子树的结点个数。 令$V$为$U$的儿子中$Size(V)$最大的一个，那么我们称边$(U,V)$为重边，其余边为轻边。 我们称某条路径为重路径，当且仅当它全部由重边组成。 性质： 性质1：如果$(U,V)$为轻边，则$Size(V) \\leq \\frac{Size(U)}{2}$。 性质2：从根到某一点的路径上轻边的个数不大于$O(log_{2} N)$。 性质3：我们称某条路径为重路径，当且仅当它全部由重边组成。那么对于每个点到根的路径上都不超过 $O(log_{2} N)$ 条轻边和$O( log_{2} N)$条重路径。 证明：性质1根据定义来看比较显然。 性质2的话，从某点出发向上走，每经过一条轻边，当前子树的大小就至少变成2倍（由性质1得），所以根到某一点的路径上轻边的个数不大于$O(log_{2} N)$。 性质3，因为重路径是被轻边间隔开的，所以从每个点到根的路径上经过的重路径的条数是不超过轻边条数+1的，所以也是$O( log_{2} N)$级别的。 应用： 用于求LCA（推荐） 与线段树结合维护查询树链信息 利用重链dfs序连续，代替倍增求点x往上跳k步的点是谁。 代码： deep数组表示深度 fa数组表示父节点 son数组表示重儿子 top数组表示每个点所在重链的顶端节点 pos数组表示每个点按照重链优先dfs下的dfs序 1234567891011121314151617181920212223242526272829303132333435363738394041int deep[N],fa[N],num[N],son[N],top[N],pos[N];void dfs(int x,int pre,int d) &#123; deep[x]=d; fa[x]=pre; num[x]=1; for(auto &amp;y:e[x]) if(y!=pre) &#123; dfs(y,x,d+1); num[x]+=num[y]; if(son[x]==-1 || num[y]&gt;num[son[x]]) son[x]=y; &#125;&#125;void dfs(int x,int root) &#123; top[x]=root; pos[x]=++cnt; if(son[x]==-1) return; else dfs(son[x],root); for(auto &amp;y:e[x]) if(y!=fa[x] &amp;&amp; y!=son[x]) dfs(y,y);&#125;int getmax(int x,int y) &#123; //求树链点权最大值 int f1=top[x],f2=top[y]; int ans=-inf; while(f1!=f2) &#123; if(deep[f1]&lt;deep[f2]) &#123; swap(x,y); swap(f1,f2); &#125; ans=max(ans,ask_max(1,pos[f1],pos[x])); //ask_max 线段树查询 x=fa[f1]; f1=top[x]; &#125; if(deep[x]&gt;deep[y]) swap(x,y); return max(ans,ask_max(1,pos[x],pos[y]));&#125;void init() &#123; memset(son,-1,sizeof(son)); cnt=0;&#125;","tags":[{"name":"树链剖分","slug":"树链剖分","permalink":"http://yoursite.com/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"}]}]