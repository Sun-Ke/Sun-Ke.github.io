[{"title":"Markdown For Typora","date":"2020-04-18T14:02:47.000Z","path":"2020/04/18/Markdown For Typora/","text":"Markdown For TyporaOverviewMarkdown is created by Daring Fireball; the original guideline is here. Its syntax, however, varies between different parsers or editors. Typora is using GitHub Flavored Markdown. [toc] Block ElementsParagraph and line breaksA paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by two or more blank lines. In Typora, you only need one blank line (press Return once) to create a new paragraph. Press Shift + Return to create a single line break. Most other markdown parsers will ignore single line breaks, so in order to make other markdown parsers recognize your line break, you can leave two spaces at the end of the line, or insert &lt;br/&gt;. HeadersHeaders use 1-6 hash (#) characters at the start of the line, corresponding to header levels 1-6. For example: 12345# This is an H1## This is an H2###### This is an H6 In Typora, input ‘#’s followed by title content, and press Return key will create a header. BlockquotesMarkdown uses email-style &gt; characters for block quoting. They are presented as: 1234567&gt; This is a blockquote with two paragraphs. This is first paragraph.&gt;&gt; This is second pragraph. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; This is another blockquote with one paragraph. There is three empty line to seperate two blockquote. In Typora, inputting ‘&gt;’ followed by your quote contents will generate a quote block. Typora will insert a proper ‘&gt;’ or line break for you. Nested block quotes (a block quote inside another block quote) by adding additional levels of ‘&gt;’. ListsInput * list item 1 will create an unordered list - the * symbol can be replace with + or -. Input 1. list item 1 will create an ordered list - their markdown source code is as follows: 123456789## un-ordered list* Red* Green* Blue## ordered list1. Red2. Green3. Blue Task ListTask lists are lists with items marked as either [ ] or [x] (incomplete or complete). For example: 12345- [ ] a task list item- [ ] list syntax required- [ ] normal **formatting**, @mentions, #1234 refs- [ ] incomplete- [x] completed You can change the complete/incomplete state by clicking on the checkbox before the item. (Fenced) Code BlocksTypora only supports fences in GitHub Flavored Markdown. Original code blocks in markdown are not supported. Using fences is easy: Input ``` and press return. Add an optional language identifier after ``` and we’ll run it through syntax highlighting: 1Here's an example: function test() { console.log(“notice the blank line before this function?”);} 123456syntax highlighting:​&#96;&#96;&#96;rubyrequire &#39;redcarpet&#39;markdown &#x3D; Redcarpet.new(&quot;Hello World!&quot;)puts markdown.to_html 123456789101112131415161718192021222324252627### Math BlocksYou can render *LaTeX* mathematical expressions using **MathJax**.To add a mathematical expression, input &#96;$$&#96; and press the &#39;Return&#39; key. This will trigger an input field which accepts *Tex&#x2F;LaTex* source. For example:$$\\mathbf&#123;V&#125;_1 \\times \\mathbf&#123;V&#125;_2 &#x3D; \\begin&#123;vmatrix&#125;\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\\\end&#123;vmatrix&#125;$$In the markdown source file, the math block is a *LaTeX* expression wrapped by a pair of ‘$$’ marks:​&#96;&#96;&#96; markdown$$\\mathbf&#123;V&#125;_1 \\times \\mathbf&#123;V&#125;_2 &#x3D; \\begin&#123;vmatrix&#125;\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\\\end&#123;vmatrix&#125;$$ You can find more details here. TablesInput | First Header | Second Header | and press the return key. This will create a table with two columns. After a table is created, putting focus on that table will open up a toolbar for the table where you can resize, align, or delete the table. You can also use the context menu to copy and add/delete individual columns/rows. The full syntax for tables is described below, but it is not necessary to know the full syntax in detail as the markdown source code for tables is generated automatically by Typora. In markdown source code, they look like: 1234| First Header | Second Header || ------------- | ------------- || Content Cell | Content Cell || Content Cell | Content Cell | You can also include inline Markdown such as links, bold, italics, or strikethrough in the table. Finally, by including colons (:) within the header row, you can define text in that column to be left-aligned, right-aligned, or center-aligned: 12345| Left-Aligned | Center Aligned | Right Aligned || :------------ |:---------------:| -----:|| col 3 is | some wordy text | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 | A colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column. Footnotes123You can create footnotes like this[^footnote].[^footnote]: Here is the *text* of the **footnote**. will produce: You can create footnotes like this[^footnote]. [^footnote]: Here is the text of the footnote. Hover over the ‘footnote’ superscript to see content of the footnote. Horizontal RulesInputting *** or --- on a blank line and pressing return will draw a horizontal line. YAML Front MatterTypora now supports YAML Front Matter. Input --- at the top of the article and then press Return to introduce a metadata block. Alternatively, you can insert a metadata block from the top menu of Typora. Table of Contents (TOC)Input [toc] and press the Return key. This will create a “Table of Contents” section. The TOC extracts all headers from the document, and its contents are updated automatically as you add to the document. Span ElementsSpan elements will be parsed and rendered right after typing. Moving the cursor in middle of those span elements will expand those elements into markdown source. Below is an explanation of the syntax for each span element. LinksMarkdown supports two styles of links: inline and reference. In both styles, the link text is delimited by [square brackets]. To create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example: 123This is [an example](http://example.com/ \"Title\") inline link.[This link](http://example.net/) has no title attribute. will produce: This is an example inline link. (&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;) This link has no title attribute. (&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no) Internal LinksYou can set the href to headers, which will create a bookmark that allow you to jump to that section after clicking. For example: Command(on Windows: Ctrl) + Click This link will jump to header Block Elements. To see how to write that, please move cursor or click that link with ⌘ key pressed to expand the element into markdown source. Reference LinksReference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link: 12345This is [an example][id] reference-style link.Then, anywhere in the document, you define your link label on a line by itself like this:[id]: http://example.com/ \"Optional Title Here\" In Typora, they will be rendered like so: This is an example reference-style link. The implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — for example, to link the word “Google” to the google.com web site, you could simply write: 1234[Google][]And then define the link:[Google]: http://google.com/ In Typora, clicking the link will expand it for editing, and command+click will open the hyperlink in your web browser. URLsTypora allows you to insert URLs as links, wrapped by &lt;brackets&gt;. &lt;i@typora.io&gt; becomes &#x69;&#64;&#x74;&#121;&#112;&#111;&#x72;&#x61;&#x2e;&#105;&#x6f;. Typora will also automatically link standard URLs. e.g: www.google.com. ImagesImages have similar syntax as links, but they require an additional ! char before the start of the link. The syntax for inserting an image looks like this: 123![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg \"Optional title\") You are able to use drag &amp; drop to insert an image from an image file or your web browser. You can modify the markdown source code by clicking on the image. A relative path will be used if the image that is added using drag &amp; drop is in same directory or sub-directory as the document you’re currently editing. If you’re using markdown for building websites, you may specify a URL prefix for the image preview on your local computer with property typora-root-url in YAML Front Matters. For example, input typora-root-url:/User/Abner/Website/typora.io/ in YAML Front Matters, and then ![alt](/blog/img/test.png) will be treated as ![alt](file:///User/Abner/Website/typora.io/blog/img/test.png) in Typora. You can find more details here. EmphasisMarkdown treats asterisks (*) and underscores (_) as indicators of emphasis. Text wrapped with one * or _ will be wrapped with an HTML &lt;em&gt; tag. E.g: 123*single asterisks*_single underscores_ output: single asterisks single underscores GFM will ignore underscores in words, which is commonly used in code and names, like this: wow_great_stuff do_this_and_do_that_and_another_thing. To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it: 1\\*this text is surrounded by literal asterisks\\* Typora recommends using the * symbol. StrongA double * or _ will cause its enclosed contents to be wrapped with an HTML &lt;strong&gt; tag, e.g: 123**double asterisks**__double underscores__ output: double asterisks double underscores Typora recommends using the ** symbol. CodeTo indicate an inline span of code, wrap it with backtick quotes (`). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example: 1Use the `printf()` function. will produce: Use the printf() function. StrikethroughGFM adds syntax to create strikethrough text, which is missing from standard Markdown. ~~Mistaken text.~~ becomes Mistaken text. UnderlinesUnderline is powered by raw HTML. &lt;u&gt;Underline&lt;/u&gt; becomes Underline. Emoji :smile:Input emoji with syntax :smile:. User can trigger auto-complete suggestions for emoji by pressing ESC key, or trigger it automatically after enabling it on preference panel. Also, inputting UTF-8 emoji characters directly is also supported by going to Edit -&gt; Emoji &amp; Symbols in the menu bar (macOS). Inline MathTo use this feature, please enable it first in the Preference Panel -&gt; Markdown Tab. Then, use $ to wrap a TeX command. For example: $\\lim_{x \\to \\infty} \\exp(-x) = 0$ will be rendered as LaTeX command. To trigger inline preview for inline math: input “$”, then press the ESC key, then input a TeX command. You can find more details here. SubscriptTo use this feature, please enable it first in the Preference Panel -&gt; Markdown Tab. Then, use ~ to wrap subscript content. For example: H~2~O, X~long\\ text~/ SuperscriptTo use this feature, please enable it first in the Preference Panel -&gt; Markdown Tab. Then, use ^ to wrap superscript content. For example: X^2^. HighlightTo use this feature, please enable it first in the Preference Panel -&gt; Markdown Tab. Then, use == to wrap highlight content. For example: ==highlight==. HTMLYou can use HTML to style content what pure Markdown does not support. For example, use &lt;span style=&quot;color:red&quot;&gt;this text is red&lt;/span&gt; to add text with red color. Embed ContentsSome websites provide iframe-based embed code which you can also paste into Typora. For example: 1&lt;iframe height='265' scrolling='no' title='Fancy Animated SVG Menu' src='http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'&gt;&lt;/iframe&gt; VideoYou can use the &lt;video&gt; HTML tag to embed videos. For example: 1&lt;video src=\"xxx.mp4\" /&gt; Other HTML SupportYou can find more details here.","tags":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/tags/markdown/"},{"name":"typora","slug":"typora","permalink":"http://yoursite.com/tags/typora/"}]},{"title":"Hello World","date":"2020-04-18T07:12:27.000Z","path":"2020/04/18/Hello World/","text":"之前用wordpress作为个人博客大概用了三年多，这一段时间里因为各种原因也陆陆续续出了一些问题，大规模的迁移有两三次。上学期不知道为什么服务器的数据库突然空了，导致一学期的文章白写了。考虑到维护服务器确实比较耗费精力，于是决定改用github+hexo的方式搭建静态博客…目前看起来还是比较舒服的。 持续建设中…","tags":[]},{"title":"Knapsack and Queries","date":"2018-09-12T02:40:00.000Z","path":"2018/09/12/Knapsack-and-Queries/","text":"来自Petrozavodsk Winter-2018. AtCoder Contest里的D题 题意是说，有$Q$次操作，分为两种，一是添加一个重量为$w$，价值为$v$的物品，保证插入的$w$单增，二是删除当前重量最小的物品。每次操作完之后，都有一个询问，询问能否从已有物品中选出一个子集，使得重量之和在模$M$之后在区间$[l,r]$内，并且价值和最大。 数据范围，$Q\\le 100000,2\\le M\\le 500$。 $Q$和$M$一开始给定，之后每次操作强制在线。 做法：首先背包比较容易看出，但是有动态的插入、删除，这里的动态实际上是队列的模型，队尾入队，队首出队。我们将所有物品分成两部分，右半部分直接组成一个背包，左半部分记录从分界线开始的所有后缀组成的背包状态。那么插入就直接背进右边，删除直接删除左边第一个物品，不影响其他后缀，当左边为空时，就将右边所有物品移到左边，即将分界线移到最右侧，然后对每个后缀求背包。查询时，只需合并一次两边的背包，可以用单调队列优化。 这样每个物品最多只会用来做两次背包，做背包和合并两个背包的时间复杂度都是$O(M)$，所以总的时间复杂度为$O(QM)$。因为要记录左侧每个后缀，所以空间复杂度最多也是$O(QM)$。 代码仿照标程用了一些C++11的东西，比如template+using，swap两个vector，比较实用。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160#include &lt;bits/stdc++.h&gt;using namespace std;class Crypto &#123;public: Crypto() &#123; sm = cnt = 0; seed(); &#125; int decode(int z) &#123; z ^= next(); z ^= (next() &lt;&lt; 8); z ^= (next() &lt;&lt; 16); z ^= (next() &lt;&lt; 22); return z; &#125; void query(long long z) &#123; const long long B = 425481007; const long long MD = 1000000007; cnt++; sm = ((sm * B % MD + z) % MD + MD) % MD; seed(); &#125;private: long long sm; int cnt; uint8_t data[256]; int I, J; void swap_data(int i, int j) &#123; uint8_t tmp = data[i]; data[i] = data[j]; data[j] = tmp; &#125; void seed() &#123; uint8_t key[8]; for (int i = 0; i &lt; 4; i++) &#123; key[i] = (sm &gt;&gt; (i * 8)); &#125; for (int i = 0; i &lt; 4; i++) &#123; key[i+4] = (cnt &gt;&gt; (i * 8)); &#125; for (int i = 0; i &lt; 256; i++) &#123; data[i] = i; &#125; I = J = 0; int j = 0; for (int i = 0; i &lt; 256; i++) &#123; j = (j + data[i] + key[i%8]) % 256; swap_data(i, j); &#125; &#125; uint8_t next() &#123; I = (I+1) % 256; J = (J + data[I]) % 256; swap_data(I, J); return data[(data[I] + data[J]) % 256]; &#125;&#125; c;using Pair=pair&lt;int,int&gt;;using LL=long long;template&lt;class T&gt; using V = vector&lt;T&gt;;const LL INF=(LL)1e18;int mod,Q;V&lt;Pair&gt; rq;V&lt;LL&gt; now,las;V&lt;V&lt;LL&gt;&gt; lq;void init()&#123; now.resize(mod,0); las.resize(mod,0); lq.push_back(V&lt;LL&gt;(mod,0)); for(int i=1;i&lt;mod;++i) lq[0][i]=now[i]=las[i]=-INF;&#125;int add(int x)&#123; return (x&gt;=mod)?x-mod:x;&#125;void packinit(V&lt;LL&gt; &amp;a)&#123; a[0]=0; for(int i=1;i&lt;mod;++i) a[i]=-INF;&#125;void pack(V&lt;LL&gt; &amp;a,const V&lt;LL&gt; &amp;b,int w,int v)&#123; for(int i=0;i&lt;mod;++i) a[i]=b[i]; for(int i=0;i&lt;mod;++i) a[add(i+w)]=max(a[add(i+w)],b[i]+v);&#125;void push(int w,int v)&#123; rq.push_back(Pair(w,v)); pack(las,now,w,v); swap(now,las);&#125;void realloc()&#123; packinit(now); while(!rq.empty()) &#123; lq.push_back(V&lt;LL&gt;(mod)); pack(lq.back(),lq[lq.size()-2],rq.back().first,rq.back().second); rq.pop_back(); &#125;&#125;void pop()&#123; if(lq.size()==1) realloc(); lq.pop_back();&#125;LL ask(const V&lt;LL&gt; &amp;a,const V&lt;LL&gt; &amp;pb,int l,int r)&#123; static int que[1005]; static LL b[1005]; int head=0,tail=0,len=r-l+1; for(int i=0;i&lt;mod;++i) b[i]=b[i+mod]=pb[i]; LL ans=-INF; for(int i=mod-1,j=l;i&gt;=0;--i) &#123; while(head&lt;tail &amp;&amp; que[head]&lt;l-i+mod) ++head; while(j&lt;r-i+mod) &#123; ++j; while(head&lt;tail &amp;&amp; b[que[tail-1]]&lt;=b[j]) --tail; que[tail++]=j; &#125; ans=max(ans,a[i]+b[que[head]]); &#125; if(ans&lt;0) ans=-1; return ans;&#125;int main()&#123; scanf(\"%d%d\",&amp;mod,&amp;Q); init(); while(Q--) &#123; int t,w,v,l,r; scanf(\"%d%d%d%d%d\",&amp;t,&amp;w,&amp;v,&amp;l,&amp;r); t=c.decode(t); w=c.decode(w); v=c.decode(v); l=c.decode(l); r=c.decode(r); if(t==1) push(w%mod,v); else pop(); LL ans=ask(lq.back(),now,l,r); c.query(ans); printf(\"%lld\\n\",ans); &#125; return 0;&#125;","tags":[{"name":"背包","slug":"背包","permalink":"http://yoursite.com/tags/%E8%83%8C%E5%8C%85/"},{"name":"单调队列","slug":"单调队列","permalink":"http://yoursite.com/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"}]},{"title":"超实用！Stern-Brocot tree总结奉上","date":"2018-09-11T13:07:00.000Z","path":"2018/09/11/超实用！Stern-Brocot-tree总结奉上/","text":"关于Stern-Brocot tree网上的资料较少（后记：实际上并不少，只是竞赛中讨论的不多），能够找到的资源有Wikipedia以及《具体数学》上的介绍，这里大概总结一下这个树形结构的性质。 Stern-Brocot tree: Stern-Brocot tree构成了一个无限的二叉排序树，可以将所有的正有理数从小到大列举出来。 构造方法可以理解为：先在左边写上$\\frac{0}{1}$，右边写上$\\frac{1}{0}$，代表零和正无穷，然后分子、分母分别相加，得到$\\frac{1}{1}$，写在中间，之后每次把当前层复制到下一层，然后对于下一层相邻两个有理数之间还是分子分母分别相加，得到新的有理数，写在两者中间，重复这个操作就可以无限的写下去，进而得到所有的有理数。树形结构的获得见上图。 记树中的一个节点$\\frac{y}{x}$，它是由$\\frac{L_m}{L_n},\\frac{R_m}{R_n}$这两个数产生的，那么可以发现： 1.$\\frac{L_m}{L_n}$是位于左上方且离它最近的祖先，$\\frac{R_m}{R_n}$是位于右上方且离它最近的祖先。 2.$gcd(x,y)=1$。 3.$R_mL_n-L_mR_n=1$。 4.以$\\frac{y}{x}$为根的子树中的所有数都落在区间$(\\frac{L_m}{L_n},\\frac{R_m}{R_n})$中 找一个数$\\frac{b}{a}$在树中的位置可以通过在树上二分，但如果一步一步走的话，时间复杂度关于a,b是线性的，比如找$\\frac{1}{10^9}$，需要从根一直往左走$10^9-1$步。但是*可以证明，在树上“拐弯”的次数是$O(log)$的 *，可以与辗转相除法联系起来，详见这个视频。这样每次直走的步数我们可以列不等式$O(1)$求出，拐弯的过程递归下去就好了。也可以用具体数学书上的结论。 题目列表：1.Alice, Bob, Oranges and Apples题意：懒得叙述了，总之把在Stern-Brocot tree上走的过程抽象了一下，简化的题意就是给一个分数，输出从根到该点的路径。 123456789101112131415161718192021222324#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;int main()&#123; ll x,y; while(scanf(\"%lld%lld\",&amp;x,&amp;y)!=EOF)&#123; if(__gcd(x,y)&gt;1)&#123; puts(\"Impossible\"); continue; &#125; while(x!=y)&#123; if(x&lt;y) &#123; ll t=(y-1)/x; y-=t*x; printf(\"%lldB\",t); &#125; else &#123; ll t=(x-1)/y; x-=t*y; printf(\"%lldA\",t); &#125; &#125; puts(\"\"); &#125;&#125; 2. 2017 CCPC 哈尔滨 Cow`s Segment题意：给两个高精度浮点数$a,b$，求最小的正整数$x$使得区间$[ax,bx)$包含整数（注，原题面有误，真实的数据是左闭右开的）。 思路：设$ax\\le y&lt;bx$，即$a\\le \\frac{y}{x}&lt;b$，就按上面说的，在Stern-Brocot tree上二分，直到找到第一个符合条件的点，同时就是x的最小值。 (Java写起来太长了 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576import java.io.*;import java.util.*;import java.math.*;public class Main&#123; final static BigInteger one=BigInteger.ONE; final static BigInteger zero=BigInteger.ZERO; final static BigInteger base=BigInteger.valueOf(10); final static int LEN=300; static BigInteger ans; public static BigInteger trans(String s)&#123; int len=s.length(); int num=LEN,flag=0; BigInteger ans=BigInteger.valueOf(0); for(int i=0;i&lt;len;++i) &#123; if(s.charAt(i)=='.') flag=1; else &#123; num-=flag; int now=s.charAt(i)-'0'; ans=ans.multiply(base).add(BigInteger.valueOf(now)); &#125; &#125; for(int i=1;i&lt;=num;++i) ans=ans.multiply(base); return ans; &#125; public static void dfs(BigInteger a,BigInteger b,BigInteger c,BigInteger d, BigInteger la,BigInteger lb,BigInteger ra,BigInteger rb, BigInteger x,BigInteger y) &#123; BigInteger le=b.multiply(x).subtract(a.multiply(y)); BigInteger ri=d.multiply(x).subtract(c.multiply(y)); if(le.compareTo(zero)&lt;=0 &amp;&amp; ri.compareTo(zero)&gt;0) &#123; ans=x; return ; &#125; BigInteger k,tem; if(le.compareTo(zero)&gt;0) &#123; tem=a.multiply(rb).subtract(b.multiply(ra)); k=le.add(tem.subtract(one)).divide(tem); dfs(a,b,c,d, x.add(k.subtract(one).multiply(ra)),y.add(k.subtract(one).multiply(rb)), ra,rb, x.add(k.multiply(ra)),y.add(k.multiply(rb))); &#125; else &#123; ri=ri.negate(); tem=d.multiply(la).subtract(c.multiply(lb)); k=ri.divide(tem).add(one); dfs(a,b,c,d, la,lb, x.add(k.subtract(one).multiply(la)),y.add(k.subtract(one).multiply(lb)), x.add(k.multiply(la)),y.add(k.multiply(lb))); &#125; &#125; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); BigInteger pow=base.pow(LEN); BigInteger a,b; int T=cin.nextInt(); for(int cas=1;cas&lt;=T;++cas) &#123; String s=cin.next(),t=cin.next(); a=trans(s); b=trans(t); dfs(pow,a,pow,b,one,zero,zero,one,one,one); System.out.println(ans); &#125; &#125;&#125; 3.Petrozavodsk Winter-2018. AtCoder Contest C Construct Point题意：二维平面上给整点三角形的三个顶点坐标，判断三角形内部（不含边界）是否存在整点，如果有输出任意一个。 思路：先考虑这么一个子问题，在直线$y=\\frac{b}{a}x$和$y=\\frac{d}{c}x$之间找一个整点，范围$0&lt;x\\le D$，那么还是$\\frac{b}{a}x &lt; y&lt;\\frac{d}{c}x$，得到$\\frac{b}{a}&lt;\\frac{y}{x}&lt;\\frac{d}{c}$，找到最小的x和D比较即可。对于任意三角形的话，通过分割，平移，对称的变换就能规约成上述子问题啦。 代码略。","tags":[{"name":"Stern-Brocot tree","slug":"Stern-Brocot-tree","permalink":"http://yoursite.com/tags/Stern-Brocot-tree/"}]},{"title":"线段树合并","date":"2018-09-05T09:31:00.000Z","path":"2018/09/05/线段树合并/","text":"适用条件：动态开点的(权值)线段树。 关于时间复杂度的结论： 每次合并的代价是两棵树的公共节点数。 若有n棵含有单个元素的树，经过n-1次merge操作，将他们合并成一棵树的代价是$O(nlogn)$或$O(nlogC)$的 单次merge操作开销可大可小，均摊下一次就是一个log的。 关于空间复杂度，普通版本是$O(nlogn)$的。 直接给出代码，merge操作十分简洁： 12345678910111213141516void insert(int &amp;x,int y,int l,int r)&#123; ++sum[x=++tot]; if(l==r) return; int mid=l+r&gt;&gt;1; if(y&lt;=mid) insert(ls[x],y,l,mid); else insert(rs[x],y,mid+1,r);&#125;int merge(int x,int y)&#123; if(!x||!y) return x+y; sum[x]=sum[x]+sum[y]; ls[x]=merge(ls[x],ls[y]); rs[x]=merge(rs[x],rs[y]); return x;&#125; 题目1.BZOJ 2212: [Poi2011]Tree Rotations递归的给一颗二叉树，只有叶子有权值，对于每个非叶节点可以交换左右子树，使遍历后构成的序列逆序对最小。 对于一个子树，逆序对来自三部分，一个完全在左子树，一个完全在右子树，还有就是跨越左右子树的逆序对，可以发现交换左右子树的操作只会改变跨越部分的贡献，这里可以在线段树合并过程中求出逆序对的个数。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define N 600010int n,m;int son[N][2];int root[N],rt;int tot,ls[N*20],rs[N*20],sum[N*20];ll ans0,ans1,ans;void insert(int &amp;x,int y,int l,int r)&#123; ++sum[x=++tot]; if(l==r) return; int mid=l+r&gt;&gt;1; if(y&lt;=mid) insert(ls[x],y,l,mid); else insert(rs[x],y,mid+1,r);&#125;void read(int &amp;x)&#123; x=++m; int y; scanf(\"%d\",&amp;y); if(y) &#123; insert(root[x],y,1,n); return; &#125; read(son[x][0]); read(son[x][1]);&#125;int merge(int x,int y)&#123; if(!x||!y) return x+y; ans0+=1LL*sum[rs[x]]*sum[ls[y]]; ans1+=1LL*sum[rs[y]]*sum[ls[x]]; sum[x]=sum[x]+sum[y]; ls[x]=merge(ls[x],ls[y]); rs[x]=merge(rs[x],rs[y]); return x;&#125;void solve(int x)&#123; if(!son[x][0] &amp;&amp; !son[x][1]) return; solve(son[x][0]); solve(son[x][1]); ans0=ans1=0; root[x]=merge(root[son[x][0]],root[son[x][1]]); ans+=min(ans0,ans1);&#125;int main()&#123; scanf(\"%d\",&amp;n); read(rt); solve(rt); printf(\"%lld\\n\",ans); return 0;&#125; 2.BZOJ 2733: [HNOI2012]永无乡每个元素有点权，支持合并两个集合，查询一个集合内第k小的元素。 之前的做法是启发式合并+平衡树，每个元素最多插入$O(logn)$次，插入一次$O(logn)$，所以总的时间复杂度$O(nlog^{2}n)$。 用线段树合并就可以做到$O(nlogn)$了，查询非常简单。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include&lt;bits/stdc++.h&gt;using namespace std;#define N 100010int tot;int sum[N*20],ls[N*20],rs[N*20];int fa[N],siz[N],root[N],id[N],val[N];int n,m,q;void insert(int &amp;x,int y,int l,int r)&#123; ++sum[x=++tot]; if(l==r) return; int mid=l+r&gt;&gt;1; if(y&lt;=mid) insert(ls[x],y,l,mid); else insert(rs[x],y,mid+1,r);&#125;int merge(int x,int y)&#123; if(!x||!y) return x+y; sum[x]=sum[x]+sum[y]; ls[x]=merge(ls[x],ls[y]); rs[x]=merge(rs[x],rs[y]); return x;&#125;int ask(int x,int y,int l,int r)&#123; if(l==r) return l; int mid=l+r&gt;&gt;1; if(y&lt;=sum[ls[x]]) return ask(ls[x],y,l,mid); else return ask(rs[x],y-sum[ls[x]],mid+1,r);&#125;int getfa(int x)&#123; return x==fa[x]?x:fa[x]=getfa(fa[x]);&#125;void Union(int x,int y)&#123; x=getfa(x);y=getfa(y); if(x==y) return; if(siz[x]&gt;siz[y]) swap(x,y); fa[x]=y; siz[y]+=siz[x]; root[y]=merge(root[x],root[y]);&#125;int Ask(int x,int y)&#123; x=getfa(x); if(siz[x]&lt;y) return -1; return id[ask(root[x],y,1,n)];&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); tot=0; for(int i=1;i&lt;=n;++i) &#123; scanf(\"%d\",&amp;val[i]);id[val[i]]=i; fa[i]=i; siz[i]=1; insert(root[i],val[i],1,n); &#125; for(int i=1;i&lt;=m;++i) &#123; int x,y; scanf(\"%d%d\",&amp;x,&amp;y); Union(x,y); &#125; scanf(\"%d\",&amp;q); while(q--) &#123; char opt[3]; int x,y; scanf(\"%s%d%d\",opt,&amp;x,&amp;y); if(opt[0]=='Q') printf(\"%d\\n\",Ask(x,y)); else Union(x,y); &#125; return 0;&#125; 3.2018 南京网络赛 H set首先这个题不是线段树，而是trie树，我们把每个数二进制从低位到高位插入trie，维护子树中插入的数的个数，合并类似线段树合并，修改操作比较巧妙，+1就相当于最低位+1，也就是最低位0变1，1变0，那么交换左右子树即可，进位的话就是进入（交换后）的左子树继续交换左右子树，递归下去。这样总的时间复杂度就是$O(nlogC)$。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293#include&lt;bits/stdc++.h&gt;using namespace std;#define N 600010int tot;int sum[N*32],son[N*32][2];int fa[N],root[N];int n,m;void read(int &amp;x)&#123; char ch; while(!isdigit(ch=getchar())); x=ch-'0'; while(isdigit(ch=getchar())) x=x*10+ch-'0';&#125;int insert(int y)&#123; int now=++tot; int res=now; ++sum[now]; for(int i=0;i&lt;32;++i,y&gt;&gt;=1) &#123; son[now][y&amp;1]=++tot; ++sum[now=son[now][y&amp;1]]; &#125; return res;&#125;int merge(int x,int y)&#123; if(!x||!y) return x+y; sum[x]=sum[x]+sum[y]; son[x][0]=merge(son[x][0],son[y][0]); son[x][1]=merge(son[x][1],son[y][1]); return x;&#125;void change(int x)&#123; if(x==0) return; swap(son[x][0],son[x][1]); change(son[x][0]);&#125;int ask(int x,int k,int y)&#123; for(int i=0;i&lt;k;++i,y&gt;&gt;=1) x=son[x][y&amp;1]; return sum[x];&#125;int getfa(int x)&#123; return x==fa[x]?x:fa[x]=getfa(fa[x]);&#125;void Union(int x,int y)&#123; x=getfa(x);y=getfa(y); if(x==y) return; fa[x]=y; root[y]=merge(root[x],root[y]);&#125;int main()&#123; read(n);read(m); for(int i=1;i&lt;=n;++i) &#123; int y;read(y); root[i]=insert(y); fa[i]=i; &#125; while(m--) &#123; int opt; scanf(\"%d\",&amp;opt); if(opt==1) &#123; int x,y; scanf(\"%d%d\",&amp;x,&amp;y); Union(x,y); &#125; else if(opt==2) &#123; int x; scanf(\"%d\",&amp;x); change(root[getfa(x)]); &#125; else &#123; int x,k,y; scanf(\"%d%d%d\",&amp;x,&amp;k,&amp;y); printf(\"%d\\n\",ask(root[getfa(x)],k,y)); &#125; &#125; return 0;&#125;","tags":[{"name":"线段树","slug":"线段树","permalink":"http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"}]},{"title":"2017 西安网络赛 A题 TREE","date":"2018-08-31T06:45:00.000Z","path":"2018/08/31/2017-西安网络赛-A题-TREE/","text":"最近想起来这么一道题，当时q神没rush出来，赛后几分钟AC掉的 题目链接：https://nanti.jisuanke.com/t/17114 题意是树上有$N$个点，每个点的点权是一个01矩阵，有$Q$次询问，每次问树上从x到y这条路径上的矩阵依次乘起来的结果是多少(模2意义下)。数据范围$N\\le 3000,Q\\le 30000$，矩阵大小$64\\times 64$。 首先这里的模2意义下的矩阵乘法可以用bitset优化，每行一个bitset，每列一个bitset，这样做乘法就是左行右列and起来，然后count一下1的个数，复杂度$O({64}^2)$。 注意到这道题中维护的信息只能合并，不能做“减法”，也就是不能使用逆矩阵，因为逆矩阵不一定存在。 一个显然的暴力思路是就是树上倍增，但很不幸，时间复杂度$O({64}^2QlogN)$达到了$1.4\\times 10^9$肯定会超时。 我们用离线求LCA的方法，就可以把log去掉了。这里要注意题目中是点权，我们要先把点权看成边权，然后再把x与y的LCA处的矩阵乘上。另外，矩阵乘法是有顺序的，所以一条链，从上到下与从下到上乘起来是不一样的，所以要用两个并查集分别维护。忽略并查集的话，最终总的时间复杂度为$O({64}^2N+{64}^2Q)$。 这个题实际上还有树分治的写法，改天补一下。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177#include&lt;bits/stdc++.h&gt;using namespace std;#define N 30010typedef unsigned long long ull;typedef long long ll;const ll mod=19260817;const ll mod2=mod*mod;int p19[66],p26[66];int _e,_p[N],_last[N&lt;&lt;1],_head[N&lt;&lt;1],_w[N&lt;&lt;1],_dir[N&lt;&lt;1];vector&lt;int&gt; edge[N];int fa[2][N],lca[N];bool vis[N];int n,m;ull seed;struct node&#123; int x,i,o;&#125;;vector&lt;node&gt; que[N];struct matrix64&#123; bitset&lt;64&gt; mx[64],my[64]; matrix64() &#123; for(int i=0;i&lt;64;++i) mx[i].reset(),my[i].reset(); &#125; void clear() &#123; for(int i=0;i&lt;64;++i) mx[i].reset(),my[i].reset(); &#125; void init() &#123; for(int i=0;i&lt;64;++i) mx[i].reset(),my[i].reset(); for(int i=0;i&lt;64;++i) mx[i][i]=my[i][i]=1; &#125; void set(int x,int y) &#123; mx[x][y]=1; my[y][x]=1; &#125; friend matrix64 operator *(const matrix64 &amp;a,const matrix64 &amp;b) &#123; matrix64 c; bitset&lt;64&gt; tmp; for(int i=0;i&lt;64;++i) for(int j=0;j&lt;64;++j) &#123; tmp=a.mx[i]&amp;b.my[j]; if(tmp.count()&amp;1) &#123; c.mx[i][j]=1; c.my[j][i]=1; &#125; &#125; return c; &#125;&#125; A[N],dis[2][N],ans[2][N];void addquery(int x,int y,int c,int o)&#123; _head[++_e]=y;_w[_e]=c;_dir[_e]=o; _last[_e]=_p[x]; _p[x]=_e;&#125;int getfa(int x,int o)&#123; if(x==fa[o][x]) return x; int rt=getfa(fa[o][x],o); if(o==0) dis[o][x]=dis[o][x]*dis[o][fa[o][x]]; else dis[o][x]=dis[o][fa[o][x]]*dis[o][x]; return fa[o][x]=rt;&#125;void dfs(int x,int pre)&#123; fa[0][x]=x;fa[1][x]=x; dis[0][x].init();dis[1][x].init(); vis[x]=true; for(int i=0;i&lt;edge[x].size();++i) &#123; int y=edge[x][i]; if(y!=pre) &#123; dfs(y,x); fa[0][y]=x;fa[1][y]=x; dis[0][y]=A[y];dis[1][y]=A[y]; &#125; &#125; for(int j=_p[x];j;j=_last[j]) &#123; int y=_head[j]; int i=_w[j],o=_dir[j]; if(vis[y]) &#123; lca[i]=getfa(y,o); ans[o][i]=dis[o][y]; que[lca[i]].push_back(node&#123;x,i,o^1&#125;); &#125; &#125; for(auto &amp;pr:que[x]) &#123; getfa(pr.x,pr.o); ans[pr.o][pr.i]=dis[pr.o][pr.x]; &#125;&#125;int calc(matrix64 &amp;tmp)&#123; ll now=0; for(int j=0;j&lt;64;++j) for(int k=0;k&lt;64;++k) if(tmp.mx[j][k]) &#123; now=(now+1LL*p19[j+1]*p26[k+1]); if(now&gt;=mod2) now-=mod2; &#125; return now%mod;&#125;int main()&#123; p19[0]=p26[0]=1; for(int i=1;i&lt;=64;++i) &#123; p19[i]=19LL*p19[i-1]%mod; p26[i]=26LL*p26[i-1]%mod; &#125; while(scanf(\"%d%d\",&amp;n,&amp;m)!=EOF) &#123; _e=0; for(int i=1;i&lt;=n;++i) &#123; _p[i]=0; edge[i].clear(); que[i].clear(); &#125; for(int i=1;i&lt;n;++i) &#123; int x,y; scanf(\"%d%d\",&amp;x,&amp;y); edge[x].push_back(y); edge[y].push_back(x); &#125; scanf(\"%llu\",&amp;seed); for(int i=1;i&lt;=n;++i) &#123; A[i].clear(); for(int j=0;j&lt;64;++j) &#123; seed^=seed*seed+15; for(int k=0;k&lt;64;++k) if((seed&gt;&gt;k)&amp;1) A[i].set(j,k); &#125; &#125; for(int i=1;i&lt;=m;++i) &#123; int x,y; scanf(\"%d%d\",&amp;x,&amp;y); addquery(x,y,i,1); addquery(y,x,i,0); ans[0][i].init(); ans[1][i].init(); &#125; for(int i=1;i&lt;=n;++i) vis[i]=false; dfs(1,0); for(int i=1;i&lt;=m;++i) &#123; matrix64 tmp=ans[0][i]*A[lca[i]]; tmp=tmp*ans[1][i]; printf(\"%d\\n\",calc(tmp)); &#125; &#125;&#125;","tags":[{"name":"LCA","slug":"LCA","permalink":"http://yoursite.com/tags/LCA/"},{"name":"bitset","slug":"bitset","permalink":"http://yoursite.com/tags/bitset/"}]},{"title":"高维偏序问题","date":"2018-08-30T11:55:00.000Z","path":"2018/08/30/高维偏序问题/","text":"最近做了几道高维偏序的简单题。 对于这类题目一般有三种通用方法，一是cdq分治，维数越多嵌套次数就越多，总体来说思路就是对时间分治，每次统计出左半区间的贡献点对右半区间的询问点的贡献，这样对于每个询问点来说，它前面的所有对它造成影响的点就都会被算到。二是用bitset优化暴力，应该只能处理计数问题，但优点是好写，适合做高维偏序。三是KDtree，emmmm，这个没怎么写过，多校训练十分艰难的写过一次，通过了90%的数据然后TLE了。 1.LOJ#112 三维偏序计数题，对其中一维排序后，cdq分治套树状数组，时间复杂度$O(nlog^{2}n)$。 2.COGS 2479[HZOI 2016] 偏序计数题，四维偏序，cdq分治套cdq分治套树状数组，时间复杂度$O(nlog^{3}n)$。 怎么理解这个分治套分治呢。假设属性为a,b,c，第一次分治的时候我们将区间[l,mid]的点标记成贡献点，[mid+1,r]的点标记成询问点，然后区间[l,r]按a属性排序，消去a的影响，这样问题就变成了有n次操作，每次要么插入一个点(b,c)，要么查询之前插入的点中有多少点在(b,c)左下方，这样问题就降了一维化成了三维偏序了。 3.COGS 2580 [HZOI 2015]偏序 II计数题，五维偏序，在上一题的基础上外面再套一次cdq分治，时间复杂度十分感人$O(nlog^{4}n)$。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define N 100010struct node&#123; int w,x,y,z; bool t,s;&#125; a[N],b[N],c[N],d[N];int n;ll ans;struct BIT&#123; int c[N]; void add(int x,int y) &#123; for(; x&lt;=n; x+=x&amp;(-x)) c[x]+=y; &#125; int ask(int x) &#123; int ans=0; for(; x; x-=x&amp;(-x)) ans+=c[x]; return ans; &#125;&#125; bit;void cdq3(int l,int r)&#123; if(l==r) return; int mid=(l+r)&gt;&gt;1; cdq3(l,mid); cdq3(mid+1,r); int i=l,j=mid+1,k=l; while(i&lt;=mid &amp;&amp; j&lt;=r) &#123; if(c[i].y&lt;c[j].y) &#123; if(!c[i].s &amp;&amp; !c[i].t) bit.add(c[i].z,1); d[k++]=c[i++]; &#125; else &#123; if(c[j].s &amp;&amp; c[j].t) ans+=bit.ask(c[j].z); d[k++]=c[j++]; &#125; &#125; while(i&lt;=mid) &#123; if(!c[i].s &amp;&amp; !c[i].t) bit.add(c[i].z,1); d[k++]=c[i++]; &#125; while(j&lt;=r) &#123; if(c[j].s &amp;&amp; c[j].t) ans+=bit.ask(c[j].z); d[k++]=c[j++]; &#125; for(int i=l; i&lt;=mid; ++i) if(!c[i].s &amp;&amp; !c[i].t) bit.add(c[i].z,-1); for(int i=l; i&lt;=r; ++i) c[i]=d[i];&#125;void cdq2(int l,int r)&#123; if(l==r) return; int mid=(l+r)&gt;&gt;1; cdq2(l,mid); cdq2(mid+1,r); int i=l,j=mid+1,k=l; while(i&lt;=mid &amp;&amp; j&lt;=r) &#123; if(b[i].x&lt;b[j].x) c[k]=b[i++],c[k++].s=false; else c[k]=b[j++],c[k++].s=true; &#125; while(i&lt;=mid) c[k]=b[i++],c[k++].s=false; while(j&lt;=r) c[k]=b[j++],c[k++].s=true; for(int i=l; i&lt;=r; ++i) b[i]=c[i]; cdq3(l,r);&#125;void cdq1(int l,int r)&#123; if(l==r) return; int mid=(l+r)&gt;&gt;1; cdq1(l,mid); cdq1(mid+1,r); int i=l,j=mid+1,k=l; while(i&lt;=mid &amp;&amp; j&lt;=r) &#123; if(a[i].w&lt;a[j].w) b[k]=a[i++],b[k++].t=false; else b[k]=a[j++],b[k++].t=true; &#125; while(i&lt;=mid) b[k]=a[i++],b[k++].t=false; while(j&lt;=r) b[k]=a[j++],b[k++].t=true; for(int i=l; i&lt;=r; ++i) a[i]=b[i]; cdq2(l,r);&#125;int main()&#123; while(scanf(\"%d\",&amp;n)!=EOF) &#123; for(int i=1; i&lt;=n; i++)scanf(\"%d\",&amp;a[i].w); for(int i=1; i&lt;=n; i++)scanf(\"%d\",&amp;a[i].x); for(int i=1; i&lt;=n; i++)scanf(\"%d\",&amp;a[i].y); for(int i=1; i&lt;=n; i++)scanf(\"%d\",&amp;a[i].z); ans=0; cdq1(1,n); printf(\"%lld\\n\",ans); &#125;&#125; 4.COGS 2639. [HZOI 2015] 偏序++计数题，七维偏序。只能bitset了，每个元素开一个bitset表示哪些点比它小，一维一维的考虑，从小到大枚举值，然后对每个元素and一下就行了。时间复杂度$O(kn^2/64)$ 123456789101112131415161718192021#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int N=40005;bitset&lt;N&gt; bs[N],tmp;int n,k,ans;int pos[N],a[N];int main()&#123; scanf(\"%d%d\",&amp;n,&amp;k); for(int i=1;i&lt;=n;++i) bs[i]=bs[i-1],bs[i][i-1]=1; while(k--) &#123; for(int i=1;i&lt;=n;++i) scanf(\"%d\",a+i),pos[a[i]]=i; tmp.reset(); for(int i=1;i&lt;=n;++i) bs[pos[i]]&amp;=tmp,tmp[pos[i]]=1; &#125; ll ans=0; for(int i=1;i&lt;=n;++i) ans+=bs[i].count(); printf(\"%lld\\n\",ans);&#125; 5.SPOJ LIS2 Another Longest Increasing Subsequence Problem求最优解，即最长上升子序列的长度，每个元素有两个属性。回忆一下一个属性的话，我们可以用树状数组求前缀最大值的方法优化dp的转移，再加一维就用cdq分治套一下就行了。 与之前计数题不同的地方在于，计数题中贡献对询问的影响是独立的，没有先后顺序的问题，但是做这个dp的过程就必须是从前往后了，比如说序列1,2,3,4，如果用3去更新4的话，3的dp值就必须在之前就已经算出来是3。稍微改一下分治的顺序就可以了，先递归到[l,mid]，然后用左半区间更新右半区间的dp值，然后递归到右半区间。 6.2018 牛客网暑期ACM多校训练营（第九场）Longest Common Subsequence求四个序列的最长公共子序列，保证值范围1-n，前三个序列中每一种值出现次数不超过2次。 先考虑四个序列都是排列的情况，假设对于值x来说pa[x],pb[x],pc[x],pd[x]在四个序列中的位置，那么最长公共子序列就转化成了求四维偏序的最长链。对于这个题目我们可以2的3次方枚举每个值的位置三元组，这样总点数就是8n的，还是求四维偏序的最长链。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int N=80005;int n;int dp[N],vis[N];int pos[N][3][2];struct node&#123; int x,y,z,t,o; void show() &#123; printf(\"%d:(%d,%d,%d) %d\\n\",o,x,y,z,dp[o]); &#125;&#125; a[N],b[N],c[N];bool cmpx(const node &amp;a,const node &amp;b)&#123; if(a.x!=b.x) return a.x&lt;b.x; return a.y&gt;b.y;&#125;bool cmpy(const node &amp;a,const node &amp;b)&#123; if(a.y!=b.y) return a.y&lt;b.y; return a.z&gt;b.z;&#125;struct BIT&#123; int c[N]; void change(int x,int y) &#123; for(; x&lt;=n; x+=x&amp;(-x)) c[x]=max(c[x],y); &#125; void clear(int x) &#123; for(; x&lt;=n; x+=x&amp;(-x)) c[x]=0; &#125; int ask(int x) &#123; int ans=0; for(; x; x-=x&amp;(-x)) ans=max(ans,c[x]); return ans; &#125;&#125; bit;void cdq2(int l,int r)&#123; if(l==r) return; int mid=(l+r)&gt;&gt;1; cdq2(l,mid); for(int i=l; i&lt;=r; ++i) c[i]=b[i]; sort(c+l,c+mid+1,cmpy); sort(c+mid+1,c+r+1,cmpy); int i=l,j=mid+1; for(; j&lt;=r; ++j) &#123; for(; i&lt;=mid &amp;&amp; c[i].y&lt;c[j].y; ++i) if(c[i].t==0) bit.change(c[i].z,dp[c[i].o]); if(c[j].t==1) dp[c[j].o]=max(dp[c[j].o],bit.ask(c[j].z-1)+1); &#125; for(i=l; i&lt;=mid; ++i) if(c[i].t==0) bit.clear(c[i].z); cdq2(mid+1,r);&#125;void cdq1(int l,int r)&#123; if(l==r) return; int mid=(l+r)&gt;&gt;1; cdq1(l,mid); for(int i=l; i&lt;=r; ++i) b[i]=a[i],b[i].t=(i&gt;mid); sort(b+l,b+r+1,cmpx); cdq2(l,r); cdq1(mid+1,r);&#125;int main()&#123; scanf(\"%d\",&amp;n); for(int i=0; i&lt;3; ++i) &#123; memset(vis,0,sizeof(vis)); for(int j=1; j&lt;=n; ++j) &#123; int x; scanf(\"%d\",&amp;x); if(!vis[x]) pos[x][i][0]=pos[x][i][1]=j,vis[x]=1; else pos[x][i][1]=j; &#125; &#125; int cnt=0; for(int i=1; i&lt;=n; ++i) &#123; int x; scanf(\"%d\",&amp;x); if(!pos[x][0][0]||!pos[x][1][0]||!pos[x][2][0]) continue; for(int j=7; j&gt;=0; --j) &#123; ++cnt; a[cnt].o=cnt; a[cnt].x=pos[x][0][j&amp;1]; a[cnt].y=pos[x][1][j&gt;&gt;1&amp;1]; a[cnt].z=pos[x][2][j&gt;&gt;2&amp;1]; a[cnt].t=0; //a[cnt].show(cnt); dp[cnt]=1; &#125; &#125; cdq1(1,cnt); int ans=0; for(int i=1; i&lt;=cnt; ++i) ans=max(ans,dp[i]); printf(\"%d\\n\",ans); return 0;&#125;/*(1,1,2)(2,2,3)(3,4,4)(4,5,5)*/","tags":[{"name":"偏序","slug":"偏序","permalink":"http://yoursite.com/tags/%E5%81%8F%E5%BA%8F/"}]},{"title":"偏序集","date":"2018-08-29T08:47:00.000Z","path":"2018/08/29/偏序集/","text":"偏序关系首先回顾一下偏序，集合X上的偏序是一个自反、反对称且传递的关系 如果对于X中所有的x，都有x R x，则R是自反的 如果对于X中所有x和y，若x R y和y R x同时成立则x=y，则R是反对称的 对于X中所有的x，y和z，只要x R y且y R z，就有x R z，则R是传递的 通常用$\\le$取代R来表示偏序关系，常见的偏序关系有集合的包含，小于等于，整除等。$&lt;$表示严格偏序（反自反，反对称，传递），比如严格包含于，小于关系等。 可比与不可比对于X中x和y，如果x R y或者y R x，则说x和y是可比的，否则就说x和y不可比 极小元极大元对于偏序集X中的元素a，不存在满足x&lt;a的元素x，则a是偏序集的一个极小元。对于偏序集X中的元素b，不存在满足b&lt;y的元素y，则b是偏序集的一个极大元。 链与反链设$(X,\\le)$是有限偏序集，链是X的一个子集C，它的每一对元素都可比，因此链C是X的一个全序子集，链的元素可以被线性排序。反链是X的一个子集A，他的任意两个元素都不可比。 由定义可知 链的子集也是链，反链的子集还是反链。 如果A是一个反链而C是一个链，则$\\left| A\\cap C\\right|\\le 1$ 重要定理定理1 设$(X,\\le)$是有限偏序集，设r是链的最大大小。则X可以被划分成r个反链，但不能划分成少于r个反链 定理2 (Dilworth定理) 设$(X,\\le)$是有限偏序集，设m是反链的最大大小。则X可以被划分成m个链，但不能划分成少于m个链 定理1的证明大概是每次找到偏序集的极小元集合，然后删掉，这样实际上得到的r个极小元集合就是划分成r个反链的方案。定理2是定理1的“对偶”定理，但是证明就比较复杂了。 题目1.导弹拦截最经典的题目，把一个数列划分成最少的最长不升子序列的数目就等于这个数列的最长上升子序列的长度。这里的偏序关系i R j，可以理解为i&lt;j且a[i]&lt;a[j]。 2.2017 ICPC Nanning The Maximum Unreachable Node Set求一个DAG的最大的两两不可达的点集大小。 需要先做floyd，然后转化为求最小不相交路径覆盖就可以了，每个点拆成两个点，形成一个左右各n个点的二分图，对于一条边(i,j)左边的i连向右边的j，最终答案为n减去二分图最大匹配的数量。","tags":[{"name":"偏序","slug":"偏序","permalink":"http://yoursite.com/tags/%E5%81%8F%E5%BA%8F/"}]},{"title":"类欧几里得算法","date":"2018-08-28T09:41:00.000Z","path":"2018/08/28/类欧几里得算法/","text":"推导有时候需要快速计算如下式子(比如数据范围都是1e9) $$f(a,b,c,n)=\\sum_{i=0}^{n}\\lfloor\\frac{ai+b}{c}\\rfloor$$ $$g(a,b,c,n)=\\sum_{i=0}^{n}i\\lfloor\\frac{ai+b}{c}\\rfloor$$ $$h(a,b,c,n)=\\sum_{i=0}^{n} {\\lfloor\\frac{ai+b}{c}\\rfloor}^2$$ 先推导一下$f(a,b,c,n)$，分两种情况 1.当$a\\ge c$或$b \\ge c$时， $$f(a,b,c,n)=f(a%c,b%c,c,n)+\\frac{n(n+1)}{2}\\lfloor\\frac{a}{c}\\rfloor+(n+1)\\lfloor\\frac{b}{c}\\rfloor$$ 2.当$a&lt;c$且$b&lt;c$时，令$m=\\lfloor\\frac{an+b}{c}\\rfloor$ $$f(a,b,c,n)=\\sum_{i=0}^{n}\\sum_{j=1}^{m}\\left[\\lfloor\\frac{ai+b}{c}\\rfloor\\ge j\\right]$$ $$f(a,b,c,n)=\\sum_{i=0}^{n}\\sum_{j=0}^{m-1}\\left[\\lfloor\\frac{ai+b}{c}\\rfloor\\ge j+1\\right]$$ $$f(a,b,c,n)=\\sum_{i=0}^{n}\\sum_{j=0}^{m-1}\\left[ai\\ge jc+c-b\\right]$$ $$f(a,b,c,n)=\\sum_{i=0}^{n}\\sum_{j=0}^{m-1}\\left[ai&gt; jc+c-b-1\\right]$$ $$f(a,b,c,n)=\\sum_{i=0}^{n}\\sum_{j=0}^{m-1}\\left[i&gt;\\frac{jc+c-b-1}{a}\\right]$$ 最后交换求和 $$f(a,b,c,n)=\\sum_{j=0}^{m-1}(n-\\lfloor\\frac{jc+c-b-1}{a}\\rfloor)$$ 得到 $$f(a,b,c,n)=nm-f(c,c-b-1,a,m-1)$$ 因为系数$a,c$变成了$c,a%c$，所以叫类欧几里得算法。 题目1.bzoj2987: Earthquake给定a,b,c,求满足方程Ax+By&lt;=C的非负整数解 $$ans=\\sum_{x=0}^{\\lfloor\\frac{c}{a}\\rfloor}\\lfloor\\frac{c-ax}{b}\\rfloor+1$$ 负数再变形一下，可以看成把x从大到小遍历 $$ans=\\sum_{x=0}^{\\lfloor\\frac{c}{a}\\rfloor}\\lfloor\\frac{c%a+ax}{b}\\rfloor+1$$ 2.牛客网暑期ACM多校训练营（第十场）Rikka with Ants在二维坐标系有两条直线$y=\\frac{a}{b}x,y=\\frac{c}{d}x$。对于每一条直线，有一只蚂蚁从(1,0)出发，只能向上或向右走一格，并且蚂蚁一直都在直线下方，每次优先向上走，如果越过了直线就改为向右走。问对于这两个蚂蚁走过的点的交集大小。 斜率相等时交集点数无穷大。 对于直线$y=\\frac{a}{b}x$，走到的点为$\\frac{a}{b}(x-1)-1 &lt; y \\le \\frac{a}{b}x,x\\ge 1$ 假设直线$y=\\frac{c}{d}x$斜率较小，那么交集为 $$\\frac{a}{b}(x-1)-1 &lt; y \\le \\frac{c}{d}x, 1 \\le x \\le n$$ 其中 $$n=\\lfloor\\frac{d(a+b)}{ad-bc}\\rfloor$$ 最终要求的式子 $$\\sum_{x=0}^{n-1}\\lfloor\\frac{cx+c}{d}\\rfloor-\\sum_{x=0}^{n-1}\\lfloor\\frac{ax}{b}-1\\rfloor$$ 参考资料： https://blog.csdn.net/WorldWide_D/article/details/54730588","tags":[{"name":"math","slug":"math","permalink":"http://yoursite.com/tags/math/"}]},{"title":"后缀自动机学习笔记","date":"2018-08-18T07:15:00.000Z","path":"2018/08/18/后缀自动机学习笔记/","text":"写在前面推荐hihocoder上的讲解，可以说是十分清楚了。 用好后缀自动机不是十分容易，但看完本文的总结应该能至少达到签到水平… 正文后缀自动机（Suffix Automaton，简称SAM）。对于一个字符串S，它对应的后缀自动机是一个最小的确定有限状态自动机（DFA），接受且只接受S的后缀。 先给出一张图和一个表格。 对于字符串STR=”aabbabd”，它的后缀自动机是： 状态 子串 endpos S 空串 {0,1,2,3,4,5,6} 1 a {1,2,5} 2 aa {2} 3 aab {3} 4 aabb,abb,bb {4} 5 b {3,4,6} 6 aabba,abba,bba,ba {5} 7 aabbab,abbab,bbab,bab {6} 8 ab {3,6} 9 aabbabd,abbabd,bbabd,babd,abd,bd,d {7} 接下来从状态(State)、转移函数(Transition Function)、后缀链接(Suffix Link)三个方面全方位了解一下后缀自动机的性质。 状态：记号： $length(s)$表示字符串s的长度。 $endpos(s)$表示字符串s在STR中所有出现的结束位置集合。 $substrings(st)$表示状态st中包含的所有子串的集合。 $longest(st)$表示状态st包含的最长的子串，$shortest(st)$表示st包含的最短的子串。 $maxlen(st)=length(longest(st))$。 性质: 从起始状态S出发，沿着图中蓝线转移，对于STR的子串最终会到达一个合法状态，不是子串的话最终会无路可走。 对于STR的两个子串$s_1$和$s_2$，不妨设$length(s_1) \\leq length(s_2)$，$s_1$是$s_2$的后缀当且仅当$endpos(s_2) \\subseteq endpos(s_1)$，$s_1$不是$s_2$的后缀当且仅当$endpos(s_1) \\bigcap endpos(s_2) = \\emptyset$ 对于一个后缀自动机的状态$st$，$substrings(st)$里的字符串$endpos$集都相同，或者说同一个状态下的字符串构成了一个等价类，这样记$endpos(st)$表示该状态的$endpos$集。 对于一个后缀自动机的状态$st$，以及任意$s \\in substrings(st)$，都有$s$是$longest(st)$的后缀。 对于一个状态$st$，以及任意的$longest(st)$的后缀$s$，如果$s$的长度满足：$length(shortest(st)) \\leq length(s) \\leq length(longsest(st))$，那么$s \\in substrings(st)$。 换句话说，$substrings(st)$包含的是$longest(st)$的一系列连续后缀。 转移函数： 记字符集合$next(st)$表示对于一个状态st，从它开始下一个遇到的字符可能有哪些，形式化的写出来，有$next(st) = {STR[i+1] | i \\in endpos(st)}$。对于一个状态st来说和一个$next(st)$中的字符c，你会发现$substrings(st)$中的所有子串后面接上一个字符c之后，新的子串仍然都属于同一个状态。比如对于状态4，$next(4)={a}$，aabb,abb,bb后面接上字符a得到aabba，abba，bba，这些子串都属于状态6。 定义转移函数$trans(st, c) = x | longest(st) + c \\in substrings(x) $。换句话说，我们在$longest(st)$（随便哪个子串都会得到相同的结果）后面接上一个字符c得到一个新的子串s，找到包含s的状态x，那么$trans(st, c)$就等于x。 对应图中蓝线，比如$trans(4, a)=6$。 后缀链接： 前面我们讲到$substrings(st)$包含的是$longest(st)$的一系列连续后缀。这连续的后缀在某个地方会“断掉”。比如状态7，包含的子串依次是aabbab,abbab,bbab,bab。按照连续的规律下一个子串应该是“ab”，但是“ab”没在状态7里，这是因为串变短了，就有可能在别的地方也会出现，即$endpos$集合大小变大了。比如aabbab,abbab,bbab,bab（状态7）的$endpos$集为{6}，而“ab”（状态8）的$endpos$集为{3,6}，“b”（状态5）的$endpos$集为{3,4,6}。 于是我们可以发现一条状态序列：7-&gt;8-&gt;5-&gt;S。这个序列的意义是longest(7)即aabbab的后缀依次在状态7、8、5、S中。我们用Suffix Link这一串状态链接起来，这条link就是上图中的绿色虚线。 后缀链接组成了一棵以S为根的树。 构造后缀自动机：构造比较复杂，还是推荐看 http://hihocoder.com/contest/hiho128/problem/1 具体改天再写 时间复杂度$O(N) $，空间上状态数不超过$2N$。 代码中son表示转移函数，pre表示后缀链接，cnt表示$endpos$集合大小。 添加字符的过程中只能标出$endpos$大小为1的那些状态，需要对后缀链接构成的树形结构从叶子开始做拓扑排序，得到所有状态的$endpos$集合大小。 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;bits/stdc++.h&gt;using namespace std;#define N 1000010struct SAM&#123; int tot,last; int son[N&lt;&lt;1][26],maxlen[N&lt;&lt;1],pre[N&lt;&lt;1]; int cnt[N&lt;&lt;1],in[N&lt;&lt;1],q[N&lt;&lt;1]; void init() &#123; tot=0; last=newnode(); &#125; int newnode() &#123; ++tot; memset(son[tot],0,sizeof(son[tot])); maxlen[tot]=pre[tot]=cnt[tot]=in[tot]=0; return tot; &#125; void add(int c) &#123; int now=newnode(); maxlen[now]=maxlen[last]+1; cnt[now]=1; while(last &amp;&amp; son[last][c]==0) son[last][c]=now,last=pre[last]; if(last) &#123; int x=son[last][c]; if(maxlen[x]==maxlen[last]+1) pre[now]=x; else &#123; int nq=newnode(); maxlen[nq]=maxlen[last]+1; memcpy(son[nq],son[x],sizeof(son[x])); pre[nq]=pre[x]; pre[x]=pre[now]=nq; while(last &amp;&amp; son[last][c]==x) son[last][c]=nq,last=pre[last]; &#125; &#125; else pre[now]=1; last=now; &#125; void endpos() &#123; int l=0,r=0; for(int i=1;i&lt;=tot;++i) ++in[pre[i]]; for(int i=1;i&lt;=tot;++i) if(!in[i]) q[r++]=i; while(l!=r) &#123; int x=q[l++]; if(pre[x]==0) continue; cnt[pre[x]]+=cnt[x]; if((--in[pre[x]])==0) q[r++]=pre[x]; &#125; &#125;&#125; sam;char s[N];int main()&#123; sam.init(); scanf(\"%s\",s); for(int i=0;s[i];++i) sam.add(s[i]-'a'); sam.endpos();&#125; 广义后缀自动机解决多个串的问题，做法很简单，只需要添加每个串前让last=1即可，或者也可以对trie树建后缀自动机，则新加点时last为trie上的父节点。分析与证明在2015年国家集训队论文里有。 如果要记录一些信息，比如strval表示每个状态里的子串在多少个串中出现过，需要额外加一个lc维护该状态上一次出现是哪个串，每次沿着Parent向上更新出现次数，遇到lc=当前串的就停止。时间复杂度还不太会分析，待补。 12345678910111213141516171819202122232425262728293031323334353637383940414243void add(int id,int c)//id表示第几个串，编号从1开始&#123; int now=newnode(); maxlen[now]=maxlen[last]+1; cnt[now]=1; while(last &amp;&amp; son[last][c]==0) son[last][c]=now,last=pre[last]; if(last) &#123; int x=son[last][c]; if(maxlen[x]==maxlen[last]+1) pre[now]=x; else &#123; int nq=newnode(); maxlen[nq]=maxlen[last]+1; memcpy(son[nq],son[x],sizeof(son[x])); pre[nq]=pre[x]; lc[nq]=lc[x];strval[nq]=strval[x];//额外的信息 pre[x]=pre[now]=nq; while(last &amp;&amp; son[last][c]==x) son[last][c]=nq,last=pre[last]; &#125; &#125; else pre[now]=1; last=now; //广义后缀自动机 while(now &amp;&amp; lc[now]!=id) &#123; lc[now]=id; ++strval[now]; now=pre[now]; &#125;&#125;//mainsam.init();for(int i=1;i&lt;=n;++i)&#123; sam.last=1; scanf(\"%s\",s); for(int j=0;s[j];++j) sam.add(i,s[j]-'a');&#125; 练习题目：1.hihocoder #1445 : 后缀自动机二·重复旋律5求字符串本质不同子串的个数，直接累加$\\left|substrings(st) \\right|$，利用maxlen数组及suffix link不难得出。 1234567ll count()&#123; ll ans=0; for(int i=1;i&lt;=tot;++i) ans+=maxlen[i]-maxlen[pre[i]]; return ans;&#125; 2.spoj1811 LCS求两个串最长公共子串，对一个串建后缀自动机，另一个串在上面走，如果当前状态没有当前字符的转移，就沿着suffix link往回跳，很好理解。 123456789101112131415161718int LCS(char *s)&#123; int now=1,len=0,ans=0; for(int i=0;s[i];++i) &#123; int x=s[i]-'a'; if(son[now][x]) ++len,now=son[now][x]; else &#123; while(now &amp;&amp; son[now][x]==0) now=pre[now]; if(now==0) len=0,now=1; else len=maxlen[now]+1,now=son[now][x]; &#125; ans=max(ans,len); &#125; return ans;&#125; 3.bzoj3998: [TJOI2015]弦论求一个串的第K小子串，T为0表示不同位置的相同子串算作一个，T=1则表示不同位置的相同子串算作多个。 还是先计算$endpos$集合大小cnt，如果T==0，则每个状态cnt值都是1，如果T==1，则还是和之前的代码一样，在suffix link构成的树上做拓扑排序，转移出cnt。 另外还需要知道从 每个状态往后走会有多少种子串，记为$Sum[x]$，还是用同样的拓扑序转移 $$Sum[x]=cnt[x]+\\sum_{i=0}^{25} Sum[son[x][i]]$$ 然后从根开始按照字典序dfs一下就可以求出第K小子串了。 4.bzoj3238: [AHOI2013]差异给一个字符串S，求$\\sum_{1\\le i&lt;j\\le n} len(T_i)+len(T_j)-2lcp(T_i,T_j)$，其中T_i表示i开始的后缀，lcp表示最长公共前缀。 把原串倒过来建后缀自动机，这样就把前缀变成了后缀。两个前缀的最长公共后缀是对应后缀自动机上两结点的LCA，实上统计的话，枚举LCA做类似树dp的事情数一数即可。 123456789101112131415161718void addedge()&#123; for(int i=2;i&lt;=tot;++i) e[pre[i]].push_back(i);&#125;void dfs(int x)&#123; ll now=0; for(int i=0;i&lt;e[x].size();++i) &#123; int y=e[x][i]; dfs(y); ans-=2LL*now*cnt[y]*maxlen[x]; now+=cnt[y]; &#125; if(cnt[x]==1) ans-=2*now*maxlen[x]; cnt[x]+=now;&#125; 或者这样，类似容斥一下的统计 12345678910void dfs(int x)&#123; for(int i&#x3D;0;i&lt;e[x].size();++i) &#123; int y&#x3D;e[x][i]; dfs(y); cnt[x]+&#x3D;cnt[y]; &#125; if(x!&#x3D;1) ans-&#x3D;1LL*cnt[x]*(cnt[x]-1)*(maxlen[x]-maxlen[pre[x]]);&#125; 5.是男人就过 8 题–Pony.AI A String GameAlice和Bob玩游戏，有n个串Si，保证都是t的子串，每人轮流从n个串中取出一个串，并在结尾添加一个字符后放回去，要求是添加字符之后也要保证该串是t的子串，无法操作的人输，Alice先手，问谁赢。 显然是要在t的后缀自动机上博弈，要注意不能直接从根开始dfs，需要先做搞出拓扑序。 1234567891011121314151617181920212223242526272829303132333435int calc(char *s,int n)&#123; int now=1; for(int i=0;i&lt;n;++i) now=son[now][s[i]-'a']; return ans[now];&#125;void work()&#123; for(int i=1;i&lt;=tot;++i) for(int j=0;j&lt;26;++j) if(son[i][j]) &#123; e[son[i][j]].push_back(i); in[i]++; &#125; int l=0,r=0; for(int i=1;i&lt;=tot;++i) if(!in[i]) q[r++]=i; while(l!=r) &#123; int x=q[l++]; int now=0; while(vis[x][now]) ++now; ans[x]=now; for(auto &amp;y:e[x]) &#123; vis[y][ans[x]]=true; --in[y]; if(!in[y]) q[r++]=y; &#125; &#125;&#125; 6.bzoj1396: 识别子串给一个串，求每个位置的最短识别子串的长度，最短识别子串定义是，在整个串中出现一次且覆盖到这个位置的最短的一个子串。 做法是找$endpos$集合大小为1的那些串，用线段树维护答案，具体是区间和一个数取min，以及和一个等差数列取min，稍微转化一下就很好写了。","tags":[{"name":"后缀自动机","slug":"后缀自动机","permalink":"http://yoursite.com/tags/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/"}]},{"title":"诗词两首","date":"2018-06-22T04:44:00.000Z","path":"2018/06/22/诗词两首/","text":"西江月 瑟瑟微风夜半，潇潇细雨黎明。雄鸡一唱与谁听？几度茫然光景。 壮志还须努力，何时乡返功成。椟中美玉尚无名，待得他人相赠。 七绝·四季 漫漫冰霜眼底收， 西风萧瑟欲何求。 独怜明媚绝非夏， 四季如春花满楼。 第一首是词的作业，第二首是诗词格律与写作期末题，这学期另作了一首五古，质量不高，就不放出来了=、= 关于诗词创作就到这里了（撒花）","tags":[{"name":"诗词","slug":"诗词","permalink":"http://yoursite.com/tags/%E8%AF%97%E8%AF%8D/"}]},{"title":"多维快速傅里叶变换","date":"2018-05-21T10:39:00.000Z","path":"2018/05/21/多维快速傅里叶变换/","text":"以下内容摘自《算法导论》思考题30-3 我们可以将一维离散傅里叶变换推广到d维上，这时输入是一个d维的数组$A=(a_{j_1,j_2,\\dots,j_d})$，维数分别为$n_1,n_2,\\dots,n_d$，其中$n_1n_2\\dots n_d=n$。定义d维离散傅里叶变换如下: $$y_{k_1,k_2,\\dots,k_d}=\\sum_{j_1=0}^{n_1-1}\\sum_{j_2=0}^{n_2-1}\\dots\\sum_{j_d=0}^{n_d-1}a_{j_1,j_2,\\dots,j_d}\\omega _{n_1}^{j_1k_1}\\omega _{n_2}^{j_2k_2}\\dots\\omega _{n_d}^{j_dk_d}$$ 其中$0\\le k_1&lt;n_1,0\\le k_2&lt;n_2,\\dots,0\\le k_d&lt;n_d$ a.证明：我们可以依次在每个维度上计算一维的DFT来计算一个d维的DFT。也就是说，首先沿着第1维计算$n/n_1$个独立的一维DFT。然后，把沿着第一维的DFT的结果作为输入，我们计算沿着第2维的$n/n_2$个独立的一维DFT。利用这个结果作为输入，我们计算沿着第3维的$n/n_3$个独立的一维DFT，如此下去，直到第d维。 b.证明：维度的次序并无影响，于是可以通过在d个维度的任意顺序中计算一维DFT来计算一个d为的DFT。 c.证明：如果采用计算快速傅里叶变换计算每个一维的DFT，那么计算一个d维的DFT的总时间是$O(nlogn)$，与d无关。 练习题目 Five Dimensional Discrete Fourier Transform 2017年ICPC南宁赛区的G题 直接做多维DFT，复杂度$O(TN^6)$，需要卡卡常数。 代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146#include&lt;bits/stdc++.h&gt;using namespace std;typedef double db;const db pi=acos(-1.0);struct Complex&#123; db x,y; Complex(db x_=0,db y_=0) &#123; x=x_; y=y_; &#125; Complex operator -(const Complex &amp;t)const &#123; return Complex(x-t.x,y-t.y); &#125; Complex operator +(const Complex &amp;t)const &#123; return Complex(x+t.x,y+t.y); &#125; Complex operator *(const Complex &amp;t)const &#123; return Complex(x*t.x-y*t.y,x*t.y+y*t.x); &#125; Complex operator *(const db &amp;t)const &#123; return Complex(x*t,y*t); &#125;&#125; a[10][10][10][10][10],A[10][10][10][10][10],w[20],x[20],y[20];Complex e(db t)&#123; return Complex(cos(t),sin(t));&#125;int n[10];db alpha;void dft(Complex *x,Complex *y,int n)&#123; for(int j=0;j&lt;n;++j) w[j]=e(-2*pi/n*j); for(int i=0;i&lt;n;++i) &#123; y[i]=Complex(0,0); for(int j=0;j&lt;n;++j) y[i]=y[i]+x[j]*w[i*j%n]; &#125;&#125;db calc()&#123; db ans=0; for(int i0=0;i0&lt;n[0];++i0) for(int i1=0;i1&lt;n[1];++i1) for(int i2=0;i2&lt;n[2];++i2) for(int i3=0;i3&lt;n[3];++i3) for(int i4=0;i4&lt;n[4];++i4) ans+=abs(A[i0][i1][i2][i3][i4].x); int nn=n[0]*n[1]*n[2]*n[3]*n[4]; return ans/sqrt(1.0*nn*nn*nn);&#125;void baoli()&#123; for(int i0=0;i0&lt;n[0];++i0) for(int i1=0;i1&lt;n[1];++i1) for(int i2=0;i2&lt;n[2];++i2) for(int i3=0;i3&lt;n[3];++i3) for(int i4=0;i4&lt;n[4];++i4) &#123; A[i0][i1][i2][i3][i4]=Complex(0,0); for(int j0=0;j0&lt;n[0];++j0) for(int j1=0;j1&lt;n[1];++j1) for(int j2=0;j2&lt;n[2];++j2) for(int j3=0;j3&lt;n[3];++j3) for(int j4=0;j4&lt;n[4];++j4) A[i0][i1][i2][i3][i4]=A[i0][i1][i2][i3][i4]+a[j0][j1][j2][j3][j4]*e(2*pi*(1.0*i0*j0/n[0]+1.0*i1*j1/n[1]+1.0*i2*j2/n[2]+1.0*i3*j3/n[3]+1.0*i4*j4/n[4])); &#125;&#125;void dft()&#123; for(int i1=0;i1&lt;n[1];++i1) for(int i2=0;i2&lt;n[2];++i2) for(int i3=0;i3&lt;n[3];++i3) for(int i4=0;i4&lt;n[4];++i4) &#123; for(int i0=0;i0&lt;n[0];++i0) x[i0]=a[i0][i1][i2][i3][i4]; dft(x,y,n[0]); for(int i0=0;i0&lt;n[0];++i0) a[i0][i1][i2][i3][i4]=y[i0]; &#125; for(int i0=0;i0&lt;n[0];++i0) for(int i2=0;i2&lt;n[2];++i2) for(int i3=0;i3&lt;n[3];++i3) for(int i4=0;i4&lt;n[4];++i4) &#123; for(int i1=0;i1&lt;n[1];++i1) x[i1]=a[i0][i1][i2][i3][i4]; dft(x,y,n[1]); for(int i1=0;i1&lt;n[1];++i1) a[i0][i1][i2][i3][i4]=y[i1]; &#125; for(int i0=0;i0&lt;n[0];++i0) for(int i1=0;i1&lt;n[1];++i1) for(int i3=0;i3&lt;n[3];++i3) for(int i4=0;i4&lt;n[4];++i4) &#123; for(int i2=0;i2&lt;n[2];++i2) x[i2]=a[i0][i1][i2][i3][i4]; dft(x,y,n[2]); for(int i2=0;i2&lt;n[2];++i2) a[i0][i1][i2][i3][i4]=y[i2]; &#125; for(int i0=0;i0&lt;n[0];++i0) for(int i1=0;i1&lt;n[1];++i1) for(int i2=0;i2&lt;n[2];++i2) for(int i4=0;i4&lt;n[4];++i4) &#123; for(int i3=0;i3&lt;n[3];++i3) x[i3]=a[i0][i1][i2][i3][i4]; dft(x,y,n[3]); for(int i3=0;i3&lt;n[3];++i3) a[i0][i1][i2][i3][i4]=y[i3]; &#125; for(int i0=0;i0&lt;n[0];++i0) for(int i1=0;i1&lt;n[1];++i1) for(int i2=0;i2&lt;n[2];++i2) for(int i3=0;i3&lt;n[3];++i3) &#123; for(int i4=0;i4&lt;n[4];++i4) x[i4]=a[i0][i1][i2][i3][i4]; dft(x,y,n[4]); for(int i4=0;i4&lt;n[4];++i4) a[i0][i1][i2][i3][i4]=y[i4]; &#125; for(int i0=0;i0&lt;n[0];++i0) for(int i1=0;i1&lt;n[1];++i1) for(int i2=0;i2&lt;n[2];++i2) for(int i3=0;i3&lt;n[3];++i3) for(int i4=0;i4&lt;n[4];++i4) A[i0][i1][i2][i3][i4]=a[i0][i1][i2][i3][i4];&#125;int main()&#123; int T; scanf(\"%d\",&amp;T); while(T--) &#123; for(int i=0;i&lt;5;++i) scanf(\"%d\",&amp;n[i]); scanf(\"%lf\",&amp;alpha); for(int i0=0;i0&lt;n[0];++i0) for(int i1=0;i1&lt;n[1];++i1) for(int i2=0;i2&lt;n[2];++i2) for(int i3=0;i3&lt;n[3];++i3) for(int i4=0;i4&lt;n[4];++i4) a[i0][i1][i2][i3][i4]=e((i0-i1+i2-i3+i4)*alpha)*(i0^i1^i2^i3^i4); //baoli(); dft(); printf(\"%.6f\\n\",calc()); &#125;&#125;","tags":[{"name":"fft","slug":"fft","permalink":"http://yoursite.com/tags/fft/"}]},{"title":"快速傅里叶变换学习笔记","date":"2018-05-09T06:04:00.000Z","path":"2018/05/09/快速傅里叶变换学习笔记/","text":"一、写在前面最近数字图像处理课正在学快速傅里叶变换，发现自己对此理解的还不是很到位。于是借此机会，对照着《算法导论》，对这部分内容啃一啃。 两个$n$次多项式相加的最直接方法所需的时间是$O(n)$，但是相乘的最直接方法所需的时间为$O(n^2)$。用快速傅里叶变换（Fast Fourier Transform，FFT）可以使多项式相乘的时间复杂度降低为$O(nlogn)$。 需要的一些前置技能：复数、多项式、线性代数。 二、多项式一个以$x$为变量的多项式定义在一个代数域$F$上，将函数$A(x)$表示为形式和: $$A(x)=\\sum_{j=0}^{n-1}a_jx^j$$ 我们称$a_0,a_1,\\dots,a_{n-1}$为如上多项式的系数，所有系数都属于域$F$，典型的情形是复数集合$C$。 如果一个多项式$A(x)$的最高次的非零系数是$a_k$，则称$A(x)$的次数是$k$，记$degree(A)=k$。任何严格大于一个多项式次数的整数都是该多项式的次数界，因此，对于次数界为$n$的多项式，其次数可以是$0\\sim n-1$之间的任何整数。 多项式加法如果$A(x)$和$B(x)$是次数界为$n$的多项式，那么它们的和也是一个次数界为$n$的多项式$C(x)$，对所有属于定义域的$x$，都有$C(x)=A(x)+B(x)$。也就是说， 若 $$A(x)=\\sum_{j=0}^{n-1}a_jx^j$$ $$B(x)=\\sum_{j=0}^{n-1}b_jx^j$$ 则 $$C(x)=\\sum_{j=0}^{n-1}c_jx^j(c_j=a_j+b_j)$$ 例如，如果有多项式$A(x)=6x^3+7x^2-10x+9$和$B(x)=-2x^3+4x-5$，那么$C(x)=4x^3+7x^2-6x+4$。 多项式乘法如果$A(x)$和$B(x)$是次数界为$n$的多项式，那么它们的乘积$C(x)$是一个次数界为$2n-1$的多项式$C(x)$，对所有属于定义域的$x$，都有$C(x)=A(x)B(x)$。方法类似还是用上一个例子，那么得到 $$C(x)=-12x^6-14x^5+44x^4-20x^3-75x^2+86x-45$$ 形式化的式子有 $$C(x)=\\sum_{j=0}^{2n-2}c_jx^j$$ 其中 $$c_j=\\sum_{k=0}^{j}a_{k}b_{j-k}$$ 此时 $$degree(C)=degree(A)+degree(B)$$ 多项式的表示从某种意义上，多项式的系数表达与点值表达式等价的。 系数表达对一个次数界为$n$的多项式$A(x)=\\sum_{j=0}^{n-1}a_jx^j$而言，其系数表达是一个由系数组成的（列）向量$a=(a_0,a_1,\\dots,a_{n-1})$。对于多项式乘法，系数向量$c$成为输入向量$a$和$b$的卷积，表示成$c=a\\otimes b$。 点值表达一个次数界为$n$的多项式$A(x)$的点值表达就是一个由$n$个点值对组成的集合 $${(x_0,y_0),(x_1,y_1),\\dots,(x_{n-1},y_{n-1})}$$ 使得对$k=0,1,\\dots,n-1$，所有$x_k$各不相同，且$y_k=A(x_k)$。 一个多项式可以有很多不同的点值表达。如果采用的点都相同的话，用点值表达多项式做乘法只需$O(n)$的时间。 求值与插值从一个多项式的系数表达转化为点值表达的过程是求值，其逆运算称为插值。 定理（插值多项式的唯一性）：对于任意n个点值对组成的集合${(x_0,y_0),(x_1,y_1),\\dots,(x_{n-1},y_{n-1})}$，其中所有的$x_k$都不同，那么存在唯一的次数界为n的多项式$A(x)$，满足$y_k=A(x_k)$。 证明列出矩阵方程，然后结合范德蒙德矩阵的性质。 简单的求值和插值（拉格朗日插值）的时间复杂度都是$O(n^2)$的。 我们之后就要通过巧妙选取点来加速这两个过程，使其运行时间变为$O(nlogn)$。 三、单位复数根$n$次单位复数根是满足$\\omega ^n=1$的复数$\\omega$。 $n$次单位复数根恰好有$n$个： $$\\omega _{n}^{0},\\omega _{n}^{1},\\dots,\\omega _{n}^{n-1}$$ 其中主$n$次单位复数根为 $$\\omega _n=e^{2\\pi i/n}=\\cos(2\\pi/n)+i\\sin(2\\pi/n)$$ 其他$n$次单位复数根都是$\\omega _n$的幂次。 消去引理：对于任何整数$n\\ge 0,k\\ge 0,d&gt;0$，有$\\omega _{dn}^{dk}=\\omega _{n}^{k}$ 推论：对于任意偶数$n&gt;0$，有$\\omega _{n}^{n/2}=\\omega _{2}=-1$ 折半引理：如果$n&gt;0$为偶数，那么$n$个$n$次单位复数根的平方的集合就是$n/2$个$n/2$次单位复数根的集合 求和引理：对任意整数$n\\geq 1$和不能被$n$整除的非负整数$k$，有$\\sum_{j=0}^{n-1}(\\omega _n^k)^j=0$ 四、快速傅里叶变换DFT现在我们希望计算次数界$n$的多项式 $$A(x)=\\sum_{j=0}^{n-1}a_jx^j$$ 在$\\omega_{n}^{k}$处的值，记为$y_k$ $$y_k=A(\\omega_{n}^{k})=\\sum_{j=0}^{n-1}a_j\\omega_{n}^{kj}$$ 向量$y=(y_0,y_1,\\dots,y_{n-1})$就是系数向量$a=(a_0,a_1,\\dots,a_{n-1})$的离散傅里叶变换（DFT），记为$y=DFT_n(a)$。 FFT快速傅里叶变换（FFT）利用复数单位根的特殊性质，可以在$O(nlogn)$时间内计算出$DFT_n(a)$。首先通篇假设$n$恰好是$2$的整数幂。 FFT利用了分治策略，采用$A(x)$中偶数下标的系数与奇数下标的系数，分别定义两个新的次数界为$n/2$的多项式$A^{[0]}(x)$和$A^{[1]}(x)$: $$A^{[0]}(x)=a_{0}+a_{2}x+a_{4}x^2+\\dots+a_{n-2}x^{n/2-1}$$ $$A^{[1]}(x)=a_{1}+a_{3}x+a_{5}x^2+\\dots+a_{n-1}x^{n/2-1}$$ 于是有 $$A(x)=A^{[0]}(x^2)+xA^{[1]}(x^2)$$ 所以，求$A(x)$在$\\omega _{n}^{0},\\omega _{n}^{1},\\dots,\\omega _{n}^{n-1}$处的值转换为求次数界为$n/2$的多项式$A^{[0]}(x)$和$A^{[1]}(x)$在点$(\\omega _{n}^{0})^2,(\\omega _{n}^{1})^2,\\dots,(\\omega _{n}^{n-1})^2$的值。可以发现其实是$n/2$个$n/2$次单位复数根，且每个根恰好出现两次。 IDFT将点值表达的多项式转换回系数表达，是相似的过程。 我们把DFT写成矩阵乘积$y=V_{n}a$。 其中$V_{n}$是一个范德蒙德矩阵，在$(k,j)$处的元素为$\\omega _{n}^{kj}$。 对于逆运算$a=DFT_{n}^{-1}(y)$，我们把$y$乘以$V_{n}$的逆矩阵来处理。 定理：对$j,k=0,1,\\dots,n-1$，$V_{n}^{-1}$在$(j,k)$元素为$\\omega _{n}^{-kj}/n$。 证明$V_{n}^{-1}V_{n}=I_n$时用求和引理即可，注意使用条件。 所以可以推导出$DFT_{n}^{-1}(y)$： $$a_j=\\frac{1}{n}\\sum_{k=0}^{n-1}y_{k}\\omega_n^{-kj}$$ 可以看出只需将单位根取倒数，做一次FFT，最后将结果都除以n，就做完逆变换了。 五、代码实现首先是手写复数类，也可以用std::complex。 123456789101112131415161718192021struct Complex&#123; double x,y; Complex(double x_=0,double y_=0) &#123; x=x_; y=y_; &#125; Complex operator -(const Complex &amp;t)const &#123; return Complex(x-t.x,y-t.y); &#125; Complex operator +(const Complex &amp;t)const &#123; return Complex(x+t.x,y+t.y); &#125; Complex operator *(const Complex &amp;t)const &#123; return Complex(x*t.x-y*t.y,x*t.y+y*t.x); &#125;&#125;; 递归实现12345678910111213141516171819202122void fft(Complex y[],int n)&#123; if(n==1) return; static Complex c[MAXN]; int m=n/2; for(int i=0;i&lt;m;++i) &#123; c[i]=y[i*2]; c[i+m]=y[i*2+1]; &#125; copy(c,c+n,y); Complex *a0=y,*a1=y+m; fft(a0,m); fft(a1,m); for(int i=0;i&lt;m;++i) &#123; Complex w(cos(-2*PI/n*i),sin(-2*PI/n*i)); c[i]=a0[i]+w*a1[i]; c[i+m]=a0[i]-w*a1[i]; &#125; copy(c,c+n,y);&#125; 合并过程的推导： 对于$0 \\le k &lt; n/2$ $$\\begin{aligned}y _k &amp; =A(\\omega _{n}^{k}) \\\\&amp; =A^{[0]}(\\omega _{n}^{2k})+\\omega _{n}^{k}A^{[1]}(\\omega _{n}^{2k}) \\\\&amp; =A^{[0]}(\\omega _{n/2}^{k})+\\omega _{n}^{k}A^{[1]}(\\omega _{n/2}^{k}) \\\\&amp; =y_k^{[0]}+\\omega _{n}^{k}y_k^{[1]}\\end{aligned}$$ 前半段没什么问题，再来看后半段 $$\\begin{aligned} y_{k+(n/2)} &amp; =A(\\omega _{n}^{k+(n/2)}) \\\\&amp; =A^{[0]}(\\omega _{n}^{2k+n})+\\omega _{n}^{k+(n/2)}A^{[1]}(\\omega _{n}^{2k+n}) \\\\&amp; =A^{[0]}(\\omega _{n}^{2k})-\\omega _{n}^{k}A^{[1]}(\\omega _{n}^{2k}) \\\\&amp; =A^{[0]}(\\omega _{n/2}^{k})-\\omega _{n}^{k}A^{[1]}(\\omega _{n/2}^{k}) \\\\&amp; =y_k^{[0]}-\\omega _{n}^{k}y_k^{[1]}\\end{aligned}$$ 迭代实现递归实际运行起来常数很大，我们需要更高效的实现方法。 先来观察一下递归过程中输入向量的下标变化，以$n=8$举例，可以将这个过程自行脑补成一个完全二叉树的样子： 0 1 2 3 4 5 6 7 0 2 4 6 - 1 3 5 7 0 4 - 2 6 - 1 5 - 3 7 0 - 4 - 2 - 6 - 1 - 5 - 3 - 7 如果观察二进制的话会发现对应的下标是反转二进制位得到的，比如“011”变成“110”，即下标3变成了6。 代码实现举例两种 直接求出对应位置反转二进制位后的数，然后交换，时间复杂度$O(nlogn)$ 12345678910111213void change(Complex y[],int len)&#123; int k=0; while((1&lt;&lt;k)&lt;len) ++k; for(int i=0;i&lt;len;++i) &#123; int t=0; for(int j=0;j&lt;k;++j) if(i&gt;&gt;j&amp;1) t|=1&lt;&lt;(k-j-1); if(i&lt;t) swap(y[i],y[t]); &#125;&#125; 从高位模拟二进制加一，用经典的摊还分析可以证明复杂度是$O(n)$ 123456789101112131415void change(Complex y[],int len)&#123; int i,j,k; for(i=1,j=len/2;i&lt;len-1;i++) &#123; if(i&lt;j) swap(y[i],y[j]); k=len/2; while(j&gt;=k) &#123; j-=k; k/=2; &#125; if(j&lt;k) j+=k; &#125;&#125; 之后我们再考虑自底向上的合并，在之前的递归版本中，有一个公用子表达式$\\omega _{n}^{k}y_k^{[1]}$计算了两次，我们可以只计算一次乘积，存放在临时变量$t$里，然后从$y_k^{[0]}$中增加或者减去$t$，这一系列操作称为一个蝴蝶操作。 代码： 1234567891011121314151617181920212223void fft(Complex y[],int len,int on)&#123; change(y,len); for(int h=2;h&lt;=len;h&lt;&lt;=1) &#123; Complex wn(cos(-on*2*PI/h),sin(-on*2*PI/h)); for(int j=0;j&lt;len;j+=h) &#123; Complex w(1,0); for(int k=j;k&lt;j+h/2;k++) &#123; Complex u=y[k]; Complex t=w*y[k+h/2]; y[k]=u+t; y[k+h/2]=u-t; w=w*wn; &#125; &#125; &#125; if(on==-1) for(int i=0;i&lt;len;i++) y[i].x/=len;&#125; on取值1或-1，on为-1代表逆变换。 实际上，预处理单位根代替每次旋转精度会更好。 六、模板多项式乘法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long LL;const double PI=acos(-1.0);const int MAXN=1&lt;&lt;18;struct Complex&#123; double x,y; Complex(double x_=0,double y_=0) &#123; x=x_; y=y_; &#125; Complex operator -(const Complex &amp;t)const &#123; return Complex(x-t.x,y-t.y); &#125; Complex operator +(const Complex &amp;t)const &#123; return Complex(x+t.x,y+t.y); &#125; Complex operator *(const Complex &amp;t)const &#123; return Complex(x*t.x-y*t.y,x*t.y+y*t.x); &#125;&#125; x1[MAXN+5],x2[MAXN+5],wn[MAXN+5];void init()&#123; for(int i=0;i&lt;=MAXN;++i) wn[i]=Complex(cos(-2*PI*i/MAXN),sin(-2*PI*i/MAXN));&#125;void change(Complex y[],int len)&#123; int i,j,k; for(i=1,j=len/2;i&lt;len-1;i++) &#123; if(i&lt;j) swap(y[i],y[j]); k=len/2; while(j&gt;=k) &#123; j-=k; k/=2; &#125; if(j&lt;k) j+=k; &#125;&#125;void fft(Complex y[],int len,int on)&#123; change(y,len); for(int h=2;h&lt;=len;h&lt;&lt;=1) &#123; int st=MAXN/h; for(int j=0;j&lt;len;j+=h) &#123; int ptr=0; for(int k=j;k&lt;j+h/2;k++) &#123; Complex w=wn[on==1?ptr:MAXN-ptr]; Complex u=y[k],t=w*y[k+h/2]; y[k]=u+t; y[k+h/2]=u-t; ptr+=st; &#125; &#125; &#125; if(on==-1) for(int i=0;i&lt;len;i++) y[i].x/=len;&#125;int n,m;int main()&#123; init(); scanf(\"%d%d\",&amp;n,&amp;m); ++n;++m; int len=1; while(len&lt;(n&lt;&lt;1)||len&lt;(m&lt;&lt;1)) len&lt;&lt;=1; for(int i=0;i&lt;n;++i) &#123; int x; scanf(\"%d\",&amp;x); x1[i].x=x; &#125; for(int i=0;i&lt;m;++i) &#123; int x; scanf(\"%d\",&amp;x); x2[i].x=x; &#125; fft(x1,len,1); fft(x2,len,1); for(int i=0;i&lt;len;++i) x1[i]=x1[i]*x2[i]; fft(x1,len,-1); for(int i=0;i&lt;n+m-1;++i) printf(\"%d%c\",(int)(x1[i].x+0.5),\" \\n\"[i==n+m-2]); return 0;&#125; 七、结语啊，终于弄完快速傅里叶变换了，撒花！ 实际上，关于FFT还有很多东西没有讨论到，先到这里吧。","tags":[{"name":"fft","slug":"fft","permalink":"http://yoursite.com/tags/fft/"}]},{"title":"莫队算法总结","date":"2018-05-03T05:36:00.000Z","path":"2018/05/03/莫队算法总结/","text":"写在前面莫队算法用于离线解决一类区间问题。 普通莫队如果我们已知查询为区间$[l,r]$的答案，并且能在$O(1)$的时间内通过添加或删除一个元素得到$[l-1,r],[l+1,r],[l,r-1],[l,r+1]$的答案，那么就可以考虑使用莫队算法。 做法： 1.首先我们对原序列分块，原序列长度$N$,每块大小记为$Size$，那么块数为$\\lfloor \\frac{N-1}{Size} \\rfloor +1$，每块从左到右依次编号。 2.对所有询问$[l_i,r_i]$以询问左端点所在块的序号为第一关键字，右端点的大小为第二关键字进行排序。按照这样的顺序通过添加或删除元素求解每个询问的答案。 可以证明当$Size$取$\\sqrt{N}$时，总的时间复杂度为$O(N^{1.5})$。 左端点在同一块时，右端点是递增的，变化$N$次，共有$\\sqrt{N}$个块，这一部分复杂度为$O(N^{1.5})$。 左端点转移到下一块时，右端点最多变化$N$次，共有$\\sqrt{N}$个块，这一部分复杂度为$O(N^{1.5})$。 左端点在同一块时，每次最多变化$\\sqrt{N}$，转移到下一块时，最多变化$2\\sqrt{N}$，询问共$N$个，这一部分复杂度为$O(N^{1.5})$。 模板： 1234567891011121314151617181920212223const int SIZE=300;struct Q&#123;int l,r,order;&#125; q[N];bool cmp(const re &amp;a,const re &amp;b)&#123; if(pos[a.l]!=pos[b.l]) return pos[a.l]&lt;pos[b.l]; return a.r&lt;b.r;&#125;int main()&#123; for(int i=1;i&lt;=n;++i) pos[i]=(i-1)/SIZE+1; for(int i=1;i&lt;=m;++i) q[i].order=i; sort(q+1,q+m+1,cmp); for(int i=1,l=1,r=0; i&lt;=m; ++i) &#123; int L=q[i].l ,R=q[i].r; while(r&lt;R) add(++r); while(r&gt;R) del(r--); while(l&lt;L) del(l++); while(l&gt;L) add(--l) ans[q[i].order]=now; &#125; //for(int i=1; i&lt;=m; ++i) print ans[i]&#125; 带修改莫队对于一些带单点修改的问题，还是存在一种莫队姿势的。当然，一次修改要求$O(1)$完成。 每个修改操作记录位置和修改前后的值，这样方便还原修改。 每个询问除了记录区间$[l,r]$之外，还要记录在此询问之前的修改操作个数（也可以叫做时间）$t$，记$pos_x$表示$x$所在块的编号。 那么将所有询问按照$(pos_l,pos_r,t)$做三关键字排序。那么在普通莫队的基础上，再维护一个修改时间就可以了。 可以证明当$Size$取$N^{\\frac{2}{3}}$时，左端点、右端点、以及时间的移动复杂度均为$O(N^{\\frac{5}{3}})$，所以总的时间复杂度为$O(N^{\\frac{5}{3}})$。 懒得分析了。 模板： 123456789101112131415161718192021222324252627282930313233343536373839404142struct Change&#123; int x,y,pre;&#125;c[N];struct Ask&#123; int l,r,id,time;&#125;q[N];bool cmp(const Ask &amp;a,const Ask &amp;b)&#123; if(pos[a.l]!=pos[b.l]) return pos[a.l]&lt;pos[b.l]; if(pos[a.r]!=pos[b.r]) return pos[a.r]&lt;pos[b.r]; return a.time&lt;b.time;&#125;void change(int i,int l,int r,bool flag)&#123; int y=c[i].x; if(l&lt;=y &amp;&amp; y&lt;=r) erase(y); color[y]=flag?c[i].y:c[i].pre; if(l&lt;=y &amp;&amp; y&lt;=r) insert(y);&#125;int main()&#123; size=pow(n,2.0/3)+1; for(int i=1;i&lt;=n;++i) pos[i]=(i-1)/size+1; sort(q+1,q+numq+1,cmp); int l=1,r=0,curt=0; for(int i=1;i&lt;=numq;++i) &#123; while(curt&lt;q[i].time) change(++curt,l,r,1); while(q[i].time&lt;curt) change(curt--,l,r,0); while(l&lt;q[i].l) erase(l++); while(q[i].l&lt;l) insert(--l); while(q[i].r&lt;r) erase(r--); while(r&lt;q[i].r) insert(++r); ans[q[i].id]=now; &#125;&#125; 回滚莫队我们经常会遇到这样一种问题，即插入操作十分简单，但是直接删除却非常困难（举个例子，当你要维护最值时）。有没有一种办法避免删除呢？有的，用回滚莫队的姿势就好了~ 回滚，rollback，其实意思应该是还原到修改之前。假设当前询问为$[l,r]$。$pos_l$不变时，右端点一直增加，添加操作好说，和普通莫队一样做，但是左端点怎么办呢？我们可以暂时先不把开头$[l,pos_l\\times Size]$这部分添加，然后先存个档，暴力的插入这一小段，得到当前询问的答案后，再读档还原（有些是撤销修改），这就是回滚操作了。 bzoj 4241 历史研究： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define N 100010struct ask&#123; int l,r,o;&#125; q[N];int n,m;int a[N],hs[N],pos[N],num[N];ll now;ll ans[N];bool cmp(const ask &amp;a,const ask &amp;b)&#123; if(pos[a.l]!=pos[b.l]) return pos[a.l]&lt;pos[b.l]; return a.r&lt;b.r;&#125;void del(int x)&#123; --num[a[x]];&#125;void add(int x)&#123; ++num[a[x]]; now=max(now,1LL*hs[a[x]]*num[a[x]]);&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); int siz=sqrt(n); for(int i=1;i&lt;=n;++i) &#123; scanf(\"%d\",a+i); hs[i]=a[i]; pos[i]=(i-1)/siz+1; &#125; sort(hs+1,hs+n+1); int cnt=unique(hs+1,hs+n+1)-hs-1; for(int i=1;i&lt;=n;++i) a[i]=lower_bound(hs+1,hs+cnt+1,a[i])-hs; for(int i=1;i&lt;=m;++i) &#123; scanf(\"%d%d\",&amp;q[i].l,&amp;q[i].r); q[i].o=i; &#125; sort(q+1,q+m+1,cmp); int r=0; for(int i=1;i&lt;=m;++i) &#123; int L=q[i].l,R=q[i].r; if(pos[q[i].l]!=pos[q[i-1].l]) &#123; memset(num,0,sizeof(num)); r=pos[q[i].l]*siz; now=0; &#125; while(r&lt;R) add(++r); ll last=now; for(int j=L;j&lt;=pos[q[i].l]*siz &amp;&amp; j&lt;=R;++j) add(j); ans[q[i].o]=now; //rollback for(int j=L;j&lt;=pos[q[i].l]*siz &amp;&amp; j&lt;=R;++j) del(j); now=last; &#125; for(int i=1;i&lt;=m;++i) printf(\"%lld\\n\",ans[i]); return 0;&#125; 题目普通莫队 codeforces 617E XOR and Favorite Number 带修改莫队 bzoj 2120 数颜色 codeforces 940F Machine Learning 回滚莫队 bzoj 4241 历史研究","tags":[{"name":"莫队算法","slug":"莫队算法","permalink":"http://yoursite.com/tags/%E8%8E%AB%E9%98%9F%E7%AE%97%E6%B3%95/"}]},{"title":"七绝·三月十七日记雪","date":"2018-04-25T13:43:00.000Z","path":"2018/04/25/七律 三月十七日记雪/","text":"七绝·三月十七日记雪 情深几许总成空， 柳絮轻扬未遇风。 无奈曦园留不得， 只看劲挺一青松。 自注： 1.采用首句平起入韵的格式。 2.“空”、“风”为“一东韵”，“松”为“二冬韵” 3.第二句化用“未若柳絮因风起”。 4.第三句意指雪花落地即化。 其实是格律诗词与写作这门课的作业… 随便写了几句，没什么辞藻，格律是没问题的。 老师点评说有点惆怅的感觉:) 还有一个问题是逻辑不太通，这个我也觉得，不过本来就是拼凑的嘛… 就这样吧，嗯","tags":[{"name":"诗词","slug":"诗词","permalink":"http://yoursite.com/tags/%E8%AF%97%E8%AF%8D/"}]},{"title":"正则表达式","date":"2018-04-25T01:34:00.000Z","path":"2018/04/25/正则表达式/","text":"写在前面写这篇文章的初衷是解决一些简单的字符串模拟题目，对于特定的某些题目，有时候用C++11的正则表达式会方便很多。 本文主要总结一下常见的一些正则表达式写法，以及如何使用C++11的regex库，最后以几个具体题目举例。 总的来说，正则表达式最简单的应用是判断一个字符串中是否包含特定字符串。正则表达式是一种文本模式，由普通字符和元字符组成。 常用的元字符 “.” 匹配除“\\n”之外的任何单个字符。 “^” 匹配输入字符串的开始位置，不匹配任何字符，要匹配“^”字符本身，需使用“\\^”；同样的，“$”匹配输入字符串的结束位置。 “[xyz]”字符集，匹配其中包含的任一字符。 “|” 两个匹配条件逻辑或。 “\\w” 匹配字母或数字或下划线；“\\W”匹配任意不是字母、数字、下划线的字符。 “\\d” 匹配任意一个数字；“\\D”匹配任意非数字字符。 “\\s” 匹配任意的空白符，包括空格、制表符、换页符等空白字符的其中任意一个，与“[ \\f\\n\\r\\t\\v]”等效；“\\S” 匹配任意不是空白符的字符。 “\\b” 匹配一个单词边界；“\\B” 匹配非单词边界。 “*” 0次或多次匹配前面的字符或子表达式，“+” 1次或多次匹配前面的字符或子表达式，“?” 0次或1次匹配前面的字符或子表达式。 “{n}” 正好匹配n次，“{n,}” 至少匹配n次，“{n,m}” 匹配n到m次。 举一些例子： “him|her”匹配“him”和“her”，也可写作“h(im|er)” “\\bthe\\b”匹配“in the war”中的“the”，但不匹配“other”中的“the” 分组、捕获、反向引用“( )” 可以将“(”和“)”之间的表达式定义为组，并且将匹配这个表达式的字符保存到一个临时区域。匹配后的各组按照左括号出现的顺序（？）分别存到\\$1,\\$2,\\$3…中。 比如“2018-04-25”，我们用“(\\d{4})-(\\d\\d)-(\\d\\d)”去匹配， 那么 $1 = “2018” $2 = “04” $3 = “25” 如果想让某个括号里的内容不被捕获到，需要用到非捕获性分组 比如“h(im|er)”，就要改为“h(?:im|er)” 然后一个很重要的问题来了!如果想要匹配“看了看”、“研究研究”这样的重叠结构怎么办呢？ 这时候需要用到反向引用，用\\1,\\2,\\3…表示 上面的例子可以用“(..?)了?\\1”去匹配。 语法就先总结到这里，实际还有很多，估计是用不到了。 C++11 regexhttp://www.cplusplus.com/reference/regex/ 最常用的两个类 regex Regex (class ) smatch match_results for string objects (class ) 以及三个函数 regex_match、regex_search、regex_replace 要注意的一点就是在C++中“\\”需要转义，即“\\d”在C++中要写成“\\\\d”，诸如此类。 下面用具体的代码介绍这三个函数 regex_match 判断一个正则表达式是否能匹配整个字符串 123456789101112131415161718192021222324252627282930313233#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;regex&gt;using namespace std;int main ()&#123; if (regex_match (\"subject\", regex(\"(sub)(.*)\") )) cout &lt;&lt; \"string literal matched\\n\"; string s (\"subject\"); regex e (\"(sub)(.*)\"); if (regex_match (s,e)) cout &lt;&lt; \"string object matched\\n\"; if (regex_match ( s.begin(), s.end(), e ) ) cout &lt;&lt; \"range matched\\n\"; smatch sm; // same as std::match_results&lt;string::const_iterator&gt; sm; regex_match (s,sm,e); cout &lt;&lt; \"string object with \" &lt;&lt; sm.size() &lt;&lt; \" matches\\n\"; regex_match ( s.cbegin(), s.cend(), sm, e); cout &lt;&lt; \"range with \" &lt;&lt; sm.size() &lt;&lt; \" matches\\n\"; cout &lt;&lt; \"the matches were: \"; for (unsigned i=0; i&lt;sm.size(); ++i) cout &lt;&lt; \"[\" &lt;&lt; sm[i] &lt;&lt; \"] \"; cout &lt;&lt; endl; return 0;&#125; /* string literal matched string object matchedrange matched string object with 3 matchesrange with 3 matchesthe matches were: [subject] [sub] [ject] */ regex_search 来查找第一个能匹配正则表达式的子串 12345678910111213141516171819202122232425262728293031#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;regex&gt;using namespace std;int main ()&#123; string s (\"this subject has a submarine as a subsequence\"); smatch m; regex e (\"\\\\b(sub)([^ ]*)\"); // matches words beginning by \"sub\" cout &lt;&lt; \"Target sequence: \" &lt;&lt; s &lt;&lt; std::endl; cout &lt;&lt; \"Regular expression: /\\\\b(sub)([^ ]*)/\" &lt;&lt; std::endl; cout &lt;&lt; \"The following matches and submatches were found:\" &lt;&lt; std::endl; while (regex_search (s,m,e)) &#123; for (auto x:m) cout &lt;&lt; x &lt;&lt; \" \"; cout &lt;&lt; endl; s = m.suffix().str(); &#125; return 0;&#125;/*Target sequence: this subject has a submarine as a subsequenceRegular expression: /\\b(sub)([^ ]*)/The following matches and submatches were found:subject sub jectsubmarine sub marinesubsequence sub sequence*/ regex_replace 匹配并替换 12345678910111213141516171819202122232425262728293031// regex_replace example#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;regex&gt;#include &lt;iterator&gt;using namespace std;int main ()&#123; string s (\"there is a subsequence in the string\\n\"); regex e (\"\\\\b(sub)([^ ]*)\"); // matches words beginning by \"sub\" // using string/c-string (3) version: cout &lt;&lt; regex_replace (s,e,\"sub-$2\"); // using range/c-string (6) version: string result; regex_replace (back_inserter(result), s.begin(), s.end(), e, \"$2\"); cout &lt;&lt; result; // with flags: cout &lt;&lt; regex_replace (s,e,\"$1 and $2\",regex_constants::format_no_copy); cout &lt;&lt; endl; return 0;&#125;/*there is a sub-sequence in the stringthere is a sequence in the stringsub and sequence*/ 题目基本的工具基本介绍完了，可以来切一些水题了！ Two stringsfrom 2017 Multi-University Training Contest 给两个字符串A、B，其中A只包含大小写字母，B只包含大小写字母和两个特殊符号“.”、“*”。 “.”可以匹配任意字母，“*”表示前一个字符可以出现任意次。保证“*”不会在字符串开头，不会有两个连续的“*”。问A与B能否匹配。 首先，这里的“.*”和正则表达式里介绍的概念不一样。因为“*”使用的条件是前一个字符确定。即“.*”不能匹配“ab”，但是可以匹配“aa”或“bbb”这样。 这里用反向引用就好了，先将“.*”换成“(\\w)\\1*”即可。 AC代码只有这么短 1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std;string str1,str2;int main()&#123; int T; scanf(\"%d\",&amp;T); while(T--) &#123; cin&gt;&gt;str1&gt;&gt;str2; regex reg_rep(\"\\\\.\\\\*\"); str2=regex_replace(str2,reg_rep,\"(\\\\w)\\\\1*\"); regex reg(str2); if(regex_match(str1,reg)) puts(\"yes\"); else puts(\"no\"); &#125;&#125; Abbreviationfrom 2016-2017 ACM-ICPC Northeastern European Regional Contest (NEERC 16) 题意：大概是给一段包含大小写字母和逗号句号的文本，要求缩写连续的大写字母开头的单词。当时这个模拟写的十分难受想死，结果题解上写了一句有队伍用正则表达式很快就A了这个题目。 样例输入： 1234This is ACM North Eastern European Regional Contest,sponsored by International Business Machines.The. Best. Contest. Ever.A Great Opportunity for all contestants. 样例输出： 1234This is ACM NEERC (North Eastern European Regional Contest),sponsored by IBM (International Business Machines).The. Best. Contest. Ever.A GO (Great Opportunity) for all contestants. AC代码（赛后补的）： 12345678910111213141516171819202122232425262728293031#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; freopen(\"abbreviation.in\",\"r\",stdin); freopen(\"abbreviation.out\",\"w\",stdout); regex reg(\"\\\\b([A-Z][a-z]+ )+([A-Z][a-z]+)\\\\b\"); smatch reg_match; string str; while(getline(cin,str)) &#123; int len=str.length(); while(regex_search(str,reg_match,reg)) &#123; string sub=reg_match[0]; int sublen=sub.length(); int pos=str.find(sub); for(int i=0;i&lt;pos;++i) putchar(str[i]); for(int i=0;i&lt;sublen;++i) if(isupper(sub[i])) putchar(sub[i]); putchar(' '); putchar('('); for(int i=0;i&lt;sublen;++i) putchar(sub[i]); putchar(')'); str=reg_match.suffix().str(); &#125; for(auto &amp;ch:str) putchar(ch); puts(\"\"); &#125;&#125; 赛中写的字符串模拟： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include&lt;bits/stdc++.h&gt;using namespace std;string s;vector&lt;string&gt; vec;bool ok(string &amp;s)&#123; int len=s.length(); if(len&lt;=1) return false; if(!isupper(s[0])) return false; for(int i=1;i&lt;len;++i) if(!islower(s[i])) return false; return true;&#125;bool output(int l,int r)&#123; for(int i=l;i&lt;=r;++i) putchar(s[i]);&#125;int main()&#123; freopen(\"abbreviation.in\",\"r\",stdin); freopen(\"abbreviation.out\",\"w\",stdout); while(getline(cin,s)) &#123; int len=s.length(); int i=0; while(i&lt;len) &#123; // cout&lt;&lt;\"len=\"&lt;&lt;len&lt;&lt;endl; if(!isalpha(s[i])) putchar(s[i++]); else &#123; vec.clear(); while(i&lt;len) &#123; string word; while(i&lt;len &amp;&amp; isalpha(s[i])) word+=s[i],i++; vec.push_back(word); if(s[i]!=' ') break; else i++; //cout&lt;&lt;word&lt;&lt;endl; &#125; //cout&lt;&lt;i&lt;&lt;endl; int sz=vec.size(),num; //cout&lt;&lt;\"sz=\"&lt;&lt;sz&lt;&lt;endl; for(int k=0;k&lt;sz;++k) &#123; int now=k; while(now&lt;sz &amp;&amp; ok(vec[now])) ++now; if(now==k) &#123; cout&lt;&lt;vec[k]; if(k!=sz-1) cout&lt;&lt;\" \"; &#125; else if(k+1==now) &#123; --now; cout&lt;&lt;vec[k]; if(k!=sz-1) cout&lt;&lt;\" \"; &#125; else &#123; for(int j=k;j&lt;now;++j) putchar(vec[j][0]); putchar(' '); putchar('('); for(int j=k;j&lt;now;++j) &#123; cout&lt;&lt;vec[j]; if(j&lt;now-1) cout&lt;&lt;\" \"; &#125; putchar(')'); --now; if(now!=sz-1) cout&lt;&lt;\" \"; &#125; k=now; &#125; //cout&lt;&lt;endl; // cout&lt;&lt;\"ok\"&lt;&lt;endl; while(i&lt;len &amp;&amp; !isalpha(s[i])) putchar(s[i++]); &#125; &#125; puts(\"\"); &#125; return 0;&#125; 命名规范问题from 第十六届北京师范大学程序设计竞赛现场决赛 题意：给一些变量名，将符合(题中描述的) 驼峰命名法规范的变量名转换为下划线命名法。不符合的原样输出。 好吧，这个题其实是我出的，标程用正则表达式，20行左右搞定。 应该并不毒瘤吧，看大家模拟的挺开心的。 代码： 123456789101112131415161718192021#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; regex reg(\"\\\\b[A-Za-z][a-z]+([A-Z][a-z]+)+\\\\b\"); regex cap(\"[A-Z]\"); int T; cin&gt;&gt;T; while(T--) &#123; string now; cin&gt;&gt;now; if(regex_match(now,reg)) &#123; now=regex_replace(now,cap,\"_$0\"); transform(now.begin(),now.end(),now.begin(),::tolower); &#125; if(now[0]=='_') now.erase(0,1); cout&lt;&lt;now&lt;&lt;endl; &#125;&#125;","tags":[{"name":"regex","slug":"regex","permalink":"http://yoursite.com/tags/regex/"}]},{"title":"树链剖分","date":"2018-04-24T06:48:00.000Z","path":"2018/04/24/树链剖分/","text":"简单回顾一下树链剖分（以下摘自2009年漆子超的论文《分治算法在树的路径问题中的应用 》）： 定义： 将树中的边分为两类：轻边和重边。 记$Size(U)$表示以$U$为根的子树的结点个数。 令$V$为$U$的儿子中$Size(V)$最大的一个，那么我们称边$(U,V)$为重边，其余边为轻边。 我们称某条路径为重路径，当且仅当它全部由重边组成。 性质： 性质1：如果$(U,V)$为轻边，则$Size(V) \\leq \\frac{Size(U)}{2}$。 性质2：从根到某一点的路径上轻边的个数不大于$O(log_{2} N)$。 性质3：我们称某条路径为重路径，当且仅当它全部由重边组成。那么对于每个点到根的路径上都不超过 $O(log_{2} N)$ 条轻边和$O( log_{2} N)$条重路径。 证明：性质1根据定义来看比较显然。 性质2的话，从某点出发向上走，每经过一条轻边，当前子树的大小就至少变成2倍（由性质1得），所以根到某一点的路径上轻边的个数不大于$O(log_{2} N)$。 性质3，因为重路径是被轻边间隔开的，所以从每个点到根的路径上经过的重路径的条数是不超过轻边条数+1的，所以也是$O( log_{2} N)$级别的。 应用： 用于求LCA（推荐） 与线段树结合维护查询树链信息 利用重链dfs序连续，代替倍增求点x往上跳k步的点是谁。 代码： deep数组表示深度 fa数组表示父节点 son数组表示重儿子 top数组表示每个点所在重链的顶端节点 pos数组表示每个点按照重链优先dfs下的dfs序 1234567891011121314151617181920212223242526272829303132333435363738394041int deep[N],fa[N],num[N],son[N],top[N],pos[N];void dfs(int x,int pre,int d) &#123; deep[x]=d; fa[x]=pre; num[x]=1; for(auto &amp;y:e[x]) if(y!=pre) &#123; dfs(y,x,d+1); num[x]+=num[y]; if(son[x]==-1 || num[y]&gt;num[son[x]]) son[x]=y; &#125;&#125;void dfs(int x,int root) &#123; top[x]=root; pos[x]=++cnt; if(son[x]==-1) return; else dfs(son[x],root); for(auto &amp;y:e[x]) if(y!=fa[x] &amp;&amp; y!=son[x]) dfs(y,y);&#125;int getmax(int x,int y) &#123; //求树链点权最大值 int f1=top[x],f2=top[y]; int ans=-inf; while(f1!=f2) &#123; if(deep[f1]&lt;deep[f2]) &#123; swap(x,y); swap(f1,f2); &#125; ans=max(ans,ask_max(1,pos[f1],pos[x])); //ask_max 线段树查询 x=fa[f1]; f1=top[x]; &#125; if(deep[x]&gt;deep[y]) swap(x,y); return max(ans,ask_max(1,pos[x],pos[y]));&#125;void init() &#123; memset(son,-1,sizeof(son)); cnt=0;&#125;","tags":[{"name":"树链剖分","slug":"树链剖分","permalink":"http://yoursite.com/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"}]}]