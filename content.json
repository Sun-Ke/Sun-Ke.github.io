[{"title":"Markdown For Typora","date":"2020-04-18T14:02:47.000Z","path":"2020/04/18/Markdown For Typora/","text":"Markdown For TyporaOverviewMarkdown is created by Daring Fireball; the original guideline is here. Its syntax, however, varies between different parsers or editors. Typora is using GitHub Flavored Markdown. [toc] Block ElementsParagraph and line breaksA paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by two or more blank lines. In Typora, you only need one blank line (press Return once) to create a new paragraph. Press Shift + Return to create a single line break. Most other markdown parsers will ignore single line breaks, so in order to make other markdown parsers recognize your line break, you can leave two spaces at the end of the line, or insert &lt;br/&gt;. HeadersHeaders use 1-6 hash (#) characters at the start of the line, corresponding to header levels 1-6. For example: 12345# This is an H1## This is an H2###### This is an H6 In Typora, input ‘#’s followed by title content, and press Return key will create a header. BlockquotesMarkdown uses email-style &gt; characters for block quoting. They are presented as: 1234567&gt; This is a blockquote with two paragraphs. This is first paragraph.&gt;&gt; This is second pragraph. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; This is another blockquote with one paragraph. There is three empty line to seperate two blockquote. In Typora, inputting ‘&gt;’ followed by your quote contents will generate a quote block. Typora will insert a proper ‘&gt;’ or line break for you. Nested block quotes (a block quote inside another block quote) by adding additional levels of ‘&gt;’. ListsInput * list item 1 will create an unordered list - the * symbol can be replace with + or -. Input 1. list item 1 will create an ordered list - their markdown source code is as follows: 123456789## un-ordered list* Red* Green* Blue## ordered list1. Red2. Green3. Blue Task ListTask lists are lists with items marked as either [ ] or [x] (incomplete or complete). For example: 12345- [ ] a task list item- [ ] list syntax required- [ ] normal **formatting**, @mentions, #1234 refs- [ ] incomplete- [x] completed You can change the complete/incomplete state by clicking on the checkbox before the item. (Fenced) Code BlocksTypora only supports fences in GitHub Flavored Markdown. Original code blocks in markdown are not supported. Using fences is easy: Input ``` and press return. Add an optional language identifier after ``` and we’ll run it through syntax highlighting: 1Here's an example: function test() { console.log(“notice the blank line before this function?”);} 123456syntax highlighting:​&#96;&#96;&#96;rubyrequire &#39;redcarpet&#39;markdown &#x3D; Redcarpet.new(&quot;Hello World!&quot;)puts markdown.to_html 123456789101112131415161718192021222324252627### Math BlocksYou can render *LaTeX* mathematical expressions using **MathJax**.To add a mathematical expression, input &#96;$$&#96; and press the &#39;Return&#39; key. This will trigger an input field which accepts *Tex&#x2F;LaTex* source. For example:$$\\mathbf&#123;V&#125;_1 \\times \\mathbf&#123;V&#125;_2 &#x3D; \\begin&#123;vmatrix&#125;\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\\\end&#123;vmatrix&#125;$$In the markdown source file, the math block is a *LaTeX* expression wrapped by a pair of ‘$$’ marks:​&#96;&#96;&#96; markdown$$\\mathbf&#123;V&#125;_1 \\times \\mathbf&#123;V&#125;_2 &#x3D; \\begin&#123;vmatrix&#125;\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\\\end&#123;vmatrix&#125;$$ You can find more details here. TablesInput | First Header | Second Header | and press the return key. This will create a table with two columns. After a table is created, putting focus on that table will open up a toolbar for the table where you can resize, align, or delete the table. You can also use the context menu to copy and add/delete individual columns/rows. The full syntax for tables is described below, but it is not necessary to know the full syntax in detail as the markdown source code for tables is generated automatically by Typora. In markdown source code, they look like: 1234| First Header | Second Header || ------------- | ------------- || Content Cell | Content Cell || Content Cell | Content Cell | You can also include inline Markdown such as links, bold, italics, or strikethrough in the table. Finally, by including colons (:) within the header row, you can define text in that column to be left-aligned, right-aligned, or center-aligned: 12345| Left-Aligned | Center Aligned | Right Aligned || :------------ |:---------------:| -----:|| col 3 is | some wordy text | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 | A colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column. Footnotes123You can create footnotes like this[^footnote].[^footnote]: Here is the *text* of the **footnote**. will produce: You can create footnotes like this[^footnote]. [^footnote]: Here is the text of the footnote. Hover over the ‘footnote’ superscript to see content of the footnote. Horizontal RulesInputting *** or --- on a blank line and pressing return will draw a horizontal line. YAML Front MatterTypora now supports YAML Front Matter. Input --- at the top of the article and then press Return to introduce a metadata block. Alternatively, you can insert a metadata block from the top menu of Typora. Table of Contents (TOC)Input [toc] and press the Return key. This will create a “Table of Contents” section. The TOC extracts all headers from the document, and its contents are updated automatically as you add to the document. Span ElementsSpan elements will be parsed and rendered right after typing. Moving the cursor in middle of those span elements will expand those elements into markdown source. Below is an explanation of the syntax for each span element. LinksMarkdown supports two styles of links: inline and reference. In both styles, the link text is delimited by [square brackets]. To create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example: 123This is [an example](http://example.com/ \"Title\") inline link.[This link](http://example.net/) has no title attribute. will produce: This is an example inline link. (&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;) This link has no title attribute. (&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no) Internal LinksYou can set the href to headers, which will create a bookmark that allow you to jump to that section after clicking. For example: Command(on Windows: Ctrl) + Click This link will jump to header Block Elements. To see how to write that, please move cursor or click that link with ⌘ key pressed to expand the element into markdown source. Reference LinksReference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link: 12345This is [an example][id] reference-style link.Then, anywhere in the document, you define your link label on a line by itself like this:[id]: http://example.com/ \"Optional Title Here\" In Typora, they will be rendered like so: This is an example reference-style link. The implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — for example, to link the word “Google” to the google.com web site, you could simply write: 1234[Google][]And then define the link:[Google]: http://google.com/ In Typora, clicking the link will expand it for editing, and command+click will open the hyperlink in your web browser. URLsTypora allows you to insert URLs as links, wrapped by &lt;brackets&gt;. &lt;i@typora.io&gt; becomes &#105;&#64;&#116;&#121;&#112;&#111;&#114;&#x61;&#46;&#x69;&#111;. Typora will also automatically link standard URLs. e.g: www.google.com. ImagesImages have similar syntax as links, but they require an additional ! char before the start of the link. The syntax for inserting an image looks like this: 123![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg \"Optional title\") You are able to use drag &amp; drop to insert an image from an image file or your web browser. You can modify the markdown source code by clicking on the image. A relative path will be used if the image that is added using drag &amp; drop is in same directory or sub-directory as the document you’re currently editing. If you’re using markdown for building websites, you may specify a URL prefix for the image preview on your local computer with property typora-root-url in YAML Front Matters. For example, input typora-root-url:/User/Abner/Website/typora.io/ in YAML Front Matters, and then ![alt](/blog/img/test.png) will be treated as ![alt](file:///User/Abner/Website/typora.io/blog/img/test.png) in Typora. You can find more details here. EmphasisMarkdown treats asterisks (*) and underscores (_) as indicators of emphasis. Text wrapped with one * or _ will be wrapped with an HTML &lt;em&gt; tag. E.g: 123*single asterisks*_single underscores_ output: single asterisks single underscores GFM will ignore underscores in words, which is commonly used in code and names, like this: wow_great_stuff do_this_and_do_that_and_another_thing. To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it: 1\\*this text is surrounded by literal asterisks\\* Typora recommends using the * symbol. StrongA double * or _ will cause its enclosed contents to be wrapped with an HTML &lt;strong&gt; tag, e.g: 123**double asterisks**__double underscores__ output: double asterisks double underscores Typora recommends using the ** symbol. CodeTo indicate an inline span of code, wrap it with backtick quotes (`). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example: 1Use the `printf()` function. will produce: Use the printf() function. StrikethroughGFM adds syntax to create strikethrough text, which is missing from standard Markdown. ~~Mistaken text.~~ becomes Mistaken text. UnderlinesUnderline is powered by raw HTML. &lt;u&gt;Underline&lt;/u&gt; becomes Underline. Emoji :smile:Input emoji with syntax :smile:. User can trigger auto-complete suggestions for emoji by pressing ESC key, or trigger it automatically after enabling it on preference panel. Also, inputting UTF-8 emoji characters directly is also supported by going to Edit -&gt; Emoji &amp; Symbols in the menu bar (macOS). Inline MathTo use this feature, please enable it first in the Preference Panel -&gt; Markdown Tab. Then, use $ to wrap a TeX command. For example: $\\lim_{x \\to \\infty} \\exp(-x) = 0$ will be rendered as LaTeX command. To trigger inline preview for inline math: input “$”, then press the ESC key, then input a TeX command. You can find more details here. SubscriptTo use this feature, please enable it first in the Preference Panel -&gt; Markdown Tab. Then, use ~ to wrap subscript content. For example: H~2~O, X~long\\ text~/ SuperscriptTo use this feature, please enable it first in the Preference Panel -&gt; Markdown Tab. Then, use ^ to wrap superscript content. For example: X^2^. HighlightTo use this feature, please enable it first in the Preference Panel -&gt; Markdown Tab. Then, use == to wrap highlight content. For example: ==highlight==. HTMLYou can use HTML to style content what pure Markdown does not support. For example, use &lt;span style=&quot;color:red&quot;&gt;this text is red&lt;/span&gt; to add text with red color. Embed ContentsSome websites provide iframe-based embed code which you can also paste into Typora. For example: 1&lt;iframe height='265' scrolling='no' title='Fancy Animated SVG Menu' src='http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'&gt;&lt;/iframe&gt; VideoYou can use the &lt;video&gt; HTML tag to embed videos. For example: 1&lt;video src=\"xxx.mp4\" /&gt; Other HTML SupportYou can find more details here.","tags":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/tags/markdown/"},{"name":"typora","slug":"typora","permalink":"http://yoursite.com/tags/typora/"}]},{"title":"Hello World","date":"2020-04-18T07:12:27.000Z","path":"2020/04/18/Hello World/","text":"之前用wordpress作为个人博客大概用了三年多，这一段时间里因为各种原因也陆陆续续出了一些问题，大规模的迁移有两三次。上学期不知道为什么服务器的数据库突然空了，导致一学期的文章白写了。考虑到维护服务器确实比较耗费精力，于是决定改用github+hexo的方式搭建静态博客…目前看起来还是比较舒服的。 持续建设中…","tags":[]},{"title":"快速傅里叶变换学习笔记","date":"2018-05-09T06:04:00.000Z","path":"2018/05/09/快速傅里叶变换学习笔记/","text":"一、写在前面最近数字图像处理课正在学快速傅里叶变换，发现自己对此理解的还不是很到位。于是借此机会，对照着《算法导论》，对这部分内容啃一啃。 两个$n$次多项式相加的最直接方法所需的时间是$O(n)$，但是相乘的最直接方法所需的时间为$O(n^2)$。用快速傅里叶变换（Fast Fourier Transform，FFT）可以使多项式相乘的时间复杂度降低为$O(nlogn)$。 需要的一些前置技能：复数、多项式、线性代数。 二、多项式一个以$x$为变量的多项式定义在一个代数域$F$上，将函数$A(x)$表示为形式和: $$A(x)=\\sum_{j=0}^{n-1}a_jx^j$$ 我们称$a_0,a_1,\\dots,a_{n-1}$为如上多项式的系数，所有系数都属于域$F$，典型的情形是复数集合$C$。 如果一个多项式$A(x)$的最高次的非零系数是$a_k$，则称$A(x)$的次数是$k$，记$degree(A)=k$。任何严格大于一个多项式次数的整数都是该多项式的次数界，因此，对于次数界为$n$的多项式，其次数可以是$0\\sim n-1$之间的任何整数。 多项式加法如果$A(x)$和$B(x)$是次数界为$n$的多项式，那么它们的和也是一个次数界为$n$的多项式$C(x)$，对所有属于定义域的$x$，都有$C(x)=A(x)+B(x)$。也就是说， 若 $$A(x)=\\sum_{j=0}^{n-1}a_jx^j$$ $$B(x)=\\sum_{j=0}^{n-1}b_jx^j$$ 则 $$C(x)=\\sum_{j=0}^{n-1}c_jx^j(c_j=a_j+b_j)$$ 例如，如果有多项式$A(x)=6x^3+7x^2-10x+9$和$B(x)=-2x^3+4x-5$，那么$C(x)=4x^3+7x^2-6x+4$。 多项式乘法如果$A(x)$和$B(x)$是次数界为$n$的多项式，那么它们的乘积$C(x)$是一个次数界为$2n-1$的多项式$C(x)$，对所有属于定义域的$x$，都有$C(x)=A(x)B(x)$。方法类似还是用上一个例子，那么得到 $$C(x)=-12x^6-14x^5+44x^4-20x^3-75x^2+86x-45$$ 形式化的式子有 $$C(x)=\\sum_{j=0}^{2n-2}c_jx^j$$ 其中 $$c_j=\\sum_{k=0}^{j}a_{k}b_{j-k}$$ 此时 $$degree(C)=degree(A)+degree(B)$$ 多项式的表示从某种意义上，多项式的系数表达与点值表达式等价的。 系数表达对一个次数界为$n$的多项式$A(x)=\\sum_{j=0}^{n-1}a_jx^j$而言，其系数表达是一个由系数组成的（列）向量$a=(a_0,a_1,\\dots,a_{n-1})$。对于多项式乘法，系数向量$c$成为输入向量$a$和$b$的卷积，表示成$c=a\\otimes b$。 点值表达一个次数界为$n$的多项式$A(x)$的点值表达就是一个由$n$个点值对组成的集合 $${(x_0,y_0),(x_1,y_1),\\dots,(x_{n-1},y_{n-1})}$$ 使得对$k=0,1,\\dots,n-1$，所有$x_k$各不相同，且$y_k=A(x_k)$。 一个多项式可以有很多不同的点值表达。如果采用的点都相同的话，用点值表达多项式做乘法只需$O(n)$的时间。 求值与插值从一个多项式的系数表达转化为点值表达的过程是求值，其逆运算称为插值。 定理（插值多项式的唯一性）：对于任意n个点值对组成的集合${(x_0,y_0),(x_1,y_1),\\dots,(x_{n-1},y_{n-1})}$，其中所有的$x_k$都不同，那么存在唯一的次数界为n的多项式$A(x)$，满足$y_k=A(x_k)$。 证明列出矩阵方程，然后结合范德蒙德矩阵的性质。 简单的求值和插值（拉格朗日插值）的时间复杂度都是$O(n^2)$的。 我们之后就要通过巧妙选取点来加速这两个过程，使其运行时间变为$O(nlogn)$。 三、单位复数根$n$次单位复数根是满足$\\omega ^n=1$的复数$\\omega$。 $n$次单位复数根恰好有$n$个： $$\\omega _{n}^{0},\\omega _{n}^{1},\\dots,\\omega _{n}^{n-1}$$ 其中主$n$次单位复数根为 $$\\omega _n=e^{2\\pi i/n}=\\cos(2\\pi/n)+i\\sin(2\\pi/n)$$ 其他$n$次单位复数根都是$\\omega _n$的幂次。 消去引理：对于任何整数$n\\ge 0,k\\ge 0,d&gt;0$，有$\\omega _{dn}^{dk}=\\omega _{n}^{k}$ 推论：对于任意偶数$n&gt;0$，有$\\omega _{n}^{n/2}=\\omega _{2}=-1$ 折半引理：如果$n&gt;0$为偶数，那么$n$个$n$次单位复数根的平方的集合就是$n/2$个$n/2$次单位复数根的集合 求和引理：对任意整数$n\\geq 1$和不能被$n$整除的非负整数$k$，有$\\sum_{j=0}^{n-1}(\\omega _n^k)^j=0$ 四、快速傅里叶变换DFT现在我们希望计算次数界$n$的多项式 $$A(x)=\\sum_{j=0}^{n-1}a_jx^j$$ 在$\\omega_{n}^{k}$处的值，记为$y_k$ $$y_k=A(\\omega_{n}^{k})=\\sum_{j=0}^{n-1}a_j\\omega_{n}^{kj}$$ 向量$y=(y_0,y_1,\\dots,y_{n-1})$就是系数向量$a=(a_0,a_1,\\dots,a_{n-1})$的离散傅里叶变换（DFT），记为$y=DFT_n(a)$。 FFT快速傅里叶变换（FFT）利用复数单位根的特殊性质，可以在$O(nlogn)$时间内计算出$DFT_n(a)$。首先通篇假设$n$恰好是$2$的整数幂。 FFT利用了分治策略，采用$A(x)$中偶数下标的系数与奇数下标的系数，分别定义两个新的次数界为$n/2$的多项式$A^{[0]}(x)$和$A^{[1]}(x)$: $$A^{[0]}(x)=a_{0}+a_{2}x+a_{4}x^2+\\dots+a_{n-2}x^{n/2-1}$$ $$A^{[1]}(x)=a_{1}+a_{3}x+a_{5}x^2+\\dots+a_{n-1}x^{n/2-1}$$ 于是有 $$A(x)=A^{[0]}(x^2)+xA^{[1]}(x^2)$$ 所以，求$A(x)$在$\\omega _{n}^{0},\\omega _{n}^{1},\\dots,\\omega _{n}^{n-1}$处的值转换为求次数界为$n/2$的多项式$A^{[0]}(x)$和$A^{[1]}(x)$在点$(\\omega _{n}^{0})^2,(\\omega _{n}^{1})^2,\\dots,(\\omega _{n}^{n-1})^2$的值。可以发现其实是$n/2$个$n/2$次单位复数根，且每个根恰好出现两次。 IDFT将点值表达的多项式转换回系数表达，是相似的过程。 我们把DFT写成矩阵乘积$y=V_{n}a$。 其中$V_{n}$是一个范德蒙德矩阵，在$(k,j)$处的元素为$\\omega _{n}^{kj}$。 对于逆运算$a=DFT_{n}^{-1}(y)$，我们把$y$乘以$V_{n}$的逆矩阵来处理。 定理：对$j,k=0,1,\\dots,n-1$，$V_{n}^{-1}$在$(j,k)$元素为$\\omega _{n}^{-kj}/n$。 证明$V_{n}^{-1}V_{n}=I_n$时用求和引理即可，注意使用条件。 所以可以推导出$DFT_{n}^{-1}(y)$： $$a_j=\\frac{1}{n}\\sum_{k=0}^{n-1}y_{k}\\omega_n^{-kj}$$ 可以看出只需将单位根取倒数，做一次FFT，最后将结果都除以n，就做完逆变换了。 五、代码实现首先是手写复数类，也可以用std::complex。 123456789101112131415161718192021struct Complex&#123; double x,y; Complex(double x_=0,double y_=0) &#123; x=x_; y=y_; &#125; Complex operator -(const Complex &amp;t)const &#123; return Complex(x-t.x,y-t.y); &#125; Complex operator +(const Complex &amp;t)const &#123; return Complex(x+t.x,y+t.y); &#125; Complex operator *(const Complex &amp;t)const &#123; return Complex(x*t.x-y*t.y,x*t.y+y*t.x); &#125;&#125;; 递归实现12345678910111213141516171819202122void fft(Complex y[],int n)&#123; if(n==1) return; static Complex c[MAXN]; int m=n/2; for(int i=0;i&lt;m;++i) &#123; c[i]=y[i*2]; c[i+m]=y[i*2+1]; &#125; copy(c,c+n,y); Complex *a0=y,*a1=y+m; fft(a0,m); fft(a1,m); for(int i=0;i&lt;m;++i) &#123; Complex w(cos(-2*PI/n*i),sin(-2*PI/n*i)); c[i]=a0[i]+w*a1[i]; c[i+m]=a0[i]-w*a1[i]; &#125; copy(c,c+n,y);&#125; 合并过程的推导： 对于$0 \\le k &lt; n/2$ $$\\begin{aligned}y _k &amp; =A(\\omega _{n}^{k}) \\\\&amp; =A^{[0]}(\\omega _{n}^{2k})+\\omega _{n}^{k}A^{[1]}(\\omega _{n}^{2k}) \\\\&amp; =A^{[0]}(\\omega _{n/2}^{k})+\\omega _{n}^{k}A^{[1]}(\\omega _{n/2}^{k}) \\\\&amp; =y_k^{[0]}+\\omega _{n}^{k}y_k^{[1]}\\end{aligned}$$ 前半段没什么问题，再来看后半段 $$\\begin{aligned} y_{k+(n/2)} &amp; =A(\\omega _{n}^{k+(n/2)}) \\\\&amp; =A^{[0]}(\\omega _{n}^{2k+n})+\\omega _{n}^{k+(n/2)}A^{[1]}(\\omega _{n}^{2k+n}) \\\\&amp; =A^{[0]}(\\omega _{n}^{2k})-\\omega _{n}^{k}A^{[1]}(\\omega _{n}^{2k}) \\\\&amp; =A^{[0]}(\\omega _{n/2}^{k})-\\omega _{n}^{k}A^{[1]}(\\omega _{n/2}^{k}) \\\\&amp; =y_k^{[0]}-\\omega _{n}^{k}y_k^{[1]}\\end{aligned}$$ 迭代实现递归实际运行起来常数很大，我们需要更高效的实现方法。 先来观察一下递归过程中输入向量的下标变化，以$n=8$举例，可以将这个过程自行脑补成一个完全二叉树的样子： 0 1 2 3 4 5 6 7 0 2 4 6 - 1 3 5 7 0 4 - 2 6 - 1 5 - 3 7 0 - 4 - 2 - 6 - 1 - 5 - 3 - 7 如果观察二进制的话会发现对应的下标是反转二进制位得到的，比如“011”变成“110”，即下标3变成了6。 代码实现举例两种 直接求出对应位置反转二进制位后的数，然后交换，时间复杂度$O(nlogn)$ 12345678910111213void change(Complex y[],int len)&#123; int k=0; while((1&lt;&lt;k)&lt;len) ++k; for(int i=0;i&lt;len;++i) &#123; int t=0; for(int j=0;j&lt;k;++j) if(i&gt;&gt;j&amp;1) t|=1&lt;&lt;(k-j-1); if(i&lt;t) swap(y[i],y[t]); &#125;&#125; 从高位模拟二进制加一，用经典的摊还分析可以证明复杂度是$O(n)$ 123456789101112131415void change(Complex y[],int len)&#123; int i,j,k; for(i=1,j=len/2;i&lt;len-1;i++) &#123; if(i&lt;j) swap(y[i],y[j]); k=len/2; while(j&gt;=k) &#123; j-=k; k/=2; &#125; if(j&lt;k) j+=k; &#125;&#125; 之后我们再考虑自底向上的合并，在之前的递归版本中，有一个公用子表达式$\\omega _{n}^{k}y_k^{[1]}$计算了两次，我们可以只计算一次乘积，存放在临时变量$t$里，然后从$y_k^{[0]}$中增加或者减去$t$，这一系列操作称为一个蝴蝶操作。 代码： 1234567891011121314151617181920212223void fft(Complex y[],int len,int on)&#123; change(y,len); for(int h=2;h&lt;=len;h&lt;&lt;=1) &#123; Complex wn(cos(-on*2*PI/h),sin(-on*2*PI/h)); for(int j=0;j&lt;len;j+=h) &#123; Complex w(1,0); for(int k=j;k&lt;j+h/2;k++) &#123; Complex u=y[k]; Complex t=w*y[k+h/2]; y[k]=u+t; y[k+h/2]=u-t; w=w*wn; &#125; &#125; &#125; if(on==-1) for(int i=0;i&lt;len;i++) y[i].x/=len;&#125; on取值1或-1，on为-1代表逆变换。 实际上，预处理单位根代替每次旋转精度会更好。 六、模板多项式乘法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long LL;const double PI=acos(-1.0);const int MAXN=1&lt;&lt;18;struct Complex&#123; double x,y; Complex(double x_=0,double y_=0) &#123; x=x_; y=y_; &#125; Complex operator -(const Complex &amp;t)const &#123; return Complex(x-t.x,y-t.y); &#125; Complex operator +(const Complex &amp;t)const &#123; return Complex(x+t.x,y+t.y); &#125; Complex operator *(const Complex &amp;t)const &#123; return Complex(x*t.x-y*t.y,x*t.y+y*t.x); &#125;&#125; x1[MAXN+5],x2[MAXN+5],wn[MAXN+5];void init()&#123; for(int i=0;i&lt;=MAXN;++i) wn[i]=Complex(cos(-2*PI*i/MAXN),sin(-2*PI*i/MAXN));&#125;void change(Complex y[],int len)&#123; int i,j,k; for(i=1,j=len/2;i&lt;len-1;i++) &#123; if(i&lt;j) swap(y[i],y[j]); k=len/2; while(j&gt;=k) &#123; j-=k; k/=2; &#125; if(j&lt;k) j+=k; &#125;&#125;void fft(Complex y[],int len,int on)&#123; change(y,len); for(int h=2;h&lt;=len;h&lt;&lt;=1) &#123; int st=MAXN/h; for(int j=0;j&lt;len;j+=h) &#123; int ptr=0; for(int k=j;k&lt;j+h/2;k++) &#123; Complex w=wn[on==1?ptr:MAXN-ptr]; Complex u=y[k],t=w*y[k+h/2]; y[k]=u+t; y[k+h/2]=u-t; ptr+=st; &#125; &#125; &#125; if(on==-1) for(int i=0;i&lt;len;i++) y[i].x/=len;&#125;int n,m;int main()&#123; init(); scanf(\"%d%d\",&amp;n,&amp;m); ++n;++m; int len=1; while(len&lt;(n&lt;&lt;1)||len&lt;(m&lt;&lt;1)) len&lt;&lt;=1; for(int i=0;i&lt;n;++i) &#123; int x; scanf(\"%d\",&amp;x); x1[i].x=x; &#125; for(int i=0;i&lt;m;++i) &#123; int x; scanf(\"%d\",&amp;x); x2[i].x=x; &#125; fft(x1,len,1); fft(x2,len,1); for(int i=0;i&lt;len;++i) x1[i]=x1[i]*x2[i]; fft(x1,len,-1); for(int i=0;i&lt;n+m-1;++i) printf(\"%d%c\",(int)(x1[i].x+0.5),\" \\n\"[i==n+m-2]); return 0;&#125; 七、结语啊，终于弄完快速傅里叶变换了，撒花！ 实际上，关于FFT还有很多东西没有讨论到，先到这里吧。","tags":[{"name":"fft","slug":"fft","permalink":"http://yoursite.com/tags/fft/"}]},{"title":"莫队算法总结","date":"2018-05-03T05:36:00.000Z","path":"2018/05/03/莫队算法总结/","text":"写在前面莫队算法用于离线解决一类区间问题。 普通莫队如果我们已知查询为区间$[l,r]$的答案，并且能在$O(1)$的时间内通过添加或删除一个元素得到$[l-1,r],[l+1,r],[l,r-1],[l,r+1]$的答案，那么就可以考虑使用莫队算法。 做法： 1.首先我们对原序列分块，原序列长度$N$,每块大小记为$Size$，那么块数为$\\lfloor \\frac{N-1}{Size} \\rfloor +1$，每块从左到右依次编号。 2.对所有询问$[l_i,r_i]$以询问左端点所在块的序号为第一关键字，右端点的大小为第二关键字进行排序。按照这样的顺序通过添加或删除元素求解每个询问的答案。 可以证明当$Size$取$\\sqrt{N}$时，总的时间复杂度为$O(N^{1.5})$。 左端点在同一块时，右端点是递增的，变化$N$次，共有$\\sqrt{N}$个块，这一部分复杂度为$O(N^{1.5})$。 左端点转移到下一块时，右端点最多变化$N$次，共有$\\sqrt{N}$个块，这一部分复杂度为$O(N^{1.5})$。 左端点在同一块时，每次最多变化$\\sqrt{N}$，转移到下一块时，最多变化$2\\sqrt{N}$，询问共$N$个，这一部分复杂度为$O(N^{1.5})$。 模板： 1234567891011121314151617181920212223const int SIZE=300;struct Q&#123;int l,r,order;&#125; q[N];bool cmp(const re &amp;a,const re &amp;b)&#123; if(pos[a.l]!=pos[b.l]) return pos[a.l]&lt;pos[b.l]; return a.r&lt;b.r;&#125;int main()&#123; for(int i=1;i&lt;=n;++i) pos[i]=(i-1)/SIZE+1; for(int i=1;i&lt;=m;++i) q[i].order=i; sort(q+1,q+m+1,cmp); for(int i=1,l=1,r=0; i&lt;=m; ++i) &#123; int L=q[i].l ,R=q[i].r; while(r&lt;R) add(++r); while(r&gt;R) del(r--); while(l&lt;L) del(l++); while(l&gt;L) add(--l) ans[q[i].order]=now; &#125; //for(int i=1; i&lt;=m; ++i) print ans[i]&#125; 带修改莫队对于一些带单点修改的问题，还是存在一种莫队姿势的。当然，一次修改要求$O(1)$完成。 每个修改操作记录位置和修改前后的值，这样方便还原修改。 每个询问除了记录区间$[l,r]$之外，还要记录在此询问之前的修改操作个数（也可以叫做时间）$t$，记$pos_x$表示$x$所在块的编号。 那么将所有询问按照$(pos_l,pos_r,t)$做三关键字排序。那么在普通莫队的基础上，再维护一个修改时间就可以了。 可以证明当$Size$取$N^{\\frac{2}{3}}$时，左端点、右端点、以及时间的移动复杂度均为$O(N^{\\frac{5}{3}})$，所以总的时间复杂度为$O(N^{\\frac{5}{3}})$。 懒得分析了。 模板： 123456789101112131415161718192021222324252627282930313233343536373839404142struct Change&#123; int x,y,pre;&#125;c[N];struct Ask&#123; int l,r,id,time;&#125;q[N];bool cmp(const Ask &amp;a,const Ask &amp;b)&#123; if(pos[a.l]!=pos[b.l]) return pos[a.l]&lt;pos[b.l]; if(pos[a.r]!=pos[b.r]) return pos[a.r]&lt;pos[b.r]; return a.time&lt;b.time;&#125;void change(int i,int l,int r,bool flag)&#123; int y=c[i].x; if(l&lt;=y &amp;&amp; y&lt;=r) erase(y); color[y]=flag?c[i].y:c[i].pre; if(l&lt;=y &amp;&amp; y&lt;=r) insert(y);&#125;int main()&#123; size=pow(n,2.0/3)+1; for(int i=1;i&lt;=n;++i) pos[i]=(i-1)/size+1; sort(q+1,q+numq+1,cmp); int l=1,r=0,curt=0; for(int i=1;i&lt;=numq;++i) &#123; while(curt&lt;q[i].time) change(++curt,l,r,1); while(q[i].time&lt;curt) change(curt--,l,r,0); while(l&lt;q[i].l) erase(l++); while(q[i].l&lt;l) insert(--l); while(q[i].r&lt;r) erase(r--); while(r&lt;q[i].r) insert(++r); ans[q[i].id]=now; &#125;&#125; 回滚莫队我们经常会遇到这样一种问题，即插入操作十分简单，但是直接删除却非常困难（举个例子，当你要维护最值时）。有没有一种办法避免删除呢？有的，用回滚莫队的姿势就好了~ 回滚，rollback，其实意思应该是还原到修改之前。假设当前询问为$[l,r]$。$pos_l$不变时，右端点一直增加，添加操作好说，和普通莫队一样做，但是左端点怎么办呢？我们可以暂时先不把开头$[l,pos_l\\times Size]$这部分添加，然后先存个档，暴力的插入这一小段，得到当前询问的答案后，再读档还原（有些是撤销修改），这就是回滚操作了。 bzoj 4241 历史研究： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define N 100010struct ask&#123; int l,r,o;&#125; q[N];int n,m;int a[N],hs[N],pos[N],num[N];ll now;ll ans[N];bool cmp(const ask &amp;a,const ask &amp;b)&#123; if(pos[a.l]!=pos[b.l]) return pos[a.l]&lt;pos[b.l]; return a.r&lt;b.r;&#125;void del(int x)&#123; --num[a[x]];&#125;void add(int x)&#123; ++num[a[x]]; now=max(now,1LL*hs[a[x]]*num[a[x]]);&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); int siz=sqrt(n); for(int i=1;i&lt;=n;++i) &#123; scanf(\"%d\",a+i); hs[i]=a[i]; pos[i]=(i-1)/siz+1; &#125; sort(hs+1,hs+n+1); int cnt=unique(hs+1,hs+n+1)-hs-1; for(int i=1;i&lt;=n;++i) a[i]=lower_bound(hs+1,hs+cnt+1,a[i])-hs; for(int i=1;i&lt;=m;++i) &#123; scanf(\"%d%d\",&amp;q[i].l,&amp;q[i].r); q[i].o=i; &#125; sort(q+1,q+m+1,cmp); int r=0; for(int i=1;i&lt;=m;++i) &#123; int L=q[i].l,R=q[i].r; if(pos[q[i].l]!=pos[q[i-1].l]) &#123; memset(num,0,sizeof(num)); r=pos[q[i].l]*siz; now=0; &#125; while(r&lt;R) add(++r); ll last=now; for(int j=L;j&lt;=pos[q[i].l]*siz &amp;&amp; j&lt;=R;++j) add(j); ans[q[i].o]=now; //rollback for(int j=L;j&lt;=pos[q[i].l]*siz &amp;&amp; j&lt;=R;++j) del(j); now=last; &#125; for(int i=1;i&lt;=m;++i) printf(\"%lld\\n\",ans[i]); return 0;&#125; 题目普通莫队 codeforces 617E XOR and Favorite Number 带修改莫队 bzoj 2120 数颜色 codeforces 940F Machine Learning 回滚莫队 bzoj 4241 历史研究","tags":[{"name":"莫队算法","slug":"莫队算法","permalink":"http://yoursite.com/tags/%E8%8E%AB%E9%98%9F%E7%AE%97%E6%B3%95/"}]},{"title":"七绝·三月十七日记雪","date":"2018-04-25T13:43:00.000Z","path":"2018/04/25/七律 三月十七日记雪/","text":"七绝·三月十七日记雪 情深几许总成空， 柳絮轻扬未遇风。 无奈曦园留不得， 只看劲挺一青松。 自注： 1.采用首句平起入韵的格式。 2.“空”、“风”为“一东韵”，“松”为“二冬韵” 3.第二句化用“未若柳絮因风起”。 4.第三句意指雪花落地即化。 其实是格律诗词与写作这门课的作业… 随便写了几句，没什么辞藻，格律是没问题的。 老师点评说有点惆怅的感觉:) 还有一个问题是逻辑不太通，这个我也觉得，不过本来就是拼凑的嘛… 就这样吧，嗯","tags":[{"name":"诗词","slug":"诗词","permalink":"http://yoursite.com/tags/%E8%AF%97%E8%AF%8D/"}]},{"title":"正则表达式","date":"2018-04-25T01:34:00.000Z","path":"2018/04/25/正则表达式/","text":"写在前面写这篇文章的初衷是解决一些简单的字符串模拟题目，对于特定的某些题目，有时候用C++11的正则表达式会方便很多。 本文主要总结一下常见的一些正则表达式写法，以及如何使用C++11的regex库，最后以几个具体题目举例。 总的来说，正则表达式最简单的应用是判断一个字符串中是否包含特定字符串。正则表达式是一种文本模式，由普通字符和元字符组成。 常用的元字符 “.” 匹配除“\\n”之外的任何单个字符。 “^” 匹配输入字符串的开始位置，不匹配任何字符，要匹配“^”字符本身，需使用“\\^”；同样的，“$”匹配输入字符串的结束位置。 “[xyz]”字符集，匹配其中包含的任一字符。 “|” 两个匹配条件逻辑或。 “\\w” 匹配字母或数字或下划线；“\\W”匹配任意不是字母、数字、下划线的字符。 “\\d” 匹配任意一个数字；“\\D”匹配任意非数字字符。 “\\s” 匹配任意的空白符，包括空格、制表符、换页符等空白字符的其中任意一个，与“[ \\f\\n\\r\\t\\v]”等效；“\\S” 匹配任意不是空白符的字符。 “\\b” 匹配一个单词边界；“\\B” 匹配非单词边界。 “*” 0次或多次匹配前面的字符或子表达式，“+” 1次或多次匹配前面的字符或子表达式，“?” 0次或1次匹配前面的字符或子表达式。 “{n}” 正好匹配n次，“{n,}” 至少匹配n次，“{n,m}” 匹配n到m次。 举一些例子： “him|her”匹配“him”和“her”，也可写作“h(im|er)” “\\bthe\\b”匹配“in the war”中的“the”，但不匹配“other”中的“the” 分组、捕获、反向引用“( )” 可以将“(”和“)”之间的表达式定义为组，并且将匹配这个表达式的字符保存到一个临时区域。匹配后的各组按照左括号出现的顺序（？）分别存到\\$1,\\$2,\\$3…中。 比如“2018-04-25”，我们用“(\\d{4})-(\\d\\d)-(\\d\\d)”去匹配， 那么 $1 = “2018” $2 = “04” $3 = “25” 如果想让某个括号里的内容不被捕获到，需要用到非捕获性分组 比如“h(im|er)”，就要改为“h(?:im|er)” 然后一个很重要的问题来了!如果想要匹配“看了看”、“研究研究”这样的重叠结构怎么办呢？ 这时候需要用到反向引用，用\\1,\\2,\\3…表示 上面的例子可以用“(..?)了?\\1”去匹配。 语法就先总结到这里，实际还有很多，估计是用不到了。 C++11 regexhttp://www.cplusplus.com/reference/regex/ 最常用的两个类 regex Regex (class ) smatch match_results for string objects (class ) 以及三个函数 regex_match、regex_search、regex_replace 要注意的一点就是在C++中“\\”需要转义，即“\\d”在C++中要写成“\\\\d”，诸如此类。 下面用具体的代码介绍这三个函数 regex_match 判断一个正则表达式是否能匹配整个字符串 123456789101112131415161718192021222324252627282930313233#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;regex&gt;using namespace std;int main ()&#123; if (regex_match (\"subject\", regex(\"(sub)(.*)\") )) cout &lt;&lt; \"string literal matched\\n\"; string s (\"subject\"); regex e (\"(sub)(.*)\"); if (regex_match (s,e)) cout &lt;&lt; \"string object matched\\n\"; if (regex_match ( s.begin(), s.end(), e ) ) cout &lt;&lt; \"range matched\\n\"; smatch sm; // same as std::match_results&lt;string::const_iterator&gt; sm; regex_match (s,sm,e); cout &lt;&lt; \"string object with \" &lt;&lt; sm.size() &lt;&lt; \" matches\\n\"; regex_match ( s.cbegin(), s.cend(), sm, e); cout &lt;&lt; \"range with \" &lt;&lt; sm.size() &lt;&lt; \" matches\\n\"; cout &lt;&lt; \"the matches were: \"; for (unsigned i=0; i&lt;sm.size(); ++i) cout &lt;&lt; \"[\" &lt;&lt; sm[i] &lt;&lt; \"] \"; cout &lt;&lt; endl; return 0;&#125; /* string literal matched string object matchedrange matched string object with 3 matchesrange with 3 matchesthe matches were: [subject] [sub] [ject] */ regex_search 来查找第一个能匹配正则表达式的子串 12345678910111213141516171819202122232425262728293031#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;regex&gt;using namespace std;int main ()&#123; string s (\"this subject has a submarine as a subsequence\"); smatch m; regex e (\"\\\\b(sub)([^ ]*)\"); // matches words beginning by \"sub\" cout &lt;&lt; \"Target sequence: \" &lt;&lt; s &lt;&lt; std::endl; cout &lt;&lt; \"Regular expression: /\\\\b(sub)([^ ]*)/\" &lt;&lt; std::endl; cout &lt;&lt; \"The following matches and submatches were found:\" &lt;&lt; std::endl; while (regex_search (s,m,e)) &#123; for (auto x:m) cout &lt;&lt; x &lt;&lt; \" \"; cout &lt;&lt; endl; s = m.suffix().str(); &#125; return 0;&#125;/*Target sequence: this subject has a submarine as a subsequenceRegular expression: /\\b(sub)([^ ]*)/The following matches and submatches were found:subject sub jectsubmarine sub marinesubsequence sub sequence*/ regex_replace 匹配并替换 12345678910111213141516171819202122232425262728293031// regex_replace example#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;regex&gt;#include &lt;iterator&gt;using namespace std;int main ()&#123; string s (\"there is a subsequence in the string\\n\"); regex e (\"\\\\b(sub)([^ ]*)\"); // matches words beginning by \"sub\" // using string/c-string (3) version: cout &lt;&lt; regex_replace (s,e,\"sub-$2\"); // using range/c-string (6) version: string result; regex_replace (back_inserter(result), s.begin(), s.end(), e, \"$2\"); cout &lt;&lt; result; // with flags: cout &lt;&lt; regex_replace (s,e,\"$1 and $2\",regex_constants::format_no_copy); cout &lt;&lt; endl; return 0;&#125;/*there is a sub-sequence in the stringthere is a sequence in the stringsub and sequence*/ 题目基本的工具基本介绍完了，可以来切一些水题了！ Two stringsfrom 2017 Multi-University Training Contest 给两个字符串A、B，其中A只包含大小写字母，B只包含大小写字母和两个特殊符号“.”、“*”。 “.”可以匹配任意字母，“*”表示前一个字符可以出现任意次。保证“*”不会在字符串开头，不会有两个连续的“*”。问A与B能否匹配。 首先，这里的“.*”和正则表达式里介绍的概念不一样。因为“*”使用的条件是前一个字符确定。即“.*”不能匹配“ab”，但是可以匹配“aa”或“bbb”这样。 这里用反向引用就好了，先将“.*”换成“(\\w)\\1*”即可。 AC代码只有这么短 1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std;string str1,str2;int main()&#123; int T; scanf(\"%d\",&amp;T); while(T--) &#123; cin&gt;&gt;str1&gt;&gt;str2; regex reg_rep(\"\\\\.\\\\*\"); str2=regex_replace(str2,reg_rep,\"(\\\\w)\\\\1*\"); regex reg(str2); if(regex_match(str1,reg)) puts(\"yes\"); else puts(\"no\"); &#125;&#125; Abbreviationfrom 2016-2017 ACM-ICPC Northeastern European Regional Contest (NEERC 16) 题意：大概是给一段包含大小写字母和逗号句号的文本，要求缩写连续的大写字母开头的单词。当时这个模拟写的十分难受想死，结果题解上写了一句有队伍用正则表达式很快就A了这个题目。 样例输入： 1234This is ACM North Eastern European Regional Contest,sponsored by International Business Machines.The. Best. Contest. Ever.A Great Opportunity for all contestants. 样例输出： 1234This is ACM NEERC (North Eastern European Regional Contest),sponsored by IBM (International Business Machines).The. Best. Contest. Ever.A GO (Great Opportunity) for all contestants. AC代码（赛后补的）： 12345678910111213141516171819202122232425262728293031#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; freopen(\"abbreviation.in\",\"r\",stdin); freopen(\"abbreviation.out\",\"w\",stdout); regex reg(\"\\\\b([A-Z][a-z]+ )+([A-Z][a-z]+)\\\\b\"); smatch reg_match; string str; while(getline(cin,str)) &#123; int len=str.length(); while(regex_search(str,reg_match,reg)) &#123; string sub=reg_match[0]; int sublen=sub.length(); int pos=str.find(sub); for(int i=0;i&lt;pos;++i) putchar(str[i]); for(int i=0;i&lt;sublen;++i) if(isupper(sub[i])) putchar(sub[i]); putchar(' '); putchar('('); for(int i=0;i&lt;sublen;++i) putchar(sub[i]); putchar(')'); str=reg_match.suffix().str(); &#125; for(auto &amp;ch:str) putchar(ch); puts(\"\"); &#125;&#125; 赛中写的字符串模拟： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include&lt;bits/stdc++.h&gt;using namespace std;string s;vector&lt;string&gt; vec;bool ok(string &amp;s)&#123; int len=s.length(); if(len&lt;=1) return false; if(!isupper(s[0])) return false; for(int i=1;i&lt;len;++i) if(!islower(s[i])) return false; return true;&#125;bool output(int l,int r)&#123; for(int i=l;i&lt;=r;++i) putchar(s[i]);&#125;int main()&#123; freopen(\"abbreviation.in\",\"r\",stdin); freopen(\"abbreviation.out\",\"w\",stdout); while(getline(cin,s)) &#123; int len=s.length(); int i=0; while(i&lt;len) &#123; // cout&lt;&lt;\"len=\"&lt;&lt;len&lt;&lt;endl; if(!isalpha(s[i])) putchar(s[i++]); else &#123; vec.clear(); while(i&lt;len) &#123; string word; while(i&lt;len &amp;&amp; isalpha(s[i])) word+=s[i],i++; vec.push_back(word); if(s[i]!=' ') break; else i++; //cout&lt;&lt;word&lt;&lt;endl; &#125; //cout&lt;&lt;i&lt;&lt;endl; int sz=vec.size(),num; //cout&lt;&lt;\"sz=\"&lt;&lt;sz&lt;&lt;endl; for(int k=0;k&lt;sz;++k) &#123; int now=k; while(now&lt;sz &amp;&amp; ok(vec[now])) ++now; if(now==k) &#123; cout&lt;&lt;vec[k]; if(k!=sz-1) cout&lt;&lt;\" \"; &#125; else if(k+1==now) &#123; --now; cout&lt;&lt;vec[k]; if(k!=sz-1) cout&lt;&lt;\" \"; &#125; else &#123; for(int j=k;j&lt;now;++j) putchar(vec[j][0]); putchar(' '); putchar('('); for(int j=k;j&lt;now;++j) &#123; cout&lt;&lt;vec[j]; if(j&lt;now-1) cout&lt;&lt;\" \"; &#125; putchar(')'); --now; if(now!=sz-1) cout&lt;&lt;\" \"; &#125; k=now; &#125; //cout&lt;&lt;endl; // cout&lt;&lt;\"ok\"&lt;&lt;endl; while(i&lt;len &amp;&amp; !isalpha(s[i])) putchar(s[i++]); &#125; &#125; puts(\"\"); &#125; return 0;&#125; 命名规范问题from 第十六届北京师范大学程序设计竞赛现场决赛 题意：给一些变量名，将符合(题中描述的) 驼峰命名法规范的变量名转换为下划线命名法。不符合的原样输出。 好吧，这个题其实是我出的，标程用正则表达式，20行左右搞定。 应该并不毒瘤吧，看大家模拟的挺开心的。 代码： 123456789101112131415161718192021#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; regex reg(\"\\\\b[A-Za-z][a-z]+([A-Z][a-z]+)+\\\\b\"); regex cap(\"[A-Z]\"); int T; cin&gt;&gt;T; while(T--) &#123; string now; cin&gt;&gt;now; if(regex_match(now,reg)) &#123; now=regex_replace(now,cap,\"_$0\"); transform(now.begin(),now.end(),now.begin(),::tolower); &#125; if(now[0]=='_') now.erase(0,1); cout&lt;&lt;now&lt;&lt;endl; &#125;&#125;","tags":[{"name":"regex","slug":"regex","permalink":"http://yoursite.com/tags/regex/"}]},{"title":"树链剖分","date":"2018-04-24T06:48:00.000Z","path":"2018/04/24/树链剖分/","text":"简单回顾一下树链剖分（以下摘自2009年漆子超的论文《分治算法在树的路径问题中的应用 》）： 定义： 将树中的边分为两类：轻边和重边。 记$Size(U)$表示以$U$为根的子树的结点个数。 令$V$为$U$的儿子中$Size(V)$最大的一个，那么我们称边$(U,V)$为重边，其余边为轻边。 我们称某条路径为重路径，当且仅当它全部由重边组成。 性质： 性质1：如果$(U,V)$为轻边，则$Size(V) \\leq \\frac{Size(U)}{2}$。 性质2：从根到某一点的路径上轻边的个数不大于$O(log_{2} N)$。 性质3：我们称某条路径为重路径，当且仅当它全部由重边组成。那么对于每个点到根的路径上都不超过 $O(log_{2} N)$ 条轻边和$O( log_{2} N)$条重路径。 证明：性质1根据定义来看比较显然。 性质2的话，从某点出发向上走，每经过一条轻边，当前子树的大小就至少变成2倍（由性质1得），所以根到某一点的路径上轻边的个数不大于$O(log_{2} N)$。 性质3，因为重路径是被轻边间隔开的，所以从每个点到根的路径上经过的重路径的条数是不超过轻边条数+1的，所以也是$O( log_{2} N)$级别的。 应用： 用于求LCA（推荐） 与线段树结合维护查询树链信息 利用重链dfs序连续，代替倍增求点x往上跳k步的点是谁。 代码： deep数组表示深度 fa数组表示父节点 son数组表示重儿子 top数组表示每个点所在重链的顶端节点 pos数组表示每个点按照重链优先dfs下的dfs序 1234567891011121314151617181920212223242526272829303132333435363738394041int deep[N],fa[N],num[N],son[N],top[N],pos[N];void dfs(int x,int pre,int d) &#123; deep[x]=d; fa[x]=pre; num[x]=1; for(auto &amp;y:e[x]) if(y!=pre) &#123; dfs(y,x,d+1); num[x]+=num[y]; if(son[x]==-1 || num[y]&gt;num[son[x]]) son[x]=y; &#125;&#125;void dfs(int x,int root) &#123; top[x]=root; pos[x]=++cnt; if(son[x]==-1) return; else dfs(son[x],root); for(auto &amp;y:e[x]) if(y!=fa[x] &amp;&amp; y!=son[x]) dfs(y,y);&#125;int getmax(int x,int y) &#123; //求树链点权最大值 int f1=top[x],f2=top[y]; int ans=-inf; while(f1!=f2) &#123; if(deep[f1]&lt;deep[f2]) &#123; swap(x,y); swap(f1,f2); &#125; ans=max(ans,ask_max(1,pos[f1],pos[x])); //ask_max 线段树查询 x=fa[f1]; f1=top[x]; &#125; if(deep[x]&gt;deep[y]) swap(x,y); return max(ans,ask_max(1,pos[x],pos[y]));&#125;void init() &#123; memset(son,-1,sizeof(son)); cnt=0;&#125;","tags":[{"name":"树链剖分","slug":"树链剖分","permalink":"http://yoursite.com/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"}]}]