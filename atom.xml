<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Forever you~</title>
  <icon>https://www.gravatar.com/avatar/90af6df82266d6aed61c6eaf0a24e2fe</icon>
  <subtitle>重剑无锋，大巧不工</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-18T14:10:25.098Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Forever you</name>
    <email>573570584@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Markdown For Typora</title>
    <link href="http://yoursite.com/2020/04/18/Markdown%20For%20Typora/"/>
    <id>http://yoursite.com/2020/04/18/Markdown%20For%20Typora/</id>
    <published>2020-04-18T14:02:47.000Z</published>
    <updated>2020-04-18T14:10:25.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown-For-Typora"><a href="#Markdown-For-Typora" class="headerlink" title="Markdown For Typora"></a>Markdown For Typora</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><strong>Markdown</strong> is created by <a href="http://daringfireball.net/" target="_blank" rel="noopener">Daring Fireball</a>; the original guideline is <a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener">here</a>. Its syntax, however, varies between different parsers or editors. <strong>Typora</strong> is using <a href="https://help.github.com/articles/github-flavored-markdown/" target="_blank" rel="noopener">GitHub Flavored Markdown</a>.</p><p>[toc]</p><h2 id="Block-Elements"><a href="#Block-Elements" class="headerlink" title="Block Elements"></a>Block Elements</h2><h3 id="Paragraph-and-line-breaks"><a href="#Paragraph-and-line-breaks" class="headerlink" title="Paragraph and line breaks"></a>Paragraph and line breaks</h3><p>A paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by two or more blank lines. In Typora, you only need one blank line (press <code>Return</code> once) to create a new paragraph.</p><p>Press <code>Shift</code> + <code>Return</code> to create a single line break. Most other markdown parsers will ignore single line breaks, so in order to make other markdown parsers recognize your line break, you can leave two spaces at the end of the line, or insert <code>&lt;br/&gt;</code>.</p><h3 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h3><p>Headers use 1-6 hash (<code>#</code>) characters at the start of the line, corresponding to header levels 1-6. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># This is an H1</span></span><br><span class="line"></span><br><span class="line"><span class="section">## This is an H2</span></span><br><span class="line"></span><br><span class="line"><span class="section">###### This is an H6</span></span><br></pre></td></tr></table></figure><p>In Typora, input ‘#’s followed by title content, and press <code>Return</code> key will create a header.</p><h3 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h3><p>Markdown uses email-style &gt; characters for block quoting. They are presented as:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; This is a blockquote with two paragraphs. This is first paragraph.</span></span><br><span class="line">&gt;</span><br><span class="line"><span class="quote">&gt; This is second pragraph. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; This is another blockquote with one paragraph. There is three empty line to seperate two blockquote.</span></span><br></pre></td></tr></table></figure><p>In Typora, inputting ‘&gt;’ followed by your quote contents will generate a quote block. Typora will insert a proper ‘&gt;’ or line break for you. Nested block quotes (a block quote inside another block quote) by adding additional levels of ‘&gt;’.</p><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><p>Input <code>* list item 1</code> will create an unordered list - the <code>*</code> symbol can be replace with <code>+</code> or <code>-</code>.</p><p>Input <code>1. list item 1</code> will create an ordered list - their markdown source code is as follows:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## un-ordered list</span></span><br><span class="line"><span class="bullet">*   </span>Red</span><br><span class="line"><span class="bullet">*   </span>Green</span><br><span class="line"><span class="bullet">*   </span>Blue</span><br><span class="line"></span><br><span class="line"><span class="section">## ordered list</span></span><br><span class="line"><span class="bullet">1.  </span>Red</span><br><span class="line"><span class="bullet">2. </span>Green</span><br><span class="line"><span class="bullet">3.</span>Blue</span><br></pre></td></tr></table></figure><h3 id="Task-List"><a href="#Task-List" class="headerlink" title="Task List"></a>Task List</h3><p>Task lists are lists with items marked as either [ ] or [x] (incomplete or complete). For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>[ ] a task list item</span><br><span class="line"><span class="bullet">- </span>[ ] list syntax required</span><br><span class="line"><span class="bullet">- </span>[ ] normal <span class="strong">**formatting**</span>, @mentions, #1234 refs</span><br><span class="line"><span class="bullet">- </span>[ ] incomplete</span><br><span class="line"><span class="bullet">- </span>[x] completed</span><br></pre></td></tr></table></figure><p>You can change the complete/incomplete state by clicking on the checkbox before the item.</p><h3 id="Fenced-Code-Blocks"><a href="#Fenced-Code-Blocks" class="headerlink" title="(Fenced) Code Blocks"></a>(Fenced) Code Blocks</h3><p>Typora only supports fences in GitHub Flavored Markdown. Original code blocks in markdown are not supported.</p><p>Using fences is easy: Input ``` and press <code>return</code>. Add an optional language identifier after ``` and we’ll run it through syntax highlighting:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Here's an example:</span><br></pre></td></tr></table></figure><p>function test() {<br>  console.log(“notice the blank line before this function?”);<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">syntax highlighting:</span><br><span class="line">​&#96;&#96;&#96;ruby</span><br><span class="line">require &#39;redcarpet&#39;</span><br><span class="line">markdown &#x3D; Redcarpet.new(&quot;Hello World!&quot;)</span><br><span class="line">puts markdown.to_html</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### Math Blocks</span><br><span class="line"></span><br><span class="line">You can render *LaTeX* mathematical expressions using **MathJax**.</span><br><span class="line"></span><br><span class="line">To add a mathematical expression, input &#96;$$&#96; and press the &#39;Return&#39; key. This will trigger an input field which accepts *Tex&#x2F;LaTex* source. For example:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 &#x3D;  \begin&#123;vmatrix&#125;</span><br><span class="line">\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\</span><br><span class="line">\end&#123;vmatrix&#125;</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In the markdown source file, the math block is a *LaTeX* expression wrapped by a pair of ‘$$’ marks:</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96; markdown</span><br><span class="line">$$</span><br><span class="line">\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 &#x3D;  \begin&#123;vmatrix&#125;</span><br><span class="line">\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\</span><br><span class="line">\end&#123;vmatrix&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>You can find more details <a href="https://support.typora.io/Math/" target="_blank" rel="noopener">here</a>.</p><h3 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h3><p>Input <code>| First Header  | Second Header |</code> and press the <code>return</code> key. This will create a table with two columns.</p><p>After a table is created, putting focus on that table will open up a toolbar for the table where you can resize, align, or delete the table. You can also use the context menu to copy and add/delete individual columns/rows.</p><p>The full syntax for tables is described below, but it is not necessary to know the full syntax in detail as the markdown source code for tables is generated automatically by Typora.</p><p>In markdown source code, they look like:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| First Header  | Second Header |</span><br><span class="line">| ------------- | ------------- |</span><br><span class="line">| Content Cell  | Content Cell  |</span><br><span class="line">| Content Cell  | Content Cell  |</span><br></pre></td></tr></table></figure><p>You can also include inline Markdown such as links, bold, italics, or strikethrough in the table.</p><p>Finally, by including colons (<code>:</code>) within the header row, you can define text in that column to be left-aligned, right-aligned, or center-aligned:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Left-Aligned  | Center Aligned  | Right Aligned |</span><br><span class="line">| :------------ |:---------------:| -----:|</span><br><span class="line">| col 3 is      | some wordy text | $1600 |</span><br><span class="line">| col 2 is      | centered        |   $12 |</span><br><span class="line">| zebra stripes | are neat        |    $1 |</span><br></pre></td></tr></table></figure><p>A colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column.</p><h3 id="Footnotes"><a href="#Footnotes" class="headerlink" title="Footnotes"></a>Footnotes</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">You can create footnotes like this[^footnote].</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^footnote</span>]: <span class="link">Here is the *text* of the **footnote**.</span></span><br></pre></td></tr></table></figure><p>will produce:</p><p>You can create footnotes like this[^footnote].</p><p>[^footnote]: Here is the <em>text</em> of the <strong>footnote</strong>.</p><p>Hover over the ‘footnote’ superscript to see content of the footnote.</p><h3 id="Horizontal-Rules"><a href="#Horizontal-Rules" class="headerlink" title="Horizontal Rules"></a>Horizontal Rules</h3><p>Inputting <code>***</code> or <code>---</code> on a blank line and pressing <code>return</code> will draw a horizontal line.</p><hr><h3 id="YAML-Front-Matter"><a href="#YAML-Front-Matter" class="headerlink" title="YAML Front Matter"></a>YAML Front Matter</h3><p>Typora now supports <a href="http://jekyllrb.com/docs/frontmatter/" target="_blank" rel="noopener">YAML Front Matter</a>. Input <code>---</code> at the top of the article and then press <code>Return</code> to introduce a metadata block. Alternatively, you can insert a metadata block from the top menu of Typora.</p><h3 id="Table-of-Contents-TOC"><a href="#Table-of-Contents-TOC" class="headerlink" title="Table of Contents (TOC)"></a>Table of Contents (TOC)</h3><p>Input <code>[toc]</code> and press the <code>Return</code> key. This will create a  “Table of Contents” section. The TOC extracts all headers from the document, and its contents are updated automatically as you add to the document.</p><h2 id="Span-Elements"><a href="#Span-Elements" class="headerlink" title="Span Elements"></a>Span Elements</h2><p>Span elements will be parsed and rendered right after typing. Moving the cursor in middle of those span elements will expand those elements into markdown source. Below is an explanation of the syntax for each span element.</p><h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><p>Markdown supports two styles of links: inline and reference.</p><p>In both styles, the link text is delimited by [square brackets].</p><p>To create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This is [<span class="string">an example</span>](<span class="link">http://example.com/ "Title"</span>) inline link.</span><br><span class="line"></span><br><span class="line">[<span class="string">This link</span>](<span class="link">http://example.net/</span>) has no title attribute.</span><br></pre></td></tr></table></figure><p>will produce:</p><p>This is <a href="http://example.com/" target="_blank" rel="noopener" title="Title">an example</a> inline link. (<code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;</code>)</p><p><a href="http://example.net/" target="_blank" rel="noopener">This link</a> has no title attribute. (<code>&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no</code>)</p><h4 id="Internal-Links"><a href="#Internal-Links" class="headerlink" title="Internal Links"></a>Internal Links</h4><p><strong>You can set the href to headers</strong>, which will create a bookmark that allow you to jump to that section after clicking. For example:</p><p>Command(on Windows: Ctrl) + Click <a href="#block-elements">This link</a> will jump to header <code>Block Elements</code>. To see how to write that, please move cursor or click that link with <code>⌘</code> key pressed to expand the element into markdown source.</p><h4 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h4><p>Reference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is [<span class="string">an example</span>][<span class="symbol">id</span>] reference-style link.</span><br><span class="line"></span><br><span class="line">Then, anywhere in the document, you define your link label on a line by itself like this:</span><br><span class="line"></span><br><span class="line">[<span class="symbol">id</span>]: <span class="link">http://example.com/  "Optional Title Here"</span></span><br></pre></td></tr></table></figure><p>In Typora, they will be rendered like so:</p><p>This is <a href="http://example.com/" target="_blank" rel="noopener" title="Optional Title Here">an example</a> reference-style link.</p><p>The implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — for example, to link the word “Google” to the google.com web site, you could simply write:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Google</span>][<span class="symbol"></span>]</span><br><span class="line">And then define the link:</span><br><span class="line"></span><br><span class="line">[<span class="symbol">Google</span>]: <span class="link">http://google.com/</span></span><br></pre></td></tr></table></figure><p>In Typora, clicking the link will expand it for editing, and command+click will open the hyperlink in your web browser.</p><h3 id="URLs"><a href="#URLs" class="headerlink" title="URLs"></a>URLs</h3><p>Typora allows you to insert URLs as links, wrapped by <code>&lt;</code>brackets<code>&gt;</code>.</p><p><code>&lt;i@typora.io&gt;</code> becomes <a href="mailto:&#105;&#64;&#116;&#121;&#112;&#111;&#114;&#x61;&#46;&#x69;&#111;">&#105;&#64;&#116;&#121;&#112;&#111;&#114;&#x61;&#46;&#x69;&#111;</a>.</p><p>Typora will also automatically link standard URLs. e.g: <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a>.</p><h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><p>Images have similar syntax as links, but they require an additional <code>!</code> char before the start of the link. The syntax for inserting an image looks like this:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">Alt text</span>](<span class="link">/path/to/img.jpg</span>)</span><br><span class="line"></span><br><span class="line">![<span class="string">Alt text</span>](<span class="link">/path/to/img.jpg "Optional title"</span>)</span><br></pre></td></tr></table></figure><p>You are able to use drag &amp; drop to insert an image from an image file or your web browser. You can modify the markdown source code by clicking on the image. A relative path will be used if the image that is added using drag &amp; drop is in same directory or sub-directory as the document you’re currently editing.</p><p>If you’re using markdown for building websites, you may specify a URL prefix for the image preview on your local computer with property <code>typora-root-url</code> in YAML Front Matters. For example, input <code>typora-root-url:/User/Abner/Website/typora.io/</code> in YAML Front Matters, and then <code>![alt](/blog/img/test.png)</code> will be treated as <code>![alt](file:///User/Abner/Website/typora.io/blog/img/test.png)</code> in Typora.</p><p>You can find more details <a href="https://support.typora.io/Images/" target="_blank" rel="noopener">here</a>.</p><h3 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h3><p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of emphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an HTML <code>&lt;em&gt;</code> tag. E.g:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*single asterisks*</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_single underscores_</span></span><br></pre></td></tr></table></figure><p>output:</p><p><em>single asterisks</em></p><p><em>single underscores</em></p><p>GFM will ignore underscores in words, which is commonly used in code and names, like this:</p><blockquote><p>wow_great_stuff</p><p>do_this_and_do_that_and_another_thing.</p></blockquote><p>To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="emphasis">*this text is surrounded by literal asterisks\*</span></span><br></pre></td></tr></table></figure><p>Typora recommends using the <code>*</code> symbol.</p><h3 id="Strong"><a href="#Strong" class="headerlink" title="Strong"></a>Strong</h3><p>A double <code>*</code> or <code>_</code> will cause its enclosed contents to be wrapped with an HTML <code>&lt;strong&gt;</code> tag, e.g:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**double asterisks**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">__double underscores__</span></span><br></pre></td></tr></table></figure><p>output:</p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><p>Typora recommends using the <code>**</code> symbol.</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>To indicate an inline span of code, wrap it with backtick quotes (`). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Use the <span class="code">`printf()`</span> function.</span><br></pre></td></tr></table></figure><p>will produce:</p><p>Use the <code>printf()</code> function.</p><h3 id="Strikethrough"><a href="#Strikethrough" class="headerlink" title="Strikethrough"></a>Strikethrough</h3><p>GFM adds syntax to create strikethrough text, which is missing from standard Markdown.</p><p><code>~~Mistaken text.~~</code> becomes <del>Mistaken text.</del></p><h3 id="Underlines"><a href="#Underlines" class="headerlink" title="Underlines"></a>Underlines</h3><p>Underline is powered by raw HTML.</p><p><code>&lt;u&gt;Underline&lt;/u&gt;</code> becomes <u>Underline</u>.</p><h3 id="Emoji-smile"><a href="#Emoji-smile" class="headerlink" title="Emoji :smile:"></a>Emoji :smile:</h3><p>Input emoji with syntax <code>:smile:</code>.</p><p>User can trigger auto-complete suggestions for emoji by pressing <code>ESC</code> key, or trigger it automatically after enabling it on preference panel. Also, inputting UTF-8 emoji characters directly is also supported by going to <code>Edit</code> -&gt; <code>Emoji &amp; Symbols</code> in the menu bar (macOS).</p><h3 id="Inline-Math"><a href="#Inline-Math" class="headerlink" title="Inline Math"></a>Inline Math</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>$</code> to wrap a TeX command. For example: <code>$\lim_{x \to \infty} \exp(-x) = 0$</code> will be rendered as LaTeX command.</p><p>To trigger inline preview for inline math: input “$”, then press the <code>ESC</code> key, then input a TeX command.</p><p>You can find more details <a href="https://support.typora.io/Math/" target="_blank" rel="noopener">here</a>.</p><h3 id="Subscript"><a href="#Subscript" class="headerlink" title="Subscript"></a>Subscript</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>~</code> to wrap subscript content. For example: <code>H~2~O</code>, <code>X~long\ text~</code>/</p><h3 id="Superscript"><a href="#Superscript" class="headerlink" title="Superscript"></a>Superscript</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>^</code> to wrap superscript content. For example: <code>X^2^</code>.</p><h3 id="Highlight"><a href="#Highlight" class="headerlink" title="Highlight"></a>Highlight</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>==</code> to wrap highlight content. For example: <code>==highlight==</code>.</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>You can use HTML to style content what pure Markdown does not support. For example, use <code>&lt;span style=&quot;color:red&quot;&gt;this text is red&lt;/span&gt;</code> to add text with red color.</p><h3 id="Embed-Contents"><a href="#Embed-Contents" class="headerlink" title="Embed Contents"></a>Embed Contents</h3><p>Some websites provide iframe-based embed code which you can also paste into Typora. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">height</span>=<span class="string">'265'</span> <span class="attr">scrolling</span>=<span class="string">'no'</span> <span class="attr">title</span>=<span class="string">'Fancy Animated SVG Menu'</span> <span class="attr">src</span>=<span class="string">'http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2'</span> <span class="attr">frameborder</span>=<span class="string">'no'</span> <span class="attr">allowtransparency</span>=<span class="string">'true'</span> <span class="attr">allowfullscreen</span>=<span class="string">'true'</span> <span class="attr">style</span>=<span class="string">'width: 100%;'</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><p>You can use the <code>&lt;video&gt;</code> HTML tag to embed videos. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"xxx.mp4"</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="Other-HTML-Support"><a href="#Other-HTML-Support" class="headerlink" title="Other HTML Support"></a>Other HTML Support</h3><p>You can find more details <a href="https://support.typora.io/HTML/" target="_blank" rel="noopener">here</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Markdown-For-Typora&quot;&gt;&lt;a href=&quot;#Markdown-For-Typora&quot; class=&quot;headerlink&quot; title=&quot;Markdown For Typora&quot;&gt;&lt;/a&gt;Markdown For Typora&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
      <category term="typora" scheme="http://yoursite.com/tags/typora/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/04/18/Hello%20World/"/>
    <id>http://yoursite.com/2020/04/18/Hello%20World/</id>
    <published>2020-04-18T07:12:27.000Z</published>
    <updated>2020-04-18T14:21:13.251Z</updated>
    
    <content type="html"><![CDATA[<p>之前用wordpress作为个人博客大概用了三年多，这一段时间里因为各种原因也陆陆续续出了一些问题，大规模的迁移有两三次。上学期不知道为什么服务器的数据库突然空了，导致一学期的文章白写了。考虑到维护服务器确实比较耗费精力，于是决定改用github+hexo的方式搭建静态博客…目前看起来还是比较舒服的。</p><p>持续建设中…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前用wordpress作为个人博客大概用了三年多，这一段时间里因为各种原因也陆陆续续出了一些问题，大规模的迁移有两三次。上学期不知道为什么服务器的数据库突然空了，导致一学期的文章白写了。考虑到维护服务器确实比较耗费精力，于是决定改用github+hexo的方式搭建静态博客
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2018/04/25/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/04/25/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2018-04-25T01:34:00.000Z</published>
    <updated>2020-04-18T16:56:36.777Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>写这篇文章的初衷是解决一些简单的字符串模拟题目，对于特定的某些题目，有时候用C++11的正则表达式会方便很多。</p><p>本文主要总结一下常见的一些正则表达式写法，以及如何使用C++11的regex库，最后以几个具体题目举例。</p><p>总的来说，正则表达式最简单的应用是判断一个字符串中是否包含特定字符串。正则表达式是一种文本模式，由普通字符和元字符组成。</p><hr><h3 id="常用的元字符"><a href="#常用的元字符" class="headerlink" title="常用的元字符"></a>常用的元字符</h3><ol><li>“.” 匹配除“\n”之外的任何单个字符。</li><li>“^” 匹配输入字符串的开始位置，不匹配任何字符，要匹配“^”字符本身，需使用“\^”；同样的，“$”匹配输入字符串的结束位置。</li><li>“[xyz]”字符集，匹配其中包含的任一字符。</li><li>“|” 两个匹配条件逻辑或。</li><li>“\w” 匹配字母或数字或下划线；“\W”匹配任意不是字母、数字、下划线的字符。</li><li>“\d” 匹配任意一个数字；“\D”匹配任意非数字字符。</li><li>“\s” 匹配任意的空白符，包括空格、制表符、换页符等空白字符的其中任意一个，与“[ \f\n\r\t\v]”等效；“\S” 匹配任意不是空白符的字符。</li><li>“\b” 匹配一个单词边界；“\B” 匹配非单词边界。</li><li>“*” 0次或多次匹配前面的字符或子表达式，“+” 1次或多次匹配前面的字符或子表达式，“?” 0次或1次匹配前面的字符或子表达式。</li><li>“{n}” 正好匹配n次，“{n,}” 至少匹配n次，“{n,m}” 匹配n到m次。</li></ol><p>举一些例子：</p><p>“him|her”匹配“him”和“her”，也可写作“h(im|er)”</p><p>“\bthe\b”匹配“in the war”中的“the”，但不匹配“other”中的“the”</p><hr><h3 id="分组、捕获、反向引用"><a href="#分组、捕获、反向引用" class="headerlink" title="分组、捕获、反向引用"></a><strong>分组、捕获、反向引用</strong></h3><p>“( )” 可以将“(”和“)”之间的表达式定义为组，并且将匹配这个表达式的字符保存到一个临时区域。匹配后的各组按照左括号出现的顺序（？）分别存到\$1,\$2,\$3…中。</p><p>比如“2018-04-25”，我们用“(\d{4})-(\d\d)-(\d\d)”去匹配，</p><p>那么</p><ul><li>$1 = “2018”</li><li>$2 = “04”</li><li>$3 = “25”</li></ul><p>如果想让某个括号里的内容不被捕获到，需要用到非捕获性分组</p><p>比如“h(im|er)”，就要改为“h(?:im|er)”</p><p>然后一个很重要的问题来了!如果想要匹配“看了看”、“研究研究”这样的重叠结构怎么办呢？</p><p>这时候需要用到反向引用，用\1,\2,\3…表示</p><p>上面的例子可以用“(..?)了?\1”去匹配。</p><p>语法就先总结到这里，实际还有很多，估计是用不到了。</p><hr><h3 id="C-11-regex"><a href="#C-11-regex" class="headerlink" title="C++11 regex"></a><strong>C++11 regex</strong></h3><p><a href="http://www.cplusplus.com/reference/regex/" target="_blank" rel="noopener">http://www.cplusplus.com/reference/regex/</a></p><p>最常用的两个类</p><p><strong>regex</strong> Regex (class )</p><p><strong>smatch</strong> match_results for string objects (class )</p><p>以及三个函数</p><p><strong>regex_match、regex_search、regex_replace</strong></p><p>要注意的一点就是在C++中“\”需要转义，即“\d”在C++中要写成“\\d”，诸如此类。</p><p>下面用具体的代码介绍这三个函数</p><p><strong>regex_match</strong> 判断一个正则表达式是否能匹配整个字符串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (regex_match (<span class="string">"subject"</span>, regex(<span class="string">"(sub)(.*)"</span>) ))</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"string literal matched\n"</span>;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s</span> <span class="params">(<span class="string">"subject"</span>)</span></span>;</span><br><span class="line">    <span class="function">regex <span class="title">e</span> <span class="params">(<span class="string">"(sub)(.*)"</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (regex_match (s,e))</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"string object matched\n"</span>;</span><br><span class="line">    <span class="keyword">if</span> (regex_match ( s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), e ) )</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"range matched\n"</span>;</span><br><span class="line">    smatch sm; <span class="comment">// same as std::match_results&lt;string::const_iterator&gt; sm;</span></span><br><span class="line">    regex_match (s,sm,e);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"string object with "</span> &lt;&lt; sm.<span class="built_in">size</span>() &lt;&lt; <span class="string">" matches\n"</span>;</span><br><span class="line">    regex_match ( s.cbegin(), s.cend(), sm, e);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"range with "</span> &lt;&lt; sm.<span class="built_in">size</span>() &lt;&lt; <span class="string">" matches\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"the matches were: "</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i=<span class="number">0</span>; i&lt;sm.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"["</span> &lt;&lt; sm[i] &lt;&lt; <span class="string">"] "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">string literal matched </span></span><br><span class="line"><span class="comment">string object matched</span></span><br><span class="line"><span class="comment">range matched </span></span><br><span class="line"><span class="comment">string object with 3 matches</span></span><br><span class="line"><span class="comment">range with 3 matches</span></span><br><span class="line"><span class="comment">the matches were: [subject] [sub] [ject] </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>regex_search</strong> 来查找第一个能匹配正则表达式的子串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s</span> <span class="params">(<span class="string">"this subject has a submarine as a subsequence"</span>)</span></span>;</span><br><span class="line">    smatch m;</span><br><span class="line">    <span class="function">regex <span class="title">e</span> <span class="params">(<span class="string">"\\b(sub)([^ ]*)"</span>)</span></span>;   <span class="comment">// matches words beginning by "sub"</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Target sequence: "</span> &lt;&lt; s &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Regular expression: /\\b(sub)([^ ]*)/"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The following matches and submatches were found:"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (regex_search (s,m,e))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x:m) <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        s = m.suffix().str();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Target sequence: this subject has a submarine as a subsequence</span></span><br><span class="line"><span class="comment">Regular expression: /\b(sub)([^ ]*)/</span></span><br><span class="line"><span class="comment">The following matches and submatches were found:</span></span><br><span class="line"><span class="comment">subject sub ject</span></span><br><span class="line"><span class="comment">submarine sub marine</span></span><br><span class="line"><span class="comment">subsequence sub sequence</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>regex_replace</strong> 匹配并替换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// regex_replace example</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s</span> <span class="params">(<span class="string">"there is a subsequence in the string\n"</span>)</span></span>;</span><br><span class="line">    <span class="function">regex <span class="title">e</span> <span class="params">(<span class="string">"\\b(sub)([^ ]*)"</span>)</span></span>;   <span class="comment">// matches words beginning by "sub"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// using string/c-string (3) version:</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; regex_replace (s,e,<span class="string">"sub-$2"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// using range/c-string (6) version:</span></span><br><span class="line">    <span class="built_in">string</span> result;</span><br><span class="line">    regex_replace (back_inserter(result), s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), e, <span class="string">"$2"</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; result;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// with flags:</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; regex_replace (s,e,<span class="string">"$1 and $2"</span>,regex_constants::format_no_copy);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">there is a sub-sequence in the string</span></span><br><span class="line"><span class="comment">there is a sequence in the string</span></span><br><span class="line"><span class="comment">sub and sequence</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>基本的工具基本介绍完了，可以来切一些水题了！</p><h4 id="Two-strings"><a href="#Two-strings" class="headerlink" title="Two strings"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6170" target="_blank" rel="noopener">Two strings</a></h4><p>from <a href="http://acm.bnu.edu.cn/v3/problem.php#searchstr=2017+Multi-University+Training+Contest+-+Team+9" target="_blank" rel="noopener">2017 Multi-University Training Contest</a></p><p>给两个字符串A、B，其中A只包含大小写字母，B只包含大小写字母和两个特殊符号“.”、“*”。</p><p>“.”可以匹配任意字母，“*”表示前一个字符可以出现任意次。保证“*”不会在字符串开头，不会有两个连续的“*”。问A与B能否匹配。</p><p>首先，这里的“.*”和正则表达式里介绍的概念不一样。因为“*”使用的条件是前一个字符确定。即“.*”不能匹配“ab”，但是可以匹配“aa”或“bbb”这样。</p><p>这里用反向引用就好了，先将“.*”换成“(\w)\1*”即可。</p><p>AC代码只有这么短</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> str1,str2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;str1&gt;&gt;str2;</span><br><span class="line">        <span class="function">regex <span class="title">reg_rep</span><span class="params">(<span class="string">"\\.\\*"</span>)</span></span>;</span><br><span class="line">        str2=regex_replace(str2,reg_rep,<span class="string">"(\\w)\\1*"</span>);</span><br><span class="line">        <span class="function">regex <span class="title">reg</span><span class="params">(str2)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(regex_match(str1,reg)) <span class="built_in">puts</span>(<span class="string">"yes"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"no"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Abbreviation"><a href="#Abbreviation" class="headerlink" title="Abbreviation"></a>Abbreviation</h4><p>from <a href="http://codeforces.com/gym/101190" target="_blank" rel="noopener">2016-2017 ACM-ICPC Northeastern European Regional Contest (NEERC 16)</a></p><p>题意：大概是给一段包含大小写字母和逗号句号的文本，要求缩写连续的大写字母开头的单词。当时这个模拟写的十分难受想死，结果题解上写了一句有队伍用正则表达式很快就A了这个题目。</p><p>样例输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This is ACM North Eastern European Regional Contest,</span><br><span class="line">sponsored by International Business Machines.</span><br><span class="line">The. Best. Contest. Ever.</span><br><span class="line">A Great Opportunity for all contestants.</span><br></pre></td></tr></table></figure><p>样例输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This is ACM NEERC (North Eastern European Regional Contest),</span><br><span class="line">sponsored by IBM (International Business Machines).</span><br><span class="line">The. Best. Contest. Ever.</span><br><span class="line">A GO (Great Opportunity) for all contestants.</span><br></pre></td></tr></table></figure><p>AC代码（赛后补的）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"abbreviation.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"abbreviation.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="function">regex <span class="title">reg</span><span class="params">(<span class="string">"\\b([A-Z][a-z]+ )+([A-Z][a-z]+)\\b"</span>)</span></span>;</span><br><span class="line">    smatch reg_match;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">while</span>(getline(<span class="built_in">cin</span>,str))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len=str.length();</span><br><span class="line">        <span class="keyword">while</span>(regex_search(str,reg_match,reg))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> sub=reg_match[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> sublen=sub.length();</span><br><span class="line">            <span class="keyword">int</span> pos=str.<span class="built_in">find</span>(sub);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pos;++i) <span class="built_in">putchar</span>(str[i]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sublen;++i)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isupper</span>(sub[i]))</span><br><span class="line">                <span class="built_in">putchar</span>(sub[i]);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">'('</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sublen;++i) <span class="built_in">putchar</span>(sub[i]);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">')'</span>);</span><br><span class="line">            str=reg_match.suffix().str();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;ch:str) <span class="built_in">putchar</span>(ch);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>赛中写的字符串模拟：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vec;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=s.length();</span><br><span class="line">    <span class="keyword">if</span>(len&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">isupper</span>(s[<span class="number">0</span>])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i)</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">islower</span>(s[i]))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;++i)</span><br><span class="line">        <span class="built_in">putchar</span>(s[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"abbreviation.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"abbreviation.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">while</span>(getline(<span class="built_in">cin</span>,s))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len=s.length();</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;len)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">// cout&lt;&lt;"len="&lt;&lt;len&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">isalpha</span>(s[i])) <span class="built_in">putchar</span>(s[i++]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                vec.<span class="built_in">clear</span>();</span><br><span class="line">                <span class="keyword">while</span>(i&lt;len)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">string</span> <span class="keyword">word</span>;</span><br><span class="line">                    <span class="keyword">while</span>(i&lt;len &amp;&amp; <span class="built_in">isalpha</span>(s[i])) <span class="keyword">word</span>+=s[i],i++;</span><br><span class="line">                    vec.push_back(<span class="keyword">word</span>);</span><br><span class="line">                    <span class="keyword">if</span>(s[i]!=<span class="string">' '</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">else</span> i++;</span><br><span class="line">                    <span class="comment">//cout&lt;&lt;word&lt;&lt;endl;</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//cout&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">                <span class="keyword">int</span> sz=vec.<span class="built_in">size</span>(),num;</span><br><span class="line">                <span class="comment">//cout&lt;&lt;"sz="&lt;&lt;sz&lt;&lt;endl;</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;sz;++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> now=k;</span><br><span class="line">                    <span class="keyword">while</span>(now&lt;sz &amp;&amp; ok(vec[now])) ++now;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(now==k)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;vec[k];</span><br><span class="line">                        <span class="keyword">if</span>(k!=sz<span class="number">-1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(k+<span class="number">1</span>==now)</span><br><span class="line">                    &#123;</span><br><span class="line">                        --now;</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;vec[k];</span><br><span class="line">                        <span class="keyword">if</span>(k!=sz<span class="number">-1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> j=k;j&lt;now;++j) <span class="built_in">putchar</span>(vec[j][<span class="number">0</span>]);</span><br><span class="line">                        <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">                        <span class="built_in">putchar</span>(<span class="string">'('</span>);</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> j=k;j&lt;now;++j)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">cout</span>&lt;&lt;vec[j];</span><br><span class="line">                            <span class="keyword">if</span>(j&lt;now<span class="number">-1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="built_in">putchar</span>(<span class="string">')'</span>);</span><br><span class="line">                        --now;</span><br><span class="line">                        <span class="keyword">if</span>(now!=sz<span class="number">-1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    k=now;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//cout&lt;&lt;endl;</span></span><br><span class="line">               <span class="comment">// cout&lt;&lt;"ok"&lt;&lt;endl;</span></span><br><span class="line">                <span class="keyword">while</span>(i&lt;len &amp;&amp; !<span class="built_in">isalpha</span>(s[i])) <span class="built_in">putchar</span>(s[i++]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="命名规范问题"><a href="#命名规范问题" class="headerlink" title="命名规范问题"></a>命名规范问题</h4><p>from <a href="http://www.bnuoj.com/v3/contest_show.php?cid=9357" target="_blank" rel="noopener">第十六届北京师范大学程序设计竞赛现场决赛</a></p><p>题意：给一些变量名，将符合(题中描述的) 驼峰命名法规范的变<br>量名转换为下划线命名法。不符合的原样输出。</p><p>好吧，这个题其实是我出的，标程用正则表达式，20行左右搞定。</p><p>应该并不毒瘤吧，<del>看大家模拟的挺开心的</del>。</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">regex <span class="title">reg</span><span class="params">(<span class="string">"\\b[A-Za-z][a-z]+([A-Z][a-z]+)+\\b"</span>)</span></span>;</span><br><span class="line">    <span class="function">regex <span class="title">cap</span><span class="params">(<span class="string">"[A-Z]"</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> now;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;now;</span><br><span class="line">        <span class="keyword">if</span>(regex_match(now,reg))</span><br><span class="line">        &#123;</span><br><span class="line">            now=regex_replace(now,cap,<span class="string">"_$0"</span>);</span><br><span class="line">            transform(now.<span class="built_in">begin</span>(),now.<span class="built_in">end</span>(),now.<span class="built_in">begin</span>(),::<span class="built_in">tolower</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(now[<span class="number">0</span>]==<span class="string">'_'</span>) now.erase(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;now&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;写这篇文章的初衷是解决一些简单的字符串模拟题目，对于特定的某些题目，有时候用C++11的正则表达式会方便很多。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
    
      <category term="regex" scheme="http://yoursite.com/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title>树链剖分</title>
    <link href="http://yoursite.com/2018/04/24/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    <id>http://yoursite.com/2018/04/24/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</id>
    <published>2018-04-24T06:48:00.000Z</published>
    <updated>2020-04-18T16:23:50.208Z</updated>
    
    <content type="html"><![CDATA[<p>简单回顾一下树链剖分（以下摘自2009年漆子超的论文《分治算法在树的路径问题中的应用 》）：</p><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><ul><li>将树中的边分为两类：轻边和重边。</li><li>记$Size(U)$表示以$U$为根的子树的结点个数。</li><li>令$V$为$U$的儿子中$Size(V)$最大的一个，那么我们称边$(U,V)$为重边，其余边为轻边。</li><li>我们称某条路径为重路径，当且仅当它全部由重边组成。</li></ul><h4 id="性质："><a href="#性质：" class="headerlink" title="性质："></a>性质：</h4><ul><li>性质1：如果$(U,V)$为轻边，则$Size(V) \leq \frac{Size(U)}{2}$。</li><li>性质2：从根到某一点的路径上轻边的个数不大于$O(log_{2} N)$。</li><li>性质3：我们称某条路径为重路径，当且仅当它全部由重边组成。那<br>么对于每个点到根的路径上都不超过 $O(log_{2} N)$ 条轻边和<br>$O( log_{2} N)$条重路径。</li></ul><h4 id="证明："><a href="#证明：" class="headerlink" title="证明："></a>证明：</h4><p>性质1根据定义来看比较显然。</p><p>性质2的话，从某点出发向上走，每经过一条轻边，当前子树的大小就至少变成2倍（由性质1得），所以根到某一点的路径上轻边的个数不大于$O(log_{2} N)$。</p><p>性质3，因为重路径是被轻边间隔开的，所以从每个点到根的路径上经过的重路径的条数是不超过轻边条数+1的，所以也是$O( log_{2} N)$级别的。</p><h4 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h4><ul><li>用于求LCA（推荐）</li><li>与线段树结合维护查询树链信息</li><li>利用重链dfs序连续，代替倍增求点x往上跳k步的点是谁。</li></ul><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><ul><li>deep数组表示深度</li><li>fa数组表示父节点</li><li>son数组表示重儿子</li><li>top数组表示每个点所在重链的顶端节点</li><li>pos数组表示每个点按照重链优先dfs下的dfs序</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> deep[N],fa[N],num[N],son[N],top[N],pos[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre,<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    deep[x]=d;</span><br><span class="line">    fa[x]=pre;</span><br><span class="line">    num[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;y:e[x])</span><br><span class="line">        <span class="keyword">if</span>(y!=pre) &#123;</span><br><span class="line">            dfs(y,x,d+<span class="number">1</span>);</span><br><span class="line">            num[x]+=num[y];</span><br><span class="line">            <span class="keyword">if</span>(son[x]==<span class="number">-1</span> || num[y]&gt;num[son[x]])</span><br><span class="line">                son[x]=y;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    top[x]=root;</span><br><span class="line">    pos[x]=++cnt;</span><br><span class="line">    <span class="keyword">if</span>(son[x]==<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span> dfs(son[x],root);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;y:e[x])</span><br><span class="line">        <span class="keyword">if</span>(y!=fa[x] &amp;&amp; y!=son[x])</span><br><span class="line">            dfs(y,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getmax</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; <span class="comment">//求树链点权最大值</span></span><br><span class="line">    <span class="keyword">int</span> f1=top[x],f2=top[y];</span><br><span class="line">    <span class="keyword">int</span> ans=-inf;</span><br><span class="line">    <span class="keyword">while</span>(f1!=f2) &#123;</span><br><span class="line">        <span class="keyword">if</span>(deep[f1]&lt;deep[f2]) &#123;</span><br><span class="line">            swap(x,y);</span><br><span class="line">            swap(f1,f2);</span><br><span class="line">        &#125;</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,ask_max(<span class="number">1</span>,pos[f1],pos[x])); <span class="comment">//ask_max 线段树查询</span></span><br><span class="line">        x=fa[f1];</span><br><span class="line">        f1=top[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(deep[x]&gt;deep[y]) swap(x,y);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(ans,ask_max(<span class="number">1</span>,pos[x],pos[y]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(son,<span class="number">-1</span>,<span class="keyword">sizeof</span>(son));</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单回顾一下树链剖分（以下摘自2009年漆子超的论文《分治算法在树的路径问题中的应用 》）：&lt;/p&gt;
&lt;h4 id=&quot;定义：&quot;&gt;&lt;a href=&quot;#定义：&quot; class=&quot;headerlink&quot; title=&quot;定义：&quot;&gt;&lt;/a&gt;定义：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;将树中的边分
      
    
    </summary>
    
    
    
      <category term="树链剖分" scheme="http://yoursite.com/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
  </entry>
  
</feed>
