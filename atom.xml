<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Forever you~</title>
  <icon>https://www.gravatar.com/avatar/90af6df82266d6aed61c6eaf0a24e2fe</icon>
  <subtitle>重剑无锋，大巧不工</subtitle>
  <link href="https://izard.space/atom.xml" rel="self"/>
  
  <link href="https://izard.space/"/>
  <updated>2024-02-06T04:20:37.232Z</updated>
  <id>https://izard.space/</id>
  
  <author>
    <name>forever_you</name>
    <email>573570584@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://izard.space/2024/02/06/hello-world/"/>
    <id>https://izard.space/2024/02/06/hello-world/</id>
    <published>2024-02-06T04:20:37.232Z</published>
    <updated>2024-02-06T04:20:37.232Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>围棋入门——围棋术语</title>
    <link href="https://izard.space/2023/06/30/%E5%9B%B4%E6%A3%8B%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E5%9B%B4%E6%A3%8B%E6%9C%AF%E8%AF%AD/"/>
    <id>https://izard.space/2023/06/30/%E5%9B%B4%E6%A3%8B%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E5%9B%B4%E6%A3%8B%E6%9C%AF%E8%AF%AD/</id>
    <published>2023-06-30T14:42:32.000Z</published>
    <updated>2023-07-01T06:39:27.212Z</updated>
    
    <content type="html"><![CDATA[<h3 id="长"><a href="#长" class="headerlink" title="长"></a>长</h3><p>相邻三个位置没有子</p><center><img src="/go/img/长.png" width="60%"></center><h3 id="断"><a href="#断" class="headerlink" title="断"></a>断</h3><p>切断，直接切开对方棋与棋之间的联络，使对方的棋分散开的行棋方法。</p><center><img src="/go/img/断.png" width="60%"></center><h3 id="粘"><a href="#粘" class="headerlink" title="粘"></a>粘</h3><p>将可能被分开的两处棋子连接在一起。</p><p>注意，小尖后是不会被断的，所以这一手不是粘，而是团。</p><center><img src="/go/img/断.png" width="60%"></center><h3 id="飞"><a href="#飞" class="headerlink" title="飞"></a>飞</h3><p>飞也叫<strong>小飞</strong>，是指在原有棋子的呈<strong>日</strong>字形的对角交叉点处行棋。</p><p>飞的形式还有<strong>大飞</strong>，它是指在原有棋子的呈<strong>目</strong>字形的对角交叉点处行棋。</p><h3 id="跳"><a href="#跳" class="headerlink" title="跳"></a>跳</h3><p>是指在原有棋子隔一路的位置行棋。</p><h3 id="虎"><a href="#虎" class="headerlink" title="虎"></a>虎</h3><p>二路线及以上形成虎口的棋。</p><p>用虎来补断点同时容易做眼。</p><h3 id="爬"><a href="#爬" class="headerlink" title="爬"></a>爬</h3><p>四路线及以下的贴，作用是捞取实地，扩大眼位。但是外围会交给对手。</p><center><img src="/go/img/爬.png" width="60%"></center><h3 id="退"><a href="#退" class="headerlink" title="退"></a>退</h3><p>下图黑5是退。</p><center><img src="/go/img/爬.png" width="60%"></center><h3 id="尖"><a href="#尖" class="headerlink" title="尖"></a>尖</h3><p>也叫小尖，并且周围两个方向没有子，小尖不会被分断，用于逃出包围圈，也用于官子阶段扩张己方领土缩小对方地盘。</p><h3 id="刺"><a href="#刺" class="headerlink" title="刺"></a>刺</h3><h3 id="立"><a href="#立" class="headerlink" title="立"></a>立</h3><p>四路线及以下紧挨着自身棋子</p><p>上长下立</p><p>用于防守</p><center><img src="/go/img/立.png" width="60%"></center><div data-wgo="/go/sgfs/立-先手四目.sgf" style="margin: 10px 0">Your browser doesn't support WGo Player. Use some modern browser like IE9, Google Chrome or Mozilla Firefox.</div><h3 id="挡"><a href="#挡" class="headerlink" title="挡"></a>挡</h3><p>紧挨着对手棋子，不让对手棋子往己方区域向前进的方法</p><h3 id="拐"><a href="#拐" class="headerlink" title="拐"></a>拐</h3><center><img src="/go/img/拐.png" width="60%"></center>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;长&quot;&gt;&lt;a href=&quot;#长&quot; class=&quot;headerlink&quot; title=&quot;长&quot;&gt;&lt;/a&gt;长&lt;/h3&gt;&lt;p&gt;相邻三个位置没有子&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/go/img/长.png&quot; width=&quot;60%&quot;&gt;&lt;/center&gt;

&lt;h3 </summary>
      
    
    
    
    <category term="围棋" scheme="https://izard.space/categories/%E5%9B%B4%E6%A3%8B/"/>
    
    
    <category term="围棋入门" scheme="https://izard.space/tags/%E5%9B%B4%E6%A3%8B%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>围棋入门——死活的基本形状</title>
    <link href="https://izard.space/2023/06/24/%E5%9B%B4%E6%A3%8B%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%AD%BB%E6%B4%BB%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6/"/>
    <id>https://izard.space/2023/06/24/%E5%9B%B4%E6%A3%8B%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E6%AD%BB%E6%B4%BB%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6/</id>
    <published>2023-06-24T09:45:02.000Z</published>
    <updated>2023-06-24T10:52:23.468Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见形状"><a href="#常见形状" class="headerlink" title="常见形状"></a>常见形状</h2><h3 id="直二"><a href="#直二" class="headerlink" title="直二"></a>直二</h3><p>一个眼，死棋</p><h3 id="直三"><a href="#直三" class="headerlink" title="直三"></a>直三</h3><p>黑棋后手活（半死不活，一定要补一手才能活）</p><center><img src="/go/img/直三.png" width="60%"></center><h3 id="弯三"><a href="#弯三" class="headerlink" title="弯三"></a>弯三</h3><p>同直三，后手活</p><h3 id="直四"><a href="#直四" class="headerlink" title="直四"></a>直四</h3><p>活棋</p><center><img src="/go/img/直四.png" width="60%"></center><h3 id="曲四"><a href="#曲四" class="headerlink" title="曲四"></a>曲四</h3><p>活棋（两种形状）</p><center><img src="/go/img/曲四.png" width="60%"></center><h3 id="丁四"><a href="#丁四" class="headerlink" title="丁四"></a>丁四</h3><p>黑棋后手活</p><center><img src="/go/img/丁四.png" width="60%"></center><h3 id="方四"><a href="#方四" class="headerlink" title="方四"></a>方四</h3><p>死棋</p><center><img src="/go/img/方四.png" width="60%"></center><h3 id="直五"><a href="#直五" class="headerlink" title="直五"></a>直五</h3><p>活棋</p><p>如果让白棋在中间连走三个则变成双活，谁也不能杀死对方</p><center><img src="/go/img/方四.png" width="60%"></center><h3 id="曲五"><a href="#曲五" class="headerlink" title="曲五"></a>曲五</h3><p>同直五，活棋</p><h3 id="梅花五"><a href="#梅花五" class="headerlink" title="梅花五"></a>梅花五</h3><p>黑棋后手活</p><center><img src="/go/img/梅花五.png" width="60%"></center><h3 id="刀把五"><a href="#刀把五" class="headerlink" title="刀把五"></a>刀把五</h3><p>黑棋后手活</p><center><img src="/go/img/刀把五.png" width="60%"></center><div data-wgo="/go/sgfs/刀把五.sgf" style="margin: 10px 0">Your browser doesn't support WGo Player. Use some modern browser like IE9, Google Chrome or Mozilla Firefox.</div><h3 id="板六"><a href="#板六" class="headerlink" title="板六"></a>板六</h3><p>活棋</p><center><img src="/go/img/板六.png" width="60%"></center><div data-wgo="/go/sgfs/板六.sgf" style="margin: 10px 0">Your browser doesn't support WGo Player. Use some modern browser like IE9, Google Chrome or Mozilla Firefox.</div><h3 id="葡萄六"><a href="#葡萄六" class="headerlink" title="葡萄六"></a>葡萄六</h3><p>黑棋后手活</p><center><img src="/go/img/葡萄六.png" width="60%"></center><div data-wgo="/go/sgfs/葡萄六.sgf" style="margin: 10px 0">Your browser doesn't support WGo Player. Use some modern browser like IE9, Google Chrome or Mozilla Firefox.</div><h3 id="聚七"><a href="#聚七" class="headerlink" title="聚七"></a>聚七</h3><p>活棋</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>死形：直二，方四</li><li>活形：直四、曲四、板六，聚七。</li><li>半死不活形：直三，弯三，丁四，刀把五，梅花五，葡萄六。</li><li>眼位越大越容易活</li><li>注意眼型，长条容易做眼，方的不容易做眼</li><li>注意在上面基本形状中，黑棋是没有断点的</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.bilibili.com/video/BV1tt4y1G7KR?p=3&vd_source=1e3b6e70b5b7880bb4d0e970bb34f2ab">邱百瑞带你零基础学围棋【95集全】-p3-【围棋入门】03 死活的基本形状 高清版 哔哩哔哩 bilibili</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;常见形状&quot;&gt;&lt;a href=&quot;#常见形状&quot; class=&quot;headerlink&quot; title=&quot;常见形状&quot;&gt;&lt;/a&gt;常见形状&lt;/h2&gt;&lt;h3 id=&quot;直二&quot;&gt;&lt;a href=&quot;#直二&quot; class=&quot;headerlink&quot; title=&quot;直二&quot;&gt;&lt;/a&gt;直二&lt;/h</summary>
      
    
    
    
    <category term="围棋" scheme="https://izard.space/categories/%E5%9B%B4%E6%A3%8B/"/>
    
    
    <category term="围棋入门" scheme="https://izard.space/tags/%E5%9B%B4%E6%A3%8B%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>围棋入门——吃子技巧</title>
    <link href="https://izard.space/2023/06/24/%E5%9B%B4%E6%A3%8B%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E5%90%83%E5%AD%90%E6%8A%80%E5%B7%A7/"/>
    <id>https://izard.space/2023/06/24/%E5%9B%B4%E6%A3%8B%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E5%90%83%E5%AD%90%E6%8A%80%E5%B7%A7/</id>
    <published>2023-06-24T04:31:55.000Z</published>
    <updated>2023-06-24T10:53:13.010Z</updated>
    
    <content type="html"><![CDATA[<p>持续更新</p><h2 id="吃子技巧"><a href="#吃子技巧" class="headerlink" title="吃子技巧"></a>吃子技巧</h2><ul><li><p>双叫吃</p><p>双吃指落子后对对方两块棋子同时进行叫吃，是对方左支右绌，无法兼顾。</p></li></ul><center><img src="/go/img/双吃.png" width="60%"></center><ul><li><p>抱吃</p><p>黑棋宛如手臂或弯钩般怀抱白方棋子，是白棋无处逃遁，这样就形成了抱吃。</p></li></ul><center><img src="/go/img/抱吃.png" width="60%"></center><ul><li><p>门吃</p><p>门吃指让己方棋子形成像门一样的形状，以封堵并打吃对方的棋子。</p><center><img src="/go/img/门吃.png" width="60%"></center></li><li><p>枷吃</p><p>枷吃指通过将己方棋子做成木枷一样的形状，以围困对方棋子的吃子手段。</p></li></ul><center><img src="/go/img/枷吃.png" width="60%"></center><ul><li><p>征子</p><p>别称扭羊头，是一种通过步步扭拐打吃，最终将对方棋子提掉的吃子方法。</p></li></ul><div data-wgo="/go/sgfs/征子.sgf" style="margin: 10px 0">Your browser doesn't support WGo Player. Use some modern browser like IE9, Google Chrome or Mozilla Firefox.</div><ul><li><p>倒扑</p><p>倒扑指扑入敌方虎口内送吃后，又可立即反吃对方若干个棋子的战术，最少能回提对方三个棋子，多则可以吃十几个。</p></li></ul><div data-wgo="/go/sgfs/倒扑.sgf" style="margin: 10px 0">Your browser doesn't support WGo Player. Use some modern browser like IE9, Google Chrome or Mozilla Firefox.</div><ul><li><p>接不归</p><p>接不归是一种利用对方气紧叫吃其棋子，使之无论如何都无法回接的棋形。若强行接上，则所有棋都会被吃。</p></li></ul><div data-wgo="/go/sgfs/接不归.sgf" style="margin: 10px 0">Your browser doesn't support WGo Player. Use some modern browser like IE9, Google Chrome or Mozilla Firefox.</div><ul><li><p>滚打包收</p><p>通过扑、打吃、枷吃等手段紧住对手的气从而吃棋，组合技。</p></li></ul><div data-wgo="/go/sgfs/滚打包收.sgf" style="margin: 10px 0">Your browser doesn't support WGo Player. Use some modern browser like IE9, Google Chrome or Mozilla Firefox.</div><h2 id="杀棋的可能性"><a href="#杀棋的可能性" class="headerlink" title="杀棋的可能性"></a>杀棋的可能性</h2><ul><li>自己的子比对方多</li><li>对方的断点多</li><li>对方的子处在边上</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《棋奕无限围棋》</li><li><a href="https://www.bilibili.com/video/BV12u41147QF/">围棋启蒙课堂第二章：吃子技巧（合集） (bilibili.com)</a></li><li><a href="https://www.bilibili.com/video/BV1tt4y1G7KR/?p=7">邱百瑞带你零基础学围棋【95集全】-p7-【围棋入门】07 有关吃子的几个问题高清版_哔哩哔哩_bilibili</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;持续更新&lt;/p&gt;
&lt;h2 id=&quot;吃子技巧&quot;&gt;&lt;a href=&quot;#吃子技巧&quot; class=&quot;headerlink&quot; title=&quot;吃子技巧&quot;&gt;&lt;/a&gt;吃子技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;双叫吃&lt;/p&gt;
&lt;p&gt;双吃指落子后对对方两块棋子同时进行叫吃，是对方左支右绌，无法</summary>
      
    
    
    
    <category term="围棋" scheme="https://izard.space/categories/%E5%9B%B4%E6%A3%8B/"/>
    
    
    <category term="围棋入门" scheme="https://izard.space/tags/%E5%9B%B4%E6%A3%8B%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>记录人生第一次对弈</title>
    <link href="https://izard.space/2023/06/24/%E8%AE%B0%E5%BD%95%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AF%B9%E5%BC%88/"/>
    <id>https://izard.space/2023/06/24/%E8%AE%B0%E5%BD%95%E4%BA%BA%E7%94%9F%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AF%B9%E5%BC%88/</id>
    <published>2023-06-24T02:42:00.000Z</published>
    <updated>2023-06-24T05:28:56.308Z</updated>
    
    <content type="html"><![CDATA[<p>和群友菜鸡互啄，意外的赢了</p><div data-wgo="/go/sgfs/8097314_1_旋风转_VS_法拉薇.sgf">Your browser doesn't support WGo Player. Use some modern browser like IE9, Google Chrome or Mozilla Firefox.</div><p>原链接：<a href="https://www.101weiqi.com/play/p/10329031/">https://www.101weiqi.com/play/p/10329031/ </a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;和群友菜鸡互啄，意外的赢了&lt;/p&gt;
&lt;div data-wgo=&quot;/go/sgfs/8097314_1_旋风转_VS_法拉薇.sgf&quot;&gt;
Your browser doesn&#39;t support WGo Player. Use some modern browser lik</summary>
      
    
    
    
    <category term="围棋" scheme="https://izard.space/categories/%E5%9B%B4%E6%A3%8B/"/>
    
    
    <category term="围棋" scheme="https://izard.space/tags/%E5%9B%B4%E6%A3%8B/"/>
    
  </entry>
  
  <entry>
    <title>基于Stern-Brocot tree的有理数集二分算法及其优化</title>
    <link href="https://izard.space/2022/06/15/%E5%9F%BA%E4%BA%8EStern-Brocot%20tree%E7%9A%84%E6%9C%89%E7%90%86%E6%95%B0%E9%9B%86%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/"/>
    <id>https://izard.space/2022/06/15/%E5%9F%BA%E4%BA%8EStern-Brocot%20tree%E7%9A%84%E6%9C%89%E7%90%86%E6%95%B0%E9%9B%86%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/</id>
    <published>2022-06-14T16:07:01.000Z</published>
    <updated>2023-06-21T19:07:56.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-写在前面"><a href="#0-写在前面" class="headerlink" title="0. 写在前面"></a>0. 写在前面</h2><p>本文中用 Stern-Brocot tree 做有理数二分的 idea 来自q神，后来我独立证明了其时间复杂度为 $O(\log{N})$，遂作此文，并作为算法课期末小论文提交（大概2020年的时候）。不知道竞赛圈中有没有类似的内容，或许本文是首创？在阅读之前，可以先看一下我以往创作的相关文章和视频：</p><ul><li><a href="https://izard.space/2018/09/11/%E8%B6%85%E5%AE%9E%E7%94%A8%EF%BC%81Stern-Brocot-tree%E6%80%BB%E7%BB%93%E5%A5%89%E4%B8%8A/">超实用！Stern-Brocot tree总结奉上 </a></li><li><a href="https://www.bilibili.com/video/av90612371">【算法】什么是Stern-Brocot tree？香不香，味道还可以吗？</a></li><li><a href="https://www.bilibili.com/video/av91204693">【算法】这个算法明明使用二分却过分暴力！继续品尝Stern–Brocot tree</a></li><li><a href="https://www.bilibili.com/video/av94352322">【算法】震惊！Stern–Brocot tree竟与辗转相除有关？</a></li></ul><p>另外本文可能有一些意识流的地方，写得并不严谨，请见谅。</p><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>二分法是算法研究中的一个极其重要的基础算法，或者说是一种重要的指导思想。比如，在有序数组中查找某一特定元素的位置或者判定其是否出现，或者数值分析中的求某一段单调函数的零点，又或者是在问题满足某种单调性时用二分枚举去代替暴力枚举，这样就将最优性问题转换成判定性问题，进而二分出最终答案。实际上，这类可以用二分算法解决的问题通常有一个相似的模型，然而对于解类型的不同，算法框架又稍有区别。一般来说，最常见的是在整数区间或实数区间上二分。然而对于某些问题，需要考虑的是在有理数集上二分，并将答案表示成最简分数的形式。这种情况下，二分更难实现，比如已知当前区间$\left[ \frac{a}{b},\frac{c}{d}\right]$，如何求解当前区间的“中点”，从而对区间进行“二分”？借助数学工具Stern-Brocot tree可以完成这一任务。</p><p>Stern-Brocot tree是由德国数学家Moritz Stern和法国钟表匠Achille Brocot分别独立发现的。Stern-Brocot tree是一种展示所有正有理数的无限完全二叉树，其中树上节点与正有理数一一对应。它巧妙地将数论与数据结构联系在一起，构造过程十分优雅，且拥有众多神奇的性质。不仅如此，其与法里序列、连分数以及欧几里得算法等内容有着广泛而密切的联系。</p><p>本文第二节归纳总结了二分问题的共同点和算法的基本框架，并依据解类型的不同阐述了其中的区别。最后引出本文所讨论的问题——在有理数集中二分。</p><p>本文第三节重点介绍了Stern-Brocot tree的构造、性质以及相关证明。</p><p>本文第四节引入了Stern-Brocot tree中独特的数系，并将构造过程中的线性变换用矩阵乘积的形式来表示。最后从矩阵形式入手，解释了其与求最大公约数的欧几里得算法的联系。</p><p>本文第五节具体描述了在Stern-Brocot tree上实现对有理数集二分的算法，并逐步给出了优化。</p><h2 id="2-二分算法"><a href="#2-二分算法" class="headerlink" title="2. 二分算法"></a>2. 二分算法</h2><p>考虑某问题在区间 $\left[ L,R \right]$ 中寻找答案 $a$。假设已知该问题在区间 $\left[L,a\right)$ 上有性质$P$，在$\left(a,R\right]$上不具有性质 $P$，且验证区间上任意一个点是否具有性质 $P$ 十分容易或者时间复杂度在可接受范围内，那么答案 $a$ 就可利用二分法求解。</p><p>这里说的性质 $P$ 是一种形象的说法，也可以理解为我们能通过简单的计算或是另外的算法来较快地询问二分中点与答案的大小关系。而区间能根据是否含有性质 $P$ 分成前后两段通常是由某种单调性决定的。</p><h3 id="2-1-整数集上的二分"><a href="#2-1-整数集上的二分" class="headerlink" title="2.1. 整数集上的二分"></a>2.1. 整数集上的二分</h3><p>当只考虑区间中的整点时，即二分的对象为一段连续的整数时，情况最简单。假设在 $a$ 点处具有性质 $P$，则伪代码如下所示：</p><pre class="pseudocode">\begin{algorithm}\caption{BinarySearchForInteger} \begin{algorithmic}\PROCEDURE{BinarySearchForInteger}{$L,R$}\WHILE{$L\lt R$}    \STATE  $mid \gets \lceil (L+R)/2 \rceil$    \IF{\Call{HasProperty}{$mid$}}         \STATE $L \gets mid$    \ELSE         \STATE $R \gets mid-1$    \ENDIF\ENDWHILE\RETURN $L$\ENDPROCEDURE\end{algorithmic}\end{algorithm}</pre><p>若在 $a$ 点处不具有性质 $P$，则在取整及加减一稍有区别，情况类似。</p><p>假设每次验证的时间为 $O(1)$，由于搜索的区间长度 $n$ 每次会减少一半，所以二分的时间复杂度 $O(\log{n})$。举个例子，在有序数组 $A[1\dots n]$ 中二分查找某元素 $y$ 的位置，这里假设数组元素严格单调递增，且 $y$ 一定存在。那么初始区间即 $\left[1,n\right]$，代表下标。上述所说的性质 $P$ 在这里即为“该位置的数组元素小于等于 $y$”。</p><h3 id="2-2-实数集上的二分"><a href="#2-2-实数集上的二分" class="headerlink" title="2.2. 实数集上的二分"></a>2.2. 实数集上的二分</h3><p>然而对于一些数值分析或是计算几何之类的问题来说，需要的答案 $a$ 往往是浮点数类型，是一定精度内的近似解，比如要求精确到小数点后六位，或者要求绝对误差限或相对误差限不超过一个设定好的且足够小的 $\epsilon$ 值。这样循环终止条件可以根据不同的精度需求自行设定。若初始区间长度为 $n$，则时间复杂度为 $O(\log{(n&#x2F;\epsilon)})$，所需精度越高，$\epsilon$ 就需要设定的越小，时间代价就越大。</p><p>由于是浮点数，代码实现时则无需考虑 $a$ 点处是否也具有性质 $P$。</p><pre class="pseudocode">\begin{algorithm}\caption{BinarySearchForReal} \begin{algorithmic}\Procedure{BinarySearchForReal}{$L,R$}\While{$R-L>eps$}\State  $mid \gets (L+R)/2$\If{\Call{HasProperty}{$mid$}} \State $L \gets mid$\Else \State $R \gets mid$\EndIf\EndWhile\Return $L$\EndProcedure\end{algorithmic}\end{algorithm}</pre><p>例如，求解 $f(x)&#x3D;x^2-2$ 在区间 $\left[0,2\right]$ 上的零点，性质 $P$ 则为“$f(x)&lt;0$”。</p><h3 id="2-3-有理数集上的二分"><a href="#2-3-有理数集上的二分" class="headerlink" title="2.3. 有理数集上的二分"></a>2.3. 有理数集上的二分</h3><p>对于有理数的情况我们也可以抽象出类似的问题。考虑在有理数集 $Q_N&#x3D; \left{ \frac{p}{q}:p,q\in \left{ 1,2,\dots,N\right} \right}$ 上确定未知数 $\frac{x}{y}$ 。已知在 $(0,\frac{x}{y}]$ 上有性质 $P$，在 $(\frac{x}{y},+\infty)$ 上不具有性质 $P$，且可以用 $O(1)$ 的时间询问任一有理数 $\frac{p}{q}$ 是否具有性质 $P$，换句话说，可以很快判断出 $\frac{p}{q}$ 是否小于等于答案 $\frac{x}{y}$。目标就是用尽量少的询问次数确定 $\frac{x}{y}$。</p><p>这样定义问题的好处是规定了分子分母的上界，那么只需考虑 $O(N^2)$ 个不同的有理数。定义这样的有理数集 $Q_N$ 也相当于规定了求解的精度要求，$N$ 越大代表精度越高。可以看到，有理数集上的二分问题比之前讨论过的整数集、实数集上的二分要难。</p><p>一个典型应用是在直角坐标系第一象限上二分斜率大小。将斜率表示成最简分数的形式避免了浮点数计算带来的精度损失，从而方便处理一些整点相关的问题。该问题模型也可以用来做无理数的最佳有理逼近。</p><h2 id="3-Stern-Brocot-tree"><a href="#3-Stern-Brocot-tree" class="headerlink" title="3. Stern-Brocot tree"></a>3. Stern-Brocot tree</h2><p>在解决有理数集上二分问题之前，先介绍一下Stern-Brocot tree。在本节中将给出Stern-Brocot tree的构造过程以及相关性质的证明。</p><h3 id="3-1-Stern-Brocot-tree的构造"><a href="#3-1-Stern-Brocot-tree的构造" class="headerlink" title="3.1. Stern-Brocot tree的构造"></a>3.1. Stern-Brocot tree的构造</h3><p>首先定义两个分数的中位分数：</p><blockquote><p><strong>定义 1</strong>（中位分数）. 两个分数 $\frac{a}{c}$ 和 $\frac{b}{d}$ 的中位分数为 $\frac{a+b}{c+d}$。</p></blockquote><p>后面会看到在有理数集上二分时，我们会使用中位分数来作为每次二分的“中点”。</p><p>有了中位分数的概念就可以开始构造Stern-Brocot tree了。我们先来构造树上每层的分数序列，构造从两个分数 $\frac{0}{1},\frac{1}{0}$ 出发，作为第 $0$ 层。第一个数是 $0$，而第二个数实际上并不是严格意义上的分数，这里将其看成无穷大即可。</p><p>每次将相邻两分数的中位分数插在它们的中间，一层一层无限地计算下去，那么前几层就会得到：</p><p>$$\frac{0}{1},\bm{\frac{1}{1}},\frac{1}{0}$$</p><p>$$\frac{0}{1},\bm{\frac{1}{2}},\frac{1}{1},\bm{\frac{2}{1}},\frac{1}{0}$$</p><p>$$\frac{0}{1},\bm{\frac{1}{3}},\frac{1}{2},\bm{\frac{2}{3}},\frac{1}{1},\bm{\frac{3}{2}},\frac{2}{1},\bm{\frac{3}{1}},\frac{1}{0}$$</p><p>可以看到，第一次产生 $1$ 个新值，第二次产生 $2$ 个，第三次产生4个，再接下来会新得到8个值，以此类推。不难发现，一个在某层中新产生的分数会在下一层的计算中产生左右两个新的分数，那么让$\frac{1}{1}$为根，每层中的新值分别向下一层与其相邻的左右两个点连边，并作为其的两个孩子节点，这样就构造出了如图一所示的Stern-Brocot tree（实线连接的树）。假设某分数$\frac{a+c}{b+d}$由$\frac{a}{b}$和$\frac{c}{d}$构造得到，那么可以发现，$\frac{a}{b}$在树中是$\frac{a+c}{b+d}$节点从下往上看第一个小于其值的祖先节点，即它左上方最近的祖先。类似地，$\frac{c}{d}$是$\frac{a+c}{b+d}$右上方最近的祖先。</p><p>事实上，Stern-Brocot tree不仅是一个无限完全二叉树，其也满足二叉搜索树的性质：每个点的权值大于等于左子树中任意一点的权值，并且小于等于右子树任意一点的权值。当然，等于的情况在这里并不会出现。若只考虑这个无限大的树的前 $k$ 层，对其做中序遍历，并将 $\frac{0}{1}$ 和 $\frac{1}{0}$ 分别添加在序列的头尾，那么就得到了我们之前构造的第 $k$ 层序列。</p><center><img src="/img/sbtree.png" width="90%"></center><h3 id="3-2-Stern-Brocot-tree的性质"><a href="#3-2-Stern-Brocot-tree的性质" class="headerlink" title="3.2. Stern-Brocot tree的性质"></a>3.2. Stern-Brocot tree的性质</h3><p>为了说明Stern-Brocot tree能展示所有的正有理数且树上节点与正有理数一一对应，主要需证明以下三条性质：有序性、不可约性、所有正有理数的存在性。</p><h4 id="3-2-1-有序性"><a href="#3-2-1-有序性" class="headerlink" title="3.2.1. 有序性"></a>3.2.1. 有序性</h4><blockquote><p><strong>定理1.</strong> 若 $\frac{a}{c}&lt;\frac{b}{d}$ 且 $a,b,c,d\ge 0$，则 $\frac{a}{c}&lt;\frac{a+b}{c+d}&lt;\frac{b}{d}$。</p></blockquote><p>这条性质是说两分数的中位分数的大小严格介于它们中间，经过简单的移项通分即可证明，此处略去。因为第 $0$ 层的分数是升序排列的，因此每次将相邻两分数的中位分数写在中间不会破坏每层的有序性。</p><h4 id="3-2-2-不可约性"><a href="#3-2-2-不可约性" class="headerlink" title="3.2.2. 不可约性"></a>3.2.2. 不可约性</h4><blockquote><p><strong>定理2.</strong> 若$\frac{a}{b}$和$\frac{c}{d}$是构造过程中任意一层的相邻分数，那么就有$bc-ad&#x3D;1$。</p></blockquote><p><strong>证明.</strong> 初始第 $0$ 层是正确的，$1\times 1-0\times 0 &#x3D;1$。当插入中位分数后，序列变成了<br>$$\dots,\frac{a}{b},\frac{a+c}{b+d},\frac{c}{d},\dots$$</p><p>需要检验的新情形是<br>$$<br>\begin{aligned}<br>  b(a+c) - a(b+d) &amp;&#x3D; 1 \<br>  c(b+d) - d(a+c) &amp;&#x3D; 1 .<br>\end{aligned}<br>$$<br>根据 $bc-ad&#x3D;1$ 不难证明其正确性。</p><p>得到该性质之后，结合裴蜀定理，即关于未知数 $x$ 和 $y$ 的线性不定方程$Ax+By&#x3D;C$ 有整数解，当且仅当 $C$ 是 $gcd(A,B)$ 的倍数，可以推出 $gcd(a,b)&#x3D;gcd(c,d)&#x3D;1$，即构造出的任意分数都是最简分数。</p><h4 id="3-2-3-所有正有理数的存在性"><a href="#3-2-3-所有正有理数的存在性" class="headerlink" title="3.2.3. 所有正有理数的存在性"></a>3.2.3. 所有正有理数的存在性</h4><p>根据有序性可以得知，一个分数在树中不会出现超过一次。更进一步，可以证明：</p><blockquote><p><strong>定理3.</strong> 任何满足 $gcd(x,y)&#x3D;1$ 的正有理数 $\frac{x}{y}$ 都能通过有限步构造得到。</p></blockquote><p><strong>证明.</strong> 一开始我们有</p><p>$$\frac{a}{b}&#x3D;\frac{0}{1}&lt;\frac{x}{y}&lt;\frac{1}{0}&#x3D;\frac{c}{d}$$</p><p>每次比较 $\frac{x}{y}$ 和 $\frac{a+c}{b+d}$，分为三种情况，并不断进行下去：</p><ul><li><p>$\frac{x}{y}&#x3D;\frac{a+c}{b+d}$，则构造出了 $\frac{x}{y}$；</p></li><li><p>$\frac{x}{y}&lt;\frac{a+c}{b+d}$，则令 $c\gets a+c$，$d\gets b+d$；</p></li><li><p>$\frac{x}{y}&gt;\frac{a+c}{b+d}$，则令 $a\gets a+c$，$b\gets b+d$</p></li></ul><p>那么就有<br>$$<br>\begin{aligned}<br>           \frac{x}{y} - \frac{a}{b} &amp;&gt;0 \<br>        \frac{c}{d} - \frac{x}{y} &amp;&gt;0<br>\end{aligned}<br>$$</p><p>$$<br>\begin{aligned}<br>        bx - ay &amp;\ge 1 \<br>        cy - dx &amp;\ge 1<br>\end{aligned}\tag{1,2}<br>$$</p><p>(1)乘上 $c+d$，(2)乘上 $a+b$，然后两式相加得到<br>$$<br>\begin{aligned}<br>           (c+d)(bx - ay) + (a+b)(cy - dx) \ge a+b+c+d<br>\end{aligned} \tag{3}<br>$$<br>根据定理 2 化简可得<br>$$<br>\begin{aligned}<br>x+y \ge a+b+c+d<br>\end{aligned}\tag{3}<br>$$</p><p>因为每一步中 $a,b,c,d$ 里至少有一个变量会变大，所以(3)式不会一直成立。也就是说，一定能在有限步内构造出 $\frac{x}{y}$。</p><p>这样所有正有理数都会在树中出现且仅出现一次。实际上，这个证明过程本质就是在Stern-Brocot tree这个二叉搜索树上去二分地定位一个正有理数的位置，后文还会涉及到类似内容。</p><h2 id="4-准备工作"><a href="#4-准备工作" class="headerlink" title="4. 准备工作"></a>4. 准备工作</h2><p>上一节证明了树上节点与正有理数是一一对应的，本节将引入Stern-Brocot tree独特的数系来具体阐明这个一一对应的关系。之后用矩阵的形式描述从根节点往下移动的过程中分子分母的变化。本节最后将揭示Stern-Brocot tree与求两个数最大公约数的欧几里得算法的联系，为第 $5$ 节给出的优化提供理论基础。</p><h3 id="4-1-数系的引入"><a href="#4-1-数系的引入" class="headerlink" title="4.1. 数系的引入"></a>4.1. 数系的引入</h3><p>在上一小节中，我们已经知道了所有正有理数都会在树中的某个位置恰好出现一次。考虑用 L 或 R 表示从根走到某节点的路径时每次往左孩子还是右孩子走，那么这样一个由 L 和 R 组成的有限长度的字符串就唯一确定了树上的一个位置，也就唯一表示了一个正有理数。例如 LRL，表示从根 $\frac{1}{1}$ 往左走到 $\frac{1}{2}$，然后往右走走到 $\frac{2}{3}$，再往左到 $\frac{3}{5}$，所以 LRL 表示分数 $\frac{3}{5}$。特殊的，根节点 $\frac{1}{1}$ 对应一个空字符串，用字符 $I$ 表示。</p><blockquote><p><strong>定义2.</strong> 若 $S$ 是由 L 和 R 组成的字符串，$\frac{x}{y}$ 为Stern-Brocot tree上与 $S$ 对应的分数，则定义<br>$$<br>\begin{aligned}<br>       f(S) &#x3D; \frac{x}{y}<br>\end{aligned}<br>$$</p></blockquote><blockquote><p><strong>定理4.</strong> 若 $f(S)&#x3D;\frac{x}{y}$，则字符串 $S$ 的长度不会超过 $x+y-2$。</p></blockquote><p>根据定理 3 证明中的(3)式即可证明。特殊地，当 $\frac{x}{y}$ 为 $\frac{1}{n}$ 或 $\frac{n}{1}$ 的形式时，$S$ 长度为 $n-1$，此时达到最长。这个性质说明直接按照定理 3 证明中的二分方法去定位 $\frac{x}{y}$ 的话，时间复杂度是线性的，需要发掘Stern-Brocot tree更多更加本质的特点，从而达到优化。</p><h3 id="4-2-矩阵表示"><a href="#4-2-矩阵表示" class="headerlink" title="4.2 矩阵表示"></a>4.2 矩阵表示</h3><p>在 3.2.3 小节证明的二分过程中，我们维护了四个变量 $a,b,c,d$ 并做了一些线性的变换，本节中用 $2\times 2$ 矩阵来描述同样的过程。</p><blockquote><p><strong>定义3.</strong> 假设某分数 $\frac{a+c}{b+d}$ 由 $\frac{a}{b}$ 和 $\frac{c}{d}$ 构造得到，其中 $\frac{a}{b}$ 是它左上方最近的祖先，$\frac{c}{d}$ 是它右上方最近的祖先，且 $f(S)&#x3D;\frac{a+c}{b+d}$，定义矩阵：<br>$$<br>\begin{aligned}<br>       M(S)&#x3D;<br>       \begin{pmatrix}<br>       b &amp; d \<br>    a &amp; c<br>    \end{pmatrix}<br>\end{aligned}<br>$$</p></blockquote><p>注意，这里将祖先分数的分子放在了分母的下方，好处是根节点可以表示成一个单位矩阵，即<br>$$<br>\begin{aligned}<br>       M(I)&#x3D;<br>       \begin{pmatrix}<br>       1 &amp; 0 \<br>    0 &amp; 1<br>    \end{pmatrix}<br>\end{aligned}<br>$$<br>根的左右孩子 $\frac{1}{2}$ 和 $\frac{2}{1}$ 分别表示为<br>$$<br>\begin{aligned}<br>       M(L)&#x3D;<br>       \begin{pmatrix}<br>       1 &amp; 1 \<br>    0 &amp; 1<br>    \end{pmatrix},,<br>    M(R)&#x3D;<br>    \begin{pmatrix}<br>    1 &amp; 0 \<br>    1 &amp; 1<br>    \end{pmatrix}<br>\end{aligned}<br>$$<br>考虑证明 3.2.2 二分的后两种情况，即走到 $\frac{a+c}{b+d}$ 的左右孩子<br>$$<br>\begin{aligned}<br>       M(SL)&#x3D;<br>       \begin{pmatrix}<br>       b &amp; b+d \<br>    a &amp; a+c<br>    \end{pmatrix},,<br>    M(SR)&#x3D;<br>    \begin{pmatrix}<br>    b+d &amp; d \<br>    a+c &amp; c<br>    \end{pmatrix}<br>\end{aligned}<br>$$<br>不难发现<br>$$<br>\begin{aligned}<br>       M(SL) &amp; &#x3D;<br>       \begin{pmatrix}<br>       b &amp; b+d \<br>    a &amp; a+c<br>    \end{pmatrix}&#x3D;<br>    \begin{pmatrix}<br>       b &amp; d \<br>        a &amp; c<br>    \end{pmatrix}<br>    \begin{pmatrix}<br>       1 &amp; 1 \<br>        0 &amp; 1<br>    \end{pmatrix}<br>     \<br>    M(SR) &amp; &#x3D;<br>    \begin{pmatrix}<br>    b+d &amp; d \<br>    a+c &amp; c<br>    \end{pmatrix} &#x3D;<br>    \begin{pmatrix}<br>    b &amp; d \<br>    a &amp; c<br>    \end{pmatrix}<br>    \begin{pmatrix}<br>        1 &amp; 0 \<br>        1 &amp; 1<br>    \end{pmatrix}<br>\end{aligned}<br>$$<br>一般地，下述定理成立</p><blockquote><p><strong>定理5.</strong> 设 $S,T$ 是两个由 L 和 R 组成的字符串，则<br>$$<br>\begin{aligned}<br>       M(ST)&#x3D;M(S)M(T)<br>\end{aligned}<br>$$</p></blockquote><p>因此我们可以将 LR 字符串代表的路径写成一系列 $M(L)$ 和 $M(R)$ 矩阵连乘的结果。</p><h3 id="4-3-欧几里德算法"><a href="#4-3-欧几里德算法" class="headerlink" title="4.3. 欧几里德算法"></a>4.3. 欧几里德算法</h3><p>考虑简化上述二分方法，若已知分数 $\frac{x}{y}$，对应的矩阵表示为$\begin{pmatrix} b &amp; d \ a &amp; c \end{pmatrix}$，那么有 $x&#x3D;a+c$ 和 $y&#x3D;b+d$。假设 $x&gt;y$，那么对应在树上的路径第一步必为 R，设剩余路径为 $S$，则有 $f(RS)&#x3D;\frac{x}{y}$。</p><p>即<br>$$<br>\begin{aligned}<br>\begin{pmatrix} 1 &amp; 0 \ 1 &amp; 1 \end{pmatrix} M(S)&#x3D;\begin{pmatrix} b &amp; d \ a &amp; c \end{pmatrix}<br>\end{aligned}<br>$$<br>解得<br>$$<br>\begin{aligned}<br>M(S)&#x3D;\begin{pmatrix} 1 &amp; 0 \ -1 &amp; 1 \end{pmatrix}\begin{pmatrix} b &amp; d \ a &amp; c \end{pmatrix}&#x3D;\begin{pmatrix} b &amp; d \ a-b &amp; c-d \end{pmatrix}<br>\end{aligned}<br>$$<br>因此<br>$$<br>\begin{aligned}<br>f(S)&#x3D;\frac{(a+c)-(b+d)}{b+d}&#x3D;\frac{x-y}{y}<br>\end{aligned}<br>$$<br>同理，若 $x&lt;y$，设 $f(LS)&#x3D;\frac{x}{y}$，则有 $f(S)&#x3D;\frac{x}{y-x}$。这样假设我们已知 $\frac{x}{y}$，想求出它在树上的位置，即对应的字符串序列，那么每次可以分两种情况：当 $x&gt;y$时，输出一个 R，并令 $x$ 减去 $y$；当 $x&lt;y$ 时，输出一个 L，并令 $y$ 减去 $x$。反复执行上述流程，直到 $x&#x3D;y&#x3D;1$ 结束，此时输出的字符串就是答案。实际上，这个过程就是对 $x$ 和 $y$ 做辗转相减，因为 $x$ 和 $y$ 互质，所以最终一定有 $x&#x3D;y&#x3D;1$。</p><p>这样，我们自然可以将其优化成辗转相除法。如下所示，代码$LOCATE(x,y)$作用即输出 $\frac{x}{y}$ 的路径表示，只是这次对于同一段连续的 L 或连续的 R，只输出一个字符和其连续出现的次数。</p><pre class="pseudocode">\begin{algorithm}\caption{Locate}\begin{algorithmic}\Procedure{Locate}{$x,y$}\While{$x\ne y$}\If{$x\le y$} \State $step \gets \lfloor (y-1)/x \rfloor $\State $y \gets y-step\times x$\State \PRINT $\text{'L'},step$\Else \State $step \gets \lfloor (x-1)/y \rfloor $\State $x \gets x-step\times y$\State \PRINT $\text{'R'},step$\EndIf\EndWhile\EndProcedure\end{algorithmic}\end{algorithm}</pre><p>其中，第 4 行和第 8 行中的减一是为了避免最后一次while循环将 $x$ 或 $y$ 减小至0，所以除了最后一次除法外，在树上定位 $\frac{x}{y}$ 的过程与求 $x$ 和 $y$ 最大公约数的欧几里德算法步骤完全相同。根据拉梅定理，$x$ 和 $y$ 辗转相除的步数不超过 $min(x,y)$ 十进制位数的 $5$ 倍。由此可以得出该算法的时间复杂度为 $O(\log{(x+y)})$。</p><h2 id="5-Stern-Brocot-tree上的二分算法及其优化"><a href="#5-Stern-Brocot-tree上的二分算法及其优化" class="headerlink" title="5. Stern-Brocot tree上的二分算法及其优化"></a>5. Stern-Brocot tree上的二分算法及其优化</h2><p>有了之前的准备工作，在这一节中将解决 2.3 小节中提出的有理数集上的二分问题。需要注意的是，该问题与 4.3 小节中的定位问题是不同的。主要区别在于有理数集上的二分问题中 $\frac{x}{y}$ 是未知的，需要通过二分地询问从而逐步确定，而 4.3 小节所讨论的是已知一有理数 $\frac{x}{y}$ 去找它在树中的位置。</p><p>一个直接的方法是将所有可能的 $O(N^2)$ 个有理数列出来，排序后利用整数区间上二分的模型，虽然二分的复杂度是 $O(\log{N})$，但是预处理的过程就已经需要 $O(N^2)$ 的时间和空间了。[2]提出了一种 $O(\log{N})$ 的算法，先用指数搜索的技巧确定答案的整数部分，然后用一种本质为连分数展开的递归方法确定小数部分。本文提出的方法时间复杂度同样为 $O(\log{N})$，并且也使用了指数搜索，不同的是本文提出的方法是非递归的，且没有分别计算整数与小数部分，而是在一个大的二分查找框架中确定答案，思路是寻求Stern-Brocot tree与欧几里德算法的联系。</p><h3 id="5-1-朴素的二分方法"><a href="#5-1-朴素的二分方法" class="headerlink" title="5.1. 朴素的二分方法"></a>5.1. 朴素的二分方法</h3><p>考虑每次在树上从根出发一步一步地走，询问当前分数 $\frac{p}{q}$ 是否小于等于答案。若是，则更新答案为当前分数，并走到右孩子上；若否，则直接走到左孩子上。当 $p&gt;N$ 或 $q&gt;N$ 时，算法停止，此时答案记录的分数即为我们想要的结果。根据定理4可知，这种方法的时间复杂度是 $O(N)$。</p><h3 id="5-2-二分优化"><a href="#5-2-二分优化" class="headerlink" title="5.2. 二分优化"></a>5.2. 二分优化</h3><p>根据 4.3 节可得出以下结论：</p><blockquote><p><strong>定理 6.</strong> 设 $f(S)&#x3D;\frac{x}{y}$，若字符串中连续相同的字符为一段，则字符串 $S$ 的段数是 $O(\log{(x+y)})$ 的。换句话说，从根节点到 $\frac{x}{y}$ 的路径拐弯的次数是 $O(\log{(x+y)})$ 的。</p></blockquote><p>那么考虑将朴素二分过程的一步一步走改成一段一段走，对于每一段，再次二分步长从而走到下一个“拐点”上。因为每次的步长未知，所以二分的上界设为 $N$。这样，因为有 $O(\log{N})$ 段，对于每段又需要分别做一次 $O(\log{N})$ 的二分，所以该方法的时间复杂度为 $O(\log^2{N})$。</p><h3 id="5-3-进一步优化"><a href="#5-3-进一步优化" class="headerlink" title="5.3. 进一步优化"></a>5.3. 进一步优化</h3><p>直觉上来说，该方法还有进一步优化的空间。思考一下树上路径的特点，如果段数少，则每一段步长就可能会很长，比如形如 $\frac{1}{n}$ 这样的分数，$LLLLL\dots$;如果段数多，则每一段步长就会很短，比如斐波那契数列相邻两项之比，$LRLRLR\dots$。因此，在之前优化中二分上限如果不是每次跑满 $O(\log{N})$，而是 $O(\log{s_i})$ 的话（假设 $s_i$ 是第 $i$ 段的长度），时间复杂度就可能降下来。</p><p>这里要用到指数搜索，即先倍增后二分的技巧。一开始先倍增的跳，跳 $1$ 步，$2$步，$4$ 步，$8$ 步…直到 $2^j$ 步时判断出已经跳过了拐点，之后即可确定$2^{j-1}\le s_i &lt;2^j$，那么再在区间 $\left[2^{j-1},2^j\right)$ 上二分步长即可，显然最多只需询问 $2\log{s_i}+O(1)$ 次，第 $i$ 次倍增后二分的时间复杂度就是 $O(\log{s_i})$。伪代码如下：</p><pre class="pseudocode">\begin{algorithm}\caption{BinarySearchForRational} \begin{algorithmic}\Procedure{BinarySearchForRational}{}\State $a,b,c,d \gets 0,1,1,0$\While{$a+c\le N \textbf{ and } b+d\le N$}    \If{\Call{HasP}{$a+c,b+d$}}        \State $step  \gets 1$        \While{$a+step\times c\le N \textbf{ and } b+step\times d\le N \textbf{ and } $\Call{HasP}{$a + step \times c, b + step \times d$}}            \State $step \gets step\times 2$        \EndWhile        \State $ L,R \gets \lfloor step/2\rfloor ,step - 1$        \While{$L\lt R$}            \State $mid \gets \lceil (L + R) / 2\rceil$            \If{\Call{HasP}{$a + mid \times c, b + mid \times d$}}                \State $L \gets mid$            \Else                 \State $R \gets mid-1$            \EndIf        \EndWhile        \State $a,b \gets a+L\times c,b+L\times d$        \State $ansx,ansy= a,b$    \Else         \State $step  \gets 1$        \While{$step\times a+ c\le N \textbf{ and } step\times b+ d\le N \textbf{ and } \textbf{ not } $\Call{HasP}{$step \times a +  c, step \times b +  d$}}            \State $step \gets step\times 2$        \EndWhile        \State $ L,R \gets \lfloor step/2\rfloor +1 ,step$        \While{$L \lt R$}            \State $mid \gets \lfloor (L + R) / 2\rfloor$            \If{\Call{HasP}{$mid \times a +  c, mid \times b + d$}}                \State $R \gets mid$            \Else                 \State $L \gets mid+1$            \EndIf        \EndWhile        \State $c,d \gets (L-1)\times a+c,(L-1)\times  b+d$    \EndIf\EndWhile\Return $ansx,ansy$\EndProcedure\end{algorithmic}\end{algorithm}</pre><p>后面考虑如何证明总的时间复杂度为 $O(\log{N})$。</p><p>设 $r_0&#x3D;x,r_1&#x3D;y$，不妨设 $x\ge y$，由辗转相除得到一系列式子：</p><p>$$<br> \begin{aligned}<br>  &amp;r_0  &#x3D;q_1r_1+r_2,\<br>  &amp;r_1  &#x3D;q_2r_2+r_3,\<br>  &amp; \dots,\<br>  &amp;r_{k-2}&#x3D;q_{k-1}r_{k-1}+r_k,\<br>  &amp;r_{k-1}&#x3D;q_kr_k<br>  \end{aligned}<br>$$</p><p>其中 $k$ 表示 $x$ 和 $y$ 做辗转相除的除法次数，也是 Stern-Brocot tree 上，根节点到 $\frac{x}{y}$ 的路径段数。根据 4.3 小节可知，$s_i&#x3D;q_i(1\le i &lt;k),s_k&#x3D;q_k-1$，即第 $i$ 段路径的长度等于辗转相除中每次得到的商，除了最后一段是 $q_k-1$。</p><p>由于询问只能查询当前有理数是否小于等于答案，因此在树上二分查找的过程中遇到最终答案并记录后也不会立刻停止算法，而是会再往右走一步，之后一直向左走，直到分子或分母超过 $N$。到节点 $\frac{x}{y}$ 之后，从右侧不断往左逼近 $\frac{x}{y}$ 的步数不超过 $\frac{N}{x}$。因此，方法三的总询问次数可以分到达 $\frac{x}{y}$ 之前与之后这两段计算：</p><p>$$<br>\begin{aligned}<br>  &amp;\sum_{i&#x3D;1}^{k}(2\log{s_i}+O(1)) + 2\log{\frac{N}{x}}+O(1) \<br>  \le&amp; 2\sum_{i&#x3D;1}^{k}\log{q_i}+ 2\log{N}-2\log{x} +O(\log{x})\<br>  &#x3D;&amp;2\sum_{i&#x3D;1}^{k}\log{\lfloor\frac{r_{i-1}}{r_i}\rfloor}+ 2\log{N}-2\log{x}+O(\log{x})\<br>  \le &amp; 2\sum_{i&#x3D;1}^{k}\log{\frac{r_{i-1}}{r_i}}+ 2\log{N}-2\log{x}+O(\log{x})\<br>&#x3D;&amp; 2\log{\prod_{i&#x3D;1}^{k}\frac{r_{i-1}}{r_i}}+ 2\log{N}-2\log{x} +O(\log{x})\<br>&#x3D;&amp;2\log{\frac{r_{0}}{r_n}}+ 2\log{N}-2\log{x}+O(\log{x})\<br>&#x3D;&amp;2\log{x}+ 2\log{N}-2\log{x}+O(\log{x})\<br>&#x3D;&amp;O(\log{N})<br> \end{aligned}<br>$$<br>所以最终本文实现了在 $O(\log{N})$ 时间内通过询问某个数是否小于等于答案的方式在有理数集 $Q_N&#x3D; \left{ \frac{p}{q}:p,q\in \left{ 1,2,\dots,N\right} \right}$ 上确定未知数 $\frac{x}{y}$。该方法用非递归方法实现，借助Stern-Brocot tree的结构来实现对有理数的二分，二分时每次通过指数搜索快速走到路径拐点，并结合欧几里得算法证明了该算法是对数时间的。根据信息论理论，该复杂度达到了理论下界。至此，问题解决。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] Graham R L, Knuth D E, Patashnik O, et al. Concrete mathematics: a foundation for computer science[J]. Computers in Physics, 1989, 3(5): 106-107.</p><p>[2] Kwek S, Mehlhorn K. Optimal search for rationals[J]. Information Processing Letters, 2003, 86(1): 23-26.</p><p>[3] Bentley J L, Yao A C C. An almost optimal algorithm for unbounded searching[J]. Information processing letters, 1976, 5(SLAC-PUB-1679).</p><h2 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h2><h3 id="Probe-Droids-–-Kattis-Kattis"><a href="#Probe-Droids-–-Kattis-Kattis" class="headerlink" title="Probe Droids – Kattis, Kattis"></a><a href="https://open.kattis.com/problems/probedroids">Probe Droids – Kattis, Kattis</a></h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>在一个 $n\times m \ (n,m\le 10^6)$ 的网格上，每个格点有一个机器人。最左下角的点没有机器人，而是一个初始面向 $x$ 轴正方向的炮塔，坐标记为 $(1, 1)$。如果一个机器人在它的视线上，则摧毁该机器人。否则，炮塔会逆时针旋转直到可以看到机器人。重复这个操作，直到所有机器人都被摧毁。现在有 $q\ (\le 100)$ 次询问，每次询问第 $k\ (1\le k\le n\times m)$ 个被摧毁的机器人的坐标。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>二分斜率后，转化为计数问题，求 $y &#x3D; \frac{b}{a}x$ 下方有多少个点（将左下角视为原点），并与 $k$ 比较，从而判断斜率$\frac{b}{a}$的大小。二分斜率的方法即用本文描述的有理数二分方法，之后的计数问题套用<a href="https://izard.space/2018/08/28/%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/">类欧几里得算法</a>。总时间复杂度$O(q\log^2{n})$。</p><h4 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">a, b, c, n</span>):<br>    <span class="hljs-keyword">if</span> c == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> a &gt;= c <span class="hljs-keyword">or</span> b &gt;= c:<br>        <span class="hljs-keyword">return</span> (a // c) * n * (n + <span class="hljs-number">1</span>) // <span class="hljs-number">2</span> + (b // c) * (n + <span class="hljs-number">1</span>) + f(a % c, b % c, c, n)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> (a * n + b) // c * n - f(c, c - b - <span class="hljs-number">1</span>, a, (a * n + b) // c - <span class="hljs-number">1</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">y, x</span>):<br>    <span class="hljs-keyword">global</span> n, m<br>    <span class="hljs-built_in">len</span> = <span class="hljs-built_in">min</span>(n, x * (m - <span class="hljs-number">1</span>) // y + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> m * <span class="hljs-built_in">len</span> - f(y, x - y - <span class="hljs-number">1</span>, x, <span class="hljs-built_in">len</span>) + (x - y - <span class="hljs-number">1</span>) // x - <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">algo</span>(<span class="hljs-params">a, b, c, d</span>):<br>    <span class="hljs-keyword">global</span> k, N<br>    ansx, ansy = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> a + c &lt;= N <span class="hljs-keyword">and</span> b + d &lt;= N:<br>        <span class="hljs-keyword">if</span> calc(a + c, b + d) &lt; k:<br>            step = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> step * a + c &lt;= N <span class="hljs-keyword">and</span> step * b + d &lt;= N <span class="hljs-keyword">and</span> calc(step * a + c, step * b + d) &lt; k:<br>                step *= <span class="hljs-number">2</span><br>            l = (step // <span class="hljs-number">2</span>) + <span class="hljs-number">1</span><br>            r = step<br>            <span class="hljs-keyword">while</span> l &lt; r:<br>                mid = (l + r) // <span class="hljs-number">2</span><br>                <span class="hljs-keyword">if</span> calc(mid * a + c, mid * b + d) &lt; k:<br>                    l = mid + <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    r = mid<br>            c = (l - <span class="hljs-number">1</span>) * a + c<br>            d = (l - <span class="hljs-number">1</span>) * b + d<br>        <span class="hljs-keyword">else</span>:<br>            step = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> a + step * c &lt;= N <span class="hljs-keyword">and</span> b + step * d &lt;= N <span class="hljs-keyword">and</span> calc(a + step * c, b + step * d) &gt;= k:<br>                step *= <span class="hljs-number">2</span><br>            l = step // <span class="hljs-number">2</span><br>            r = step - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> l &lt; r:<br>                mid = (l + r + <span class="hljs-number">1</span>) // <span class="hljs-number">2</span><br>                <span class="hljs-keyword">if</span> calc(a + mid * c, b + mid * d) &lt; k:<br>                    r = mid - <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    l = mid<br>            a = a + l * c<br>            b = b + l * d<br>            ansx, ansy = b, a<br>    <span class="hljs-keyword">return</span> ansx, ansy<br><br><br>n, m, q = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().strip().split())<br>N = <span class="hljs-built_in">max</span>(n, m)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q):<br>    k = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>().strip())<br>    <span class="hljs-keyword">if</span> k &lt; m:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> k &gt; (m - <span class="hljs-number">1</span>) * n:<br>        <span class="hljs-built_in">print</span>(k - (m - <span class="hljs-number">1</span>) * n + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">continue</span><br>    x, y = algo(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>    cnt = calc(y, x) - k<br>    up = <span class="hljs-built_in">min</span>((n - <span class="hljs-number">1</span>) // x, (m - <span class="hljs-number">1</span>) // y)<br>    <span class="hljs-built_in">print</span>((up - cnt) * x + <span class="hljs-number">1</span>, (up - cnt) * y + <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0-写在前面&quot;&gt;&lt;a href=&quot;#0-写在前面&quot; class=&quot;headerlink&quot; title=&quot;0. 写在前面&quot;&gt;&lt;/a&gt;0. 写在前面&lt;/h2&gt;&lt;p&gt;本文中用 Stern-Brocot tree 做有理数二分的 idea 来自q神，后来我独立证明了其时间</summary>
      
    
    
    
    <category term="算法学习" scheme="https://izard.space/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Stern-Brocot tree" scheme="https://izard.space/tags/Stern-Brocot-tree/"/>
    
  </entry>
  
  <entry>
    <title>NOIP-2015</title>
    <link href="https://izard.space/2020/09/21/NOIP-2015/"/>
    <id>https://izard.space/2020/09/21/NOIP-2015/</id>
    <published>2020-09-21T14:26:24.000Z</published>
    <updated>2023-06-22T03:17:01.439Z</updated>
    
    <content type="html"><![CDATA[<h4 id="D1T1-神奇的幻方"><a href="#D1T1-神奇的幻方" class="headerlink" title="D1T1 神奇的幻方"></a>D1T1 <a href="https://www.luogu.com.cn/problem/P2615">神奇的幻方</a></h4><p>简单模拟</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> a[<span class="hljs-number">50</span>][<span class="hljs-number">50</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-type">int</span> x=<span class="hljs-number">1</span>,y=(n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>    a[x][y]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n*n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span> &amp;&amp; y!=n) x=n,y++;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x!=<span class="hljs-number">1</span> &amp;&amp; y==n) x--,y=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span> &amp;&amp; y==n) x++;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!a[x<span class="hljs-number">-1</span>][y+<span class="hljs-number">1</span>]) x--,y++;<br>        <span class="hljs-keyword">else</span> x++;<br>        a[x][y]=i;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>,a[i][j],(j&lt;n)?<span class="hljs-string">&#x27; &#x27;</span>:<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="D1T2-信息传递"><a href="#D1T2-信息传递" class="headerlink" title="D1T2 信息传递"></a>D1T2 <a href="https://www.luogu.com.cn/problem/P2661">信息传递</a></h4><p>n个点，每个点出度为1，形成的图为基环(内向)树构成的森林。题目要求最小的环长。</p><p>可以用并查集维护，这样就能找出所有环上的某一条边了，沿环绕一圈求出环长。这样每个环只遍历一次，复杂度线性。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 200010</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> fa[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getfa</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x==fa[x]?x:fa[x]=<span class="hljs-built_in">getfa</span>(fa[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Union</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    x=<span class="hljs-built_in">getfa</span>(x);<br>    y=<span class="hljs-built_in">getfa</span>(y);<br>    <span class="hljs-keyword">if</span>(x==y) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    fa[x]=y;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">walk</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>,y=x;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>    &#123;<br>        y=a[y];<br>        ++ans;<br>        <span class="hljs-keyword">if</span>(y==x) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a+i),fa[i]=i;<br>    <span class="hljs-type">int</span> ans=~<span class="hljs-number">0U</span>&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n)<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">Union</span>(i,a[i]))<br>            ans=<span class="hljs-built_in">min</span>(ans,<span class="hljs-built_in">walk</span>(i));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="D1T3-斗地主"><a href="#D1T3-斗地主" class="headerlink" title="D1T3 斗地主"></a>D1T3 <a href="https://www.luogu.com.cn/problem/P2668">斗地主</a></h4><p>搜索剪枝结合贪心，贪心即考虑枚举的牌型顺序，肯定优先走出牌多的，比如顺子，四带二等等，这样就能使最优性剪枝发挥出作用了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> T,n,ans;<br><span class="hljs-type">int</span> a[<span class="hljs-number">16</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> now=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">14</span>;++i)<br>        <span class="hljs-keyword">if</span>(a[i])<br>            ++now;<br>    <span class="hljs-keyword">return</span> now;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> step,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(step&gt;=ans) <span class="hljs-keyword">return</span>;<br>    ans=<span class="hljs-built_in">min</span>(ans,step+<span class="hljs-built_in">calc</span>());<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">3</span>;i&lt;=<span class="hljs-number">13</span>;++i)<span class="hljs-comment">//san shun</span><br>    &#123;<br>        <span class="hljs-type">int</span> j=i;<br>        <span class="hljs-keyword">while</span>(j&lt;=<span class="hljs-number">14</span> &amp;&amp; a[j]&gt;=<span class="hljs-number">3</span>) ++j;<br>        <span class="hljs-keyword">if</span>(j-i&lt;<span class="hljs-number">2</span>) <span class="hljs-keyword">continue</span>;<br>        a[i]-=<span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=i+<span class="hljs-number">1</span>;k&lt;j;++k)<br>        &#123;<br>            a[k]-=<span class="hljs-number">3</span>;<br>            <span class="hljs-built_in">dfs</span>(step+<span class="hljs-number">1</span>,x-(k-i+<span class="hljs-number">1</span>)*<span class="hljs-number">3</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=i;k&lt;j;++k)<br>            a[k]+=<span class="hljs-number">3</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">3</span>;i&lt;=<span class="hljs-number">12</span>;++i)<span class="hljs-comment">// shuang shun</span><br>    &#123;<br>        <span class="hljs-type">int</span> j=i;<br>        <span class="hljs-keyword">while</span>(j&lt;=<span class="hljs-number">14</span> &amp;&amp; a[j]&gt;=<span class="hljs-number">2</span>) ++j;<br>        <span class="hljs-keyword">if</span>(j-i&lt;<span class="hljs-number">3</span>) <span class="hljs-keyword">continue</span>;<br>        a[i]-=<span class="hljs-number">2</span>;a[i+<span class="hljs-number">1</span>]-=<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=i+<span class="hljs-number">2</span>;k&lt;j;++k)<br>        &#123;<br>            a[k]-=<span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">dfs</span>(step+<span class="hljs-number">1</span>,x-(k-i+<span class="hljs-number">1</span>)*<span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=i;k&lt;j;++k)<br>            a[k]+=<span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">3</span>;i&lt;=<span class="hljs-number">10</span>;++i) <span class="hljs-comment">//dan shun</span><br>    &#123;<br>        <span class="hljs-type">int</span> j=i;<br>        <span class="hljs-keyword">while</span>(j&lt;=<span class="hljs-number">14</span> &amp;&amp; a[j]&gt;=<span class="hljs-number">1</span>) ++j;<br>        <span class="hljs-keyword">if</span>(j-i&lt;<span class="hljs-number">5</span>) <span class="hljs-keyword">continue</span>;<br>        a[i]--;a[i+<span class="hljs-number">1</span>]--;a[i+<span class="hljs-number">2</span>]--;a[i+<span class="hljs-number">3</span>]--;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=i+<span class="hljs-number">4</span>;k&lt;j;++k)<br>        &#123;<br>            a[k]--;<br>            <span class="hljs-built_in">dfs</span>(step+<span class="hljs-number">1</span>,x-(k-i+<span class="hljs-number">1</span>));<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=i;k&lt;j;++k)<br>            a[k]++;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">14</span>;++i)<br>    <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-number">4</span>)<br>    &#123;<br>        a[i]=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">dfs</span>(step+<span class="hljs-number">1</span>,x<span class="hljs-number">-4</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">14</span>;++j)<br>        <span class="hljs-keyword">if</span>(a[j]&gt;<span class="hljs-number">0</span>)<br>        &#123;<br>            a[j]--;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=j;k&lt;=<span class="hljs-number">14</span>;++k)<br>            <span class="hljs-keyword">if</span>(a[k]&gt;<span class="hljs-number">0</span>)<br>            &#123;<br>                a[k]--;<br>                <span class="hljs-built_in">dfs</span>(step+<span class="hljs-number">1</span>,x<span class="hljs-number">-6</span>);<br>                a[k]++;<br>            &#125;<br>            a[j]++;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">2</span>;j&lt;=<span class="hljs-number">14</span>;++j)<br>        <span class="hljs-keyword">if</span>(a[j]&gt;<span class="hljs-number">1</span>)<br>        &#123;<br>            a[j]-=<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=j;k&lt;=<span class="hljs-number">14</span>;++k)<br>            <span class="hljs-keyword">if</span>(a[k]&gt;<span class="hljs-number">1</span>)<br>            &#123;<br>                a[k]-=<span class="hljs-number">2</span>;<br>                <span class="hljs-built_in">dfs</span>(step+<span class="hljs-number">1</span>,x<span class="hljs-number">-8</span>);<br>                a[k]+=<span class="hljs-number">2</span>;<br>            &#125;<br>            a[j]+=<span class="hljs-number">2</span>;<br>        &#125;<br>        a[i]=<span class="hljs-number">4</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">14</span>;++i)<br>    <span class="hljs-keyword">if</span>(a[i]&gt;=<span class="hljs-number">3</span>)<br>    &#123;<br>        a[i]-=<span class="hljs-number">3</span>;<br>        <span class="hljs-built_in">dfs</span>(step+<span class="hljs-number">1</span>,x<span class="hljs-number">-3</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">14</span>;++j)<br>        <span class="hljs-keyword">if</span>(a[j]&gt;=<span class="hljs-number">1</span>)<br>        &#123;<br>            a[j]--;<br>            <span class="hljs-built_in">dfs</span>(step+<span class="hljs-number">1</span>,x<span class="hljs-number">-4</span>);<br>            a[j]++;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">2</span>;j&lt;=<span class="hljs-number">14</span>;++j)<br>        <span class="hljs-keyword">if</span>(a[j]&gt;=<span class="hljs-number">2</span>)<br>        &#123;<br>            a[j]-=<span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">dfs</span>(step+<span class="hljs-number">1</span>,x<span class="hljs-number">-5</span>);<br>            a[j]+=<span class="hljs-number">2</span>;<br>        &#125;<br>        a[i]+=<span class="hljs-number">3</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;T,&amp;n);<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(a));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>        &#123;<br>            <span class="hljs-type">int</span> x;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%*d&quot;</span>,&amp;x);<br>            <span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span>) x=<span class="hljs-number">14</span>;<br>            a[x]++;<br>        &#125;<br>        ans=n;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,n);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="D2T1-跳石头"><a href="#D2T1-跳石头" class="headerlink" title="D2T1 跳石头"></a>D2T1 <a href="https://www.luogu.com.cn/problem/P2678">跳石头</a></h4><p>非常基本的二分答案+贪心。二分一个最短跳跃距离mid，判断是否可行，即需要移走的块数是否小于等于M。可行，说明答案大于等于mid；不可行，说明答案小于mid、</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 50010</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span><br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> n,m,H;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ok</span><span class="hljs-params">(<span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> last=<span class="hljs-number">0</span>,i=<span class="hljs-number">0</span>,ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(i&lt;=n&amp;&amp; a[i]-last&lt;len) ++i;<br>        <span class="hljs-keyword">if</span>(i&gt;n) <span class="hljs-keyword">break</span>;<br>        ++ans;<br>        last=a[i];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ans&gt;<span class="hljs-number">0</span> &amp;&amp; H-last&lt;len) --ans;<br>    <span class="hljs-keyword">return</span> n-ans&lt;=m;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;H,&amp;n,&amp;m);<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a+i);<br>    <span class="hljs-type">int</span> l=<span class="hljs-number">1</span>,r=H;<br>    <span class="hljs-keyword">while</span>(l&lt;r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid=l+(r-l+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">ok</span>(mid)) l=mid;<br>        <span class="hljs-keyword">else</span> r=mid<span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,l);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="D2T2-子串"><a href="#D2T2-子串" class="headerlink" title="D2T2 子串"></a>D2T2 <a href="https://www.luogu.com.cn/problem/P2679">子串</a></h4><p>记$dp[k][i][j]$表示字符串A考虑前 $i$ 个字符，字符串B考虑前 $j$ 个字符，分 $k$ 段的方案数。</p><p>目前虽然AC了，但较为暴力，改天优化一下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> n,m,K;<br><span class="hljs-type">int</span> dp[<span class="hljs-number">2</span>][<span class="hljs-number">1005</span>][<span class="hljs-number">205</span>];<br><span class="hljs-type">char</span> a[<span class="hljs-number">1005</span>],b[<span class="hljs-number">205</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    x+=y;<br>    <span class="hljs-keyword">if</span>(x&gt;=mod) x-=mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;K);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,a+<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,b+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;=n; ++i)<br>        dp[<span class="hljs-number">0</span>][i][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>; k&lt;=K; ++k)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(dp[k&amp;<span class="hljs-number">1</span>],<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(dp[k&amp;<span class="hljs-number">1</span>]));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=m; ++j)<br>            &#123;<br>                <span class="hljs-built_in">add</span>(dp[k&amp;<span class="hljs-number">1</span>][i][j],dp[k&amp;<span class="hljs-number">1</span>][i<span class="hljs-number">-1</span>][j]);<br>                <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span>(l&lt;j &amp;&amp; l&lt;i &amp;&amp; a[i-l]==b[j-l])<br>                &#123;<br>                    ++l;<br>                    <span class="hljs-built_in">add</span>(dp[k&amp;<span class="hljs-number">1</span>][i][j],dp[(k&amp;<span class="hljs-number">1</span>)^<span class="hljs-number">1</span>][i-l][j-l]);<br>                &#125;<br>                <span class="hljs-comment">//cout&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;j&lt;&lt;&quot; &quot;&lt;&lt;k&lt;&lt;&quot; &quot;&lt;&lt;dp[i][j][k]&lt;&lt;endl;</span><br>            &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,dp[K&amp;<span class="hljs-number">1</span>][n][m]);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="D2T3-运输计划"><a href="#D2T3-运输计划" class="headerlink" title="D2T3 运输计划"></a>D2T3 <a href="https://www.luogu.com.cn/problem/P2679">运输计划</a></h4><p>二分答案+树上差分</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 300010</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> dow(i,l,r) for(int i=l;i&gt;=r;--i)</span><br><span class="hljs-type">int</span> e,head[N&lt;&lt;<span class="hljs-number">1</span>],w[N&lt;&lt;<span class="hljs-number">1</span>],last[N&lt;&lt;<span class="hljs-number">1</span>],p[N];<br><span class="hljs-type">int</span> deep[N],fa[N],num[N],son[N];<br><span class="hljs-type">int</span> top[N];<br><span class="hljs-type">int</span> a[N],dis[N];<br><span class="hljs-type">int</span> u[N],v[N],lca[N],val[N];<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    head[++e]=y;w[e]=c;<br>    last[e]=p[x];<br>    p[x]=e;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> pre,<span class="hljs-type">int</span> dep)</span></span><br><span class="hljs-function"></span>&#123;<br>    deep[x]=dep;<br>    fa[x]=pre;<br>    num[x]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=p[x];j;j=last[j])<br>    &#123;<br>        <span class="hljs-type">int</span> y=head[j];<br>        <span class="hljs-keyword">if</span>(y==pre) <span class="hljs-keyword">continue</span>;<br>        dis[y]=dis[x]+w[j];<br>        <span class="hljs-built_in">dfs</span>(y,x,dep+<span class="hljs-number">1</span>);<br>        num[x]+=num[y];<br>        <span class="hljs-keyword">if</span>(son[x]==<span class="hljs-number">-1</span>||num[y]&gt;num[son[x]])<br>            son[x]=y;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs_son</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> rt)</span></span><br><span class="hljs-function"></span>&#123;<br>    top[x]=rt;<br>    <span class="hljs-keyword">if</span>(son[x]==<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">dfs_son</span>(son[x],rt);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=p[x];j;j=last[j])<br>        <span class="hljs-keyword">if</span>(head[j]!=fa[x] &amp;&amp; head[j]!=son[x])<br>            <span class="hljs-built_in">dfs_son</span>(head[j],head[j]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=p[x];j;j=last[j])<br>    &#123;<br>        <span class="hljs-type">int</span> y=head[j];<br>        <span class="hljs-keyword">if</span>(y==fa[x]) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs</span>(y);<br>        a[x]+=a[y];<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> f1=top[x],f2=top[y];<br>    <span class="hljs-keyword">while</span>(f1!=f2)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(deep[f1]&lt;deep[f2])<br>        &#123;<br>            <span class="hljs-built_in">swap</span>(x,y);<br>            <span class="hljs-built_in">swap</span>(f1,f2);<br>        &#125;<br>        x=fa[f1];<br>        f1=top[x];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(deep[x]&gt;deep[y]) <span class="hljs-built_in">swap</span>(x,y);<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ok</span><span class="hljs-params">(<span class="hljs-type">int</span> mid)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> tot=<span class="hljs-number">0</span>,mx=<span class="hljs-number">0</span>,ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(a));<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m)<br>    <span class="hljs-keyword">if</span>(val[i]&gt;mid)<br>    &#123;<br>        a[u[i]]++;<br>        a[v[i]]++;<br>        a[lca[i]]-=<span class="hljs-number">2</span>;<br>        ++tot;<br>        ans=<span class="hljs-built_in">max</span>(ans,val[i]);<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n)<br>        <span class="hljs-keyword">if</span>(a[i]&gt;=tot)<br>            mx=<span class="hljs-built_in">max</span>(mx,dis[i]-dis[fa[i]]);<br>    <span class="hljs-keyword">return</span> ans-mx&lt;=mid;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-type">int</span> x,y,c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;c);<br>        <span class="hljs-built_in">add</span>(x,y,c);<br>        <span class="hljs-built_in">add</span>(y,x,c);<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(son,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(son));<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">dfs_son</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,u+i,v+i);<br>        lca[i]=<span class="hljs-built_in">calc</span>(u[i],v[i]);<br>        val[i]=dis[u[i]]+dis[v[i]]<span class="hljs-number">-2</span>*dis[lca[i]];<br>    &#125;<br>    <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=<span class="hljs-number">4e8</span>;<br>    <span class="hljs-keyword">while</span>(l&lt;r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">ok</span>(mid))  r=mid;<br>        <span class="hljs-keyword">else</span> l=mid+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,l);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;D1T1-神奇的幻方&quot;&gt;&lt;a href=&quot;#D1T1-神奇的幻方&quot; class=&quot;headerlink&quot; title=&quot;D1T1 神奇的幻方&quot;&gt;&lt;/a&gt;D1T1 &lt;a href=&quot;https://www.luogu.com.cn/problem/P2615&quot;&gt;神奇</summary>
      
    
    
    
    <category term="散装题解" scheme="https://izard.space/categories/%E6%95%A3%E8%A3%85%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="noip" scheme="https://izard.space/tags/noip/"/>
    
  </entry>
  
  <entry>
    <title>做个小视频</title>
    <link href="https://izard.space/2020/04/20/%E5%81%9A%E4%B8%AA%E5%B0%8F%E8%A7%86%E9%A2%91/"/>
    <id>https://izard.space/2020/04/20/%E5%81%9A%E4%B8%AA%E5%B0%8F%E8%A7%86%E9%A2%91/</id>
    <published>2020-04-20T11:40:50.000Z</published>
    <updated>2020-04-20T15:33:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><video src="/img/Tree.mp4"       type='video/mp4'        controls='controls'         preload="auto"       width='100%'        height='100%'><br></video></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;video src=&quot;/img/Tree.mp4&quot;
       type=&#39;video/mp4&#39; 
       controls=&#39;controls&#39;  
       preload=&quot;auto&quot;
       width=&#39;100%&#39; 
       height</summary>
      
    
    
    
    
    <category term="tree" scheme="https://izard.space/tags/tree/"/>
    
  </entry>
  
  <entry>
    <title>Markdown For Typora</title>
    <link href="https://izard.space/2020/04/18/Markdown%20For%20Typora/"/>
    <id>https://izard.space/2020/04/18/Markdown%20For%20Typora/</id>
    <published>2020-04-18T14:02:47.000Z</published>
    <updated>2020-04-18T14:10:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown-For-Typora"><a href="#Markdown-For-Typora" class="headerlink" title="Markdown For Typora"></a>Markdown For Typora</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><strong>Markdown</strong> is created by <a href="http://daringfireball.net/">Daring Fireball</a>; the original guideline is <a href="http://daringfireball.net/projects/markdown/syntax">here</a>. Its syntax, however, varies between different parsers or editors. <strong>Typora</strong> is using <a href="https://help.github.com/articles/github-flavored-markdown/">GitHub Flavored Markdown</a>.</p><p>[toc]</p><h2 id="Block-Elements"><a href="#Block-Elements" class="headerlink" title="Block Elements"></a>Block Elements</h2><h3 id="Paragraph-and-line-breaks"><a href="#Paragraph-and-line-breaks" class="headerlink" title="Paragraph and line breaks"></a>Paragraph and line breaks</h3><p>A paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by two or more blank lines. In Typora, you only need one blank line (press <code>Return</code> once) to create a new paragraph.</p><p>Press <code>Shift</code> + <code>Return</code> to create a single line break. Most other markdown parsers will ignore single line breaks, so in order to make other markdown parsers recognize your line break, you can leave two spaces at the end of the line, or insert <code>&lt;br/&gt;</code>.</p><h3 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h3><p>Headers use 1-6 hash (<code>#</code>) characters at the start of the line, corresponding to header levels 1-6. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># This is an H1</span><br><br><span class="hljs-section">## This is an H2</span><br><br><span class="hljs-section">###### This is an H6</span><br></code></pre></td></tr></table></figure><p>In Typora, input ‘#’s followed by title content, and press <code>Return</code> key will create a header.</p><h3 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h3><p>Markdown uses email-style &gt; characters for block quoting. They are presented as:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; This is a blockquote with two paragraphs. This is first paragraph.</span><br><span class="hljs-quote">&gt;</span><br><span class="hljs-quote">&gt; This is second pragraph. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><br><br><br><span class="hljs-quote">&gt; This is another blockquote with one paragraph. There is three empty line to seperate two blockquote.</span><br></code></pre></td></tr></table></figure><p>In Typora, inputting ‘&gt;’ followed by your quote contents will generate a quote block. Typora will insert a proper ‘&gt;’ or line break for you. Nested block quotes (a block quote inside another block quote) by adding additional levels of ‘&gt;’.</p><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><p>Input <code>* list item 1</code> will create an unordered list - the <code>*</code> symbol can be replace with <code>+</code> or <code>-</code>.</p><p>Input <code>1. list item 1</code> will create an ordered list - their markdown source code is as follows:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">## un-ordered list</span><br><span class="hljs-bullet">*</span>   Red<br><span class="hljs-bullet">*</span>   Green<br><span class="hljs-bullet">*</span>   Blue<br><br><span class="hljs-section">## ordered list</span><br><span class="hljs-bullet">1.</span>  Red<br><span class="hljs-bullet">2.</span> Green<br><span class="hljs-bullet">3.</span>Blue<br></code></pre></td></tr></table></figure><h3 id="Task-List"><a href="#Task-List" class="headerlink" title="Task List"></a>Task List</h3><p>Task lists are lists with items marked as either [ ] or [x] (incomplete or complete). For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> [ ] a task list item<br><span class="hljs-bullet">-</span> [ ] list syntax required<br><span class="hljs-bullet">-</span> [ ] normal <span class="hljs-strong">**formatting**</span>, @mentions, #1234 refs<br><span class="hljs-bullet">-</span> [ ] incomplete<br><span class="hljs-bullet">-</span> [x] completed<br></code></pre></td></tr></table></figure><p>You can change the complete&#x2F;incomplete state by clicking on the checkbox before the item.</p><h3 id="Fenced-Code-Blocks"><a href="#Fenced-Code-Blocks" class="headerlink" title="(Fenced) Code Blocks"></a>(Fenced) Code Blocks</h3><p>Typora only supports fences in GitHub Flavored Markdown. Original code blocks in markdown are not supported.</p><p>Using fences is easy: Input ``` and press <code>return</code>. Add an optional language identifier after ``` and we’ll run it through syntax highlighting:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Here&#x27;s an example:<br><br></code></pre></td></tr></table></figure><p>function test() {<br>  console.log(“notice the blank line before this function?”);<br>}</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim"><br><span class="hljs-keyword">syntax</span> highlighting:<br>​```<span class="hljs-keyword">ruby</span><br>require <span class="hljs-string">&#x27;redcarpet&#x27;</span><br>markdown = Redcarpet.<span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br>puts markdown.to_html<br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"></span><br><span class="language-xml">### Math Blocks</span><br><span class="language-xml"></span><br><span class="language-xml">You can render *LaTeX* mathematical expressions using **MathJax**.</span><br><span class="language-xml"></span><br><span class="language-xml">To add a mathematical expression, input `$$` and press the &#x27;Return&#x27; key. This will trigger an input field which accepts *Tex/LaTex* source. For example:</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">$$</span><br><span class="language-xml">\mathbf</span><span class="hljs-template-variable">&#123;V&#125;</span><span class="language-xml">_1 \times \mathbf</span><span class="hljs-template-variable">&#123;V&#125;</span><span class="language-xml">_2 =  \begin</span><span class="hljs-template-variable">&#123;vmatrix&#125;</span><span class="language-xml"></span><br><span class="language-xml">\mathbf</span><span class="hljs-template-variable">&#123;i&#125;</span><span class="language-xml"> &amp; \mathbf</span><span class="hljs-template-variable">&#123;j&#125;</span><span class="language-xml"> &amp; \mathbf</span><span class="hljs-template-variable">&#123;k&#125;</span><span class="language-xml"> \\</span><br><span class="language-xml">\frac</span><span class="hljs-template-variable">&#123;\partial X&#125;</span><span class="hljs-template-variable">&#123;\partial u&#125;</span><span class="language-xml"> &amp;  \frac</span><span class="hljs-template-variable">&#123;\partial Y&#125;</span><span class="hljs-template-variable">&#123;\partial u&#125;</span><span class="language-xml"> &amp; 0 \\</span><br><span class="language-xml">\frac</span><span class="hljs-template-variable">&#123;\partial X&#125;</span><span class="hljs-template-variable">&#123;\partial v&#125;</span><span class="language-xml"> &amp;  \frac</span><span class="hljs-template-variable">&#123;\partial Y&#125;</span><span class="hljs-template-variable">&#123;\partial v&#125;</span><span class="language-xml"> &amp; 0 \\</span><br><span class="language-xml">\end</span><span class="hljs-template-variable">&#123;vmatrix&#125;</span><span class="language-xml"></span><br><span class="language-xml">$$</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">In the markdown source file, the math block is a *LaTeX* expression wrapped by a pair of ‘$$’ marks:</span><br><span class="language-xml"></span><br><span class="language-xml">​``` markdown</span><br><span class="language-xml">$$</span><br><span class="language-xml">\mathbf</span><span class="hljs-template-variable">&#123;V&#125;</span><span class="language-xml">_1 \times \mathbf</span><span class="hljs-template-variable">&#123;V&#125;</span><span class="language-xml">_2 =  \begin</span><span class="hljs-template-variable">&#123;vmatrix&#125;</span><span class="language-xml"></span><br><span class="language-xml">\mathbf</span><span class="hljs-template-variable">&#123;i&#125;</span><span class="language-xml"> &amp; \mathbf</span><span class="hljs-template-variable">&#123;j&#125;</span><span class="language-xml"> &amp; \mathbf</span><span class="hljs-template-variable">&#123;k&#125;</span><span class="language-xml"> \\</span><br><span class="language-xml">\frac</span><span class="hljs-template-variable">&#123;\partial X&#125;</span><span class="hljs-template-variable">&#123;\partial u&#125;</span><span class="language-xml"> &amp;  \frac</span><span class="hljs-template-variable">&#123;\partial Y&#125;</span><span class="hljs-template-variable">&#123;\partial u&#125;</span><span class="language-xml"> &amp; 0 \\</span><br><span class="language-xml">\frac</span><span class="hljs-template-variable">&#123;\partial X&#125;</span><span class="hljs-template-variable">&#123;\partial v&#125;</span><span class="language-xml"> &amp;  \frac</span><span class="hljs-template-variable">&#123;\partial Y&#125;</span><span class="hljs-template-variable">&#123;\partial v&#125;</span><span class="language-xml"> &amp; 0 \\</span><br><span class="language-xml">\end</span><span class="hljs-template-variable">&#123;vmatrix&#125;</span><span class="language-xml"></span><br><span class="language-xml">$$</span><br></code></pre></td></tr></table></figure><p>You can find more details <a href="https://support.typora.io/Math/">here</a>.</p><h3 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h3><p>Input <code>| First Header  | Second Header |</code> and press the <code>return</code> key. This will create a table with two columns.</p><p>After a table is created, putting focus on that table will open up a toolbar for the table where you can resize, align, or delete the table. You can also use the context menu to copy and add&#x2F;delete individual columns&#x2F;rows.</p><p>The full syntax for tables is described below, but it is not necessary to know the full syntax in detail as the markdown source code for tables is generated automatically by Typora.</p><p>In markdown source code, they look like:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| First Header  | Second Header |<br>| ------------- | ------------- |<br>| Content Cell  | Content Cell  |<br>| Content Cell  | Content Cell  |<br></code></pre></td></tr></table></figure><p>You can also include inline Markdown such as links, bold, italics, or strikethrough in the table.</p><p>Finally, by including colons (<code>:</code>) within the header row, you can define text in that column to be left-aligned, right-aligned, or center-aligned:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| Left-Aligned  | Center Aligned  | Right Aligned |<br>| :------------ |:---------------:| -----:|<br>| col 3 is      | some wordy text | $1600 |<br>| col 2 is      | centered        |   $12 |<br>| zebra stripes | are neat        |    $1 |<br></code></pre></td></tr></table></figure><p>A colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column.</p><h3 id="Footnotes"><a href="#Footnotes" class="headerlink" title="Footnotes"></a>Footnotes</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">You can create footnotes like this[^footnote].<br><br>[<span class="hljs-symbol">^footnote</span>]: <span class="hljs-link">Here is the *text* of the **footnote**.</span><br></code></pre></td></tr></table></figure><p>will produce:</p><p>You can create footnotes like this[^footnote].</p><p>[^footnote]: Here is the <em>text</em> of the <strong>footnote</strong>.</p><p>Hover over the ‘footnote’ superscript to see content of the footnote.</p><h3 id="Horizontal-Rules"><a href="#Horizontal-Rules" class="headerlink" title="Horizontal Rules"></a>Horizontal Rules</h3><p>Inputting <code>***</code> or <code>---</code> on a blank line and pressing <code>return</code> will draw a horizontal line.</p><hr><h3 id="YAML-Front-Matter"><a href="#YAML-Front-Matter" class="headerlink" title="YAML Front Matter"></a>YAML Front Matter</h3><p>Typora now supports <a href="http://jekyllrb.com/docs/frontmatter/">YAML Front Matter</a>. Input <code>---</code> at the top of the article and then press <code>Return</code> to introduce a metadata block. Alternatively, you can insert a metadata block from the top menu of Typora.</p><h3 id="Table-of-Contents-TOC"><a href="#Table-of-Contents-TOC" class="headerlink" title="Table of Contents (TOC)"></a>Table of Contents (TOC)</h3><p>Input <code>[toc]</code> and press the <code>Return</code> key. This will create a  “Table of Contents” section. The TOC extracts all headers from the document, and its contents are updated automatically as you add to the document.</p><h2 id="Span-Elements"><a href="#Span-Elements" class="headerlink" title="Span Elements"></a>Span Elements</h2><p>Span elements will be parsed and rendered right after typing. Moving the cursor in middle of those span elements will expand those elements into markdown source. Below is an explanation of the syntax for each span element.</p><h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><p>Markdown supports two styles of links: inline and reference.</p><p>In both styles, the link text is delimited by [square brackets].</p><p>To create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">This is [<span class="hljs-string">an example</span>](<span class="hljs-link">http://example.com/ &quot;Title&quot;</span>) inline link.<br><br>[<span class="hljs-string">This link</span>](<span class="hljs-link">http://example.net/</span>) has no title attribute.<br></code></pre></td></tr></table></figure><p>will produce:</p><p>This is <a href="http://example.com/" title="Title">an example</a> inline link. (<code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;</code>)</p><p><a href="http://example.net/">This link</a> has no title attribute. (<code>&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no</code>)</p><h4 id="Internal-Links"><a href="#Internal-Links" class="headerlink" title="Internal Links"></a>Internal Links</h4><p><strong>You can set the href to headers</strong>, which will create a bookmark that allow you to jump to that section after clicking. For example:</p><p>Command(on Windows: Ctrl) + Click <a href="#block-elements">This link</a> will jump to header <code>Block Elements</code>. To see how to write that, please move cursor or click that link with <code>⌘</code> key pressed to expand the element into markdown source.</p><h4 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h4><p>Reference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">This is [<span class="hljs-string">an example</span>][<span class="hljs-symbol">id</span>] reference-style link.<br><br>Then, anywhere in the document, you define your link label on a line by itself like this:<br><br>[<span class="hljs-symbol">id</span>]: <span class="hljs-link">http://example.com/  &quot;Optional Title Here&quot;</span><br></code></pre></td></tr></table></figure><p>In Typora, they will be rendered like so:</p><p>This is [an example][id] reference-style link.</p><p>[id]: <a href="http://example.com/">http://example.com/</a>“Optional Title Here”</p><p>The implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — for example, to link the word “Google” to the google.com web site, you could simply write:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">Google</span>][<span class="hljs-symbol"></span>]<br>And then define the link:<br><br>[<span class="hljs-symbol">Google</span>]: <span class="hljs-link">http://google.com/</span><br></code></pre></td></tr></table></figure><p>In Typora, clicking the link will expand it for editing, and command+click will open the hyperlink in your web browser.</p><h3 id="URLs"><a href="#URLs" class="headerlink" title="URLs"></a>URLs</h3><p>Typora allows you to insert URLs as links, wrapped by <code>&lt;</code>brackets<code>&gt;</code>.</p><p><code>&lt;i@typora.io&gt;</code> becomes <a href="mailto:&#x69;&#x40;&#x74;&#121;&#x70;&#x6f;&#114;&#97;&#x2e;&#x69;&#111;">&#x69;&#x40;&#x74;&#121;&#x70;&#x6f;&#114;&#97;&#x2e;&#x69;&#111;</a>.</p><p>Typora will also automatically link standard URLs. e.g: <a href="http://www.google.com/">www.google.com</a>.</p><h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><p>Images have similar syntax as links, but they require an additional <code>!</code> char before the start of the link. The syntax for inserting an image looks like this:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">Alt text</span>](<span class="hljs-link">/path/to/img.jpg</span>)<br><br>![<span class="hljs-string">Alt text</span>](<span class="hljs-link">/path/to/img.jpg &quot;Optional title&quot;</span>)<br></code></pre></td></tr></table></figure><p>You are able to use drag &amp; drop to insert an image from an image file or your web browser. You can modify the markdown source code by clicking on the image. A relative path will be used if the image that is added using drag &amp; drop is in same directory or sub-directory as the document you’re currently editing.</p><p>If you’re using markdown for building websites, you may specify a URL prefix for the image preview on your local computer with property <code>typora-root-url</code> in YAML Front Matters. For example, input <code>typora-root-url:/User/Abner/Website/typora.io/</code> in YAML Front Matters, and then <code>![alt](/blog/img/test.png)</code> will be treated as <code>![alt](file:///User/Abner/Website/typora.io/blog/img/test.png)</code> in Typora.</p><p>You can find more details <a href="https://support.typora.io/Images/">here</a>.</p><h3 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h3><p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of emphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an HTML <code>&lt;em&gt;</code> tag. E.g:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*single asterisks*</span><br><br><span class="hljs-emphasis">_single underscores_</span><br></code></pre></td></tr></table></figure><p>output:</p><p><em>single asterisks</em></p><p><em>single underscores</em></p><p>GFM will ignore underscores in words, which is commonly used in code and names, like this:</p><blockquote><p>wow_great_stuff</p><p>do_this_and_do_that_and_another_thing.</p></blockquote><p>To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">\<span class="hljs-emphasis">*this text is surrounded by literal asterisks\*</span><br></code></pre></td></tr></table></figure><p>Typora recommends using the <code>*</code> symbol.</p><h3 id="Strong"><a href="#Strong" class="headerlink" title="Strong"></a>Strong</h3><p>A double <code>*</code> or <code>_</code> will cause its enclosed contents to be wrapped with an HTML <code>&lt;strong&gt;</code> tag, e.g:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**double asterisks**</span><br><br><span class="hljs-strong">__double underscores__</span><br></code></pre></td></tr></table></figure><p>output:</p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><p>Typora recommends using the <code>**</code> symbol.</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>To indicate an inline span of code, wrap it with backtick quotes (&#96;). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Use the <span class="hljs-code">`printf()`</span> function.<br></code></pre></td></tr></table></figure><p>will produce:</p><p>Use the <code>printf()</code> function.</p><h3 id="Strikethrough"><a href="#Strikethrough" class="headerlink" title="Strikethrough"></a>Strikethrough</h3><p>GFM adds syntax to create strikethrough text, which is missing from standard Markdown.</p><p><code>~~Mistaken text.~~</code> becomes <del>Mistaken text.</del></p><h3 id="Underlines"><a href="#Underlines" class="headerlink" title="Underlines"></a>Underlines</h3><p>Underline is powered by raw HTML.</p><p><code>&lt;u&gt;Underline&lt;/u&gt;</code> becomes <u>Underline</u>.</p><h3 id="Emoji-smile"><a href="#Emoji-smile" class="headerlink" title="Emoji :smile:"></a>Emoji :smile:</h3><p>Input emoji with syntax <code>:smile:</code>.</p><p>User can trigger auto-complete suggestions for emoji by pressing <code>ESC</code> key, or trigger it automatically after enabling it on preference panel. Also, inputting UTF-8 emoji characters directly is also supported by going to <code>Edit</code> -&gt; <code>Emoji &amp; Symbols</code> in the menu bar (macOS).</p><h3 id="Inline-Math"><a href="#Inline-Math" class="headerlink" title="Inline Math"></a>Inline Math</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>$</code> to wrap a TeX command. For example: <code>$\lim_&#123;x \to \infty&#125; \exp(-x) = 0$</code> will be rendered as LaTeX command.</p><p>To trigger inline preview for inline math: input “$”, then press the <code>ESC</code> key, then input a TeX command.</p><p>You can find more details <a href="https://support.typora.io/Math/">here</a>.</p><h3 id="Subscript"><a href="#Subscript" class="headerlink" title="Subscript"></a>Subscript</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>~</code> to wrap subscript content. For example: <code>H~2~O</code>, <code>X~long\ text~</code>&#x2F;</p><h3 id="Superscript"><a href="#Superscript" class="headerlink" title="Superscript"></a>Superscript</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>^</code> to wrap superscript content. For example: <code>X^2^</code>.</p><h3 id="Highlight"><a href="#Highlight" class="headerlink" title="Highlight"></a>Highlight</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>==</code> to wrap highlight content. For example: <code>==highlight==</code>.</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>You can use HTML to style content what pure Markdown does not support. For example, use <code>&lt;span style=&quot;color:red&quot;&gt;this text is red&lt;/span&gt;</code> to add text with red color.</p><h3 id="Embed-Contents"><a href="#Embed-Contents" class="headerlink" title="Embed Contents"></a>Embed Contents</h3><p>Some websites provide iframe-based embed code which you can also paste into Typora. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&#x27;265&#x27;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&#x27;no&#x27;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;Fancy Animated SVG Menu&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2&#x27;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&#x27;no&#x27;</span> <span class="hljs-attr">allowtransparency</span>=<span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;width: 100%;&#x27;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><p>You can use the <code>&lt;video&gt;</code> HTML tag to embed videos. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;xxx.mp4&quot;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="Other-HTML-Support"><a href="#Other-HTML-Support" class="headerlink" title="Other HTML Support"></a>Other HTML Support</h3><p>You can find more details <a href="https://support.typora.io/HTML/">here</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Markdown-For-Typora&quot;&gt;&lt;a href=&quot;#Markdown-For-Typora&quot; class=&quot;headerlink&quot; title=&quot;Markdown For Typora&quot;&gt;&lt;/a&gt;Markdown For Typora&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    
    <category term="markdown" scheme="https://izard.space/tags/markdown/"/>
    
    <category term="typora" scheme="https://izard.space/tags/typora/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://izard.space/2020/04/18/Hello%20World/"/>
    <id>https://izard.space/2020/04/18/Hello%20World/</id>
    <published>2020-04-18T07:12:27.000Z</published>
    <updated>2020-04-18T14:21:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前用wordpress作为个人博客大概用了三年多，这一段时间里因为各种原因也陆陆续续出了一些问题，大规模的迁移有两三次。上学期不知道为什么服务器的数据库突然空了，导致一学期的文章白写了。考虑到维护服务器确实比较耗费精力，于是决定改用github+hexo的方式搭建静态博客…目前看起来还是比较舒服的。</p><p>持续建设中…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前用wordpress作为个人博客大概用了三年多，这一段时间里因为各种原因也陆陆续续出了一些问题，大规模的迁移有两三次。上学期不知道为什么服务器的数据库突然空了，导致一学期的文章白写了。考虑到维护服务器确实比较耗费精力，于是决定改用github+hexo的方式搭建静态博客</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>树形dp好题</title>
    <link href="https://izard.space/2020/02/17/%E6%A0%91%E5%BD%A2dp%E5%A5%BD%E9%A2%98/"/>
    <id>https://izard.space/2020/02/17/%E6%A0%91%E5%BD%A2dp%E5%A5%BD%E9%A2%98/</id>
    <published>2020-02-17T15:55:00.000Z</published>
    <updated>2020-04-20T15:23:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>题目来源NAIPC 2016 或 [Jsoi2016]最佳团体，你会发现这俩题完全一致…</p><p>（听说是那段时间jsoi就是汉化国外的题目）</p><p>题目链接：<a href="http://opentrains.snarknews.info/~ejudge/team.cgi?contest_id=006280">http://opentrains.snarknews.info/~ejudge/team.cgi?contest_id=006280</a></p><p>或<a href="https://nanti.jisuanke.com/t/A2026">https://nanti.jisuanke.com/t/A2026</a></p><p>或<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4753">https://www.lydsy.com/JudgeOnline/problem.php?id=4753</a></p><p>题意是说有$n+1$个人，$0$号是CEO，$1$到$n$号是参选员工，每个员工$i$给一个薪水$s$和生产力$p$，还有一个推荐他的人的编号$r(0\le r &lt; i)$，现在要选出$k$个员工，如果选了某个员工那么他的推荐人也必须选（除非他的推荐人是CEO），使得选出$k$个员工的生产力之和除以薪水之和最大。</p><p>做法：$n+1$个人实际构成了一个树，CEO是根。首先01分数规划模型很显然，那么二分答案$mid$，新的点权为$p_i-s_i\times mid$，现在要求树上$k+1$个点的连通块（包括根）的最大点权和。</p><p>经典背包型dp，$dp[i][j]$表示以$i$为根的联通块大小为$j$的最大点权和，最后求出$dp[0][k+1]$小于$0$说明二分出来的值比答案大了，反之说明小了。</p><p>直观上看二维的状态，转移还需要枚举新加的一个子树选多少的点，这样似乎上是$O(N^3)$，会超时？</p><p>实际上，我们每次只for到子树大小，可以证明这样时间复杂度是$O(N^2)$。直接看图理解吧：</p><center><img src="/img/treedp.png" width="80%"></center><p>意思就是说这样的写法等价于枚举所有的点对$(x,y)$的时间。所以最终这道题的时间复杂度为$O(N^2\log{C})$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 2550</span><br><span class="hljs-type">const</span> <span class="hljs-type">double</span> INF=<span class="hljs-number">1e99</span>;<br><span class="hljs-type">int</span> k,n;<br><span class="hljs-type">int</span> num[N],a[N],b[N];<br><span class="hljs-type">double</span> dp[N][N],c[N],now[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; e[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> f)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> tmp[N];<br>    tmp[<span class="hljs-number">0</span>]=c[u];<br>    num[u]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;v:e[u])<br>    &#123;<br>        <span class="hljs-keyword">if</span>(v==f)<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs</span>(v,u);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=num[u]+num[v];i++)<br>            now[i]=-INF;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=num[u];i++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=num[v];j++)<br>                now[i+j]=<span class="hljs-built_in">max</span>(now[i+j],tmp[i]+dp[v][j]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=num[u]+num[v];i++)<br>            tmp[i]=now[i];<br>        num[u]+=num[v];<br>    &#125;<br>    num[u]++;<br>    dp[u][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=num[u];i++)<br>        dp[u][i]=tmp[i<span class="hljs-number">-1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">double</span> mid)</span></span><br><span class="hljs-function"></span>&#123;<br>    c[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i) c[i]=a[i]-mid*b[i];<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][k+<span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;k,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>    &#123;<br>        <span class="hljs-type">int</span> fa;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,b+i,a+i,&amp;fa);<br>        e[fa].<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-type">double</span> l=<span class="hljs-number">0</span>,r=<span class="hljs-number">10000</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">50</span>;++i)<br>    &#123;<br>        <span class="hljs-type">double</span> mid=(l+r)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">calc</span>(mid)&gt;=<span class="hljs-number">0</span>) l=mid;<br>        <span class="hljs-keyword">else</span> r=mid;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3f\n&quot;</span>,l);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目来源NAIPC 2016 或 [Jsoi2016]最佳团体，你会发现这俩题完全一致…&lt;/p&gt;
&lt;p&gt;（听说是那段时间jsoi就是汉化国外的题目）&lt;/p&gt;
&lt;p&gt;题目链接：&lt;a href=&quot;http://opentrains.snarknews.info/~ejudge/</summary>
      
    
    
    
    <category term="散装题解" scheme="https://izard.space/categories/%E6%95%A3%E8%A3%85%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="dp" scheme="https://izard.space/tags/dp/"/>
    
    <category term="01分数规划" scheme="https://izard.space/tags/01%E5%88%86%E6%95%B0%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Burnside引理与Polya计数公式</title>
    <link href="https://izard.space/2019/09/16/Burnside%E5%BC%95%E7%90%86%E4%B8%8EPolya%E8%AE%A1%E6%95%B0%E5%85%AC%E5%BC%8F/"/>
    <id>https://izard.space/2019/09/16/Burnside%E5%BC%95%E7%90%86%E4%B8%8EPolya%E8%AE%A1%E6%95%B0%E5%85%AC%E5%BC%8F/</id>
    <published>2019-09-16T10:36:00.000Z</published>
    <updated>2020-04-20T04:01:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Burnside引理"><a href="#Burnside引理" class="headerlink" title="Burnside引理"></a>Burnside引理</h3><p>设$A$和$B$为有限集合，$X$表示所有从$A$到$B$的映射集合（着色方案集合）。$X&#x2F;G$表示$X$所有元素的轨道的集合（去掉重复），即$G$作用在$X$上产生的所有等价类的集合，$X^{g}$表示$X$中在$g$作用下的不动元素，则有</p><p>$$<br>|X&#x2F;G|&#x3D;{\frac {1}{|G|}}\sum _{g\in G}|X^{g}|<br>$$</p><p>$X$中非等价的着色数等于在$G$中的置换作用下保持不变的着色的平均数！</p><h3 id="Polya计数公式"><a href="#Polya计数公式" class="headerlink" title="Polya计数公式"></a>Polya计数公式</h3><p>考虑置换$g$可以分解成若干不相交的循环置换的乘积，那么每个循环内的颜色必须相同，才能在$g$的作用下染色不变，设颜色一共$m$种，置换$g$的循环分解中的循环个数为$c(g)$，那么在$g$作用下着色不变的着色数为：</p><p>$$<br>|X^{g}|&#x3D;m^{c(g)}<br>$$</p><p>替换一下，就得到了：</p><p>$$<br>|X&#x2F;G|&#x3D;{\frac {1}{|G|}}\sum _{g\in G}m^{c(g)}<br>$$</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Burnside引理&quot;&gt;&lt;a href=&quot;#Burnside引理&quot; class=&quot;headerlink&quot; title=&quot;Burnside引理&quot;&gt;&lt;/a&gt;Burnside引理&lt;/h3&gt;&lt;p&gt;设$A$和$B$为有限集合，$X$表示所有从$A$到$B$的映射集合（着色方</summary>
      
    
    
    
    <category term="算法学习" scheme="https://izard.space/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="polya计数" scheme="https://izard.space/tags/polya%E8%AE%A1%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>数论初级魔法大赏</title>
    <link href="https://izard.space/2019/06/05/%E6%95%B0%E8%AE%BA%E5%88%9D%E7%BA%A7%E9%AD%94%E6%B3%95%E5%A4%A7%E8%B5%8F/"/>
    <id>https://izard.space/2019/06/05/%E6%95%B0%E8%AE%BA%E5%88%9D%E7%BA%A7%E9%AD%94%E6%B3%95%E5%A4%A7%E8%B5%8F/</id>
    <published>2019-06-05T12:44:00.000Z</published>
    <updated>2020-08-24T07:58:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在准备关于莫比乌斯反演的课件，准备把例题简要整理下来，那就开始吧</p><h3 id="1-bzoj-2190-SDOI2008-仪仗队"><a href="#1-bzoj-2190-SDOI2008-仪仗队" class="headerlink" title="[1.bzoj 2190 SDOI2008]仪仗队"></a>[1.bzoj 2190 <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2190">SDOI2008]仪仗队</a></h3><p>求$2+\sum_{x&#x3D;1}^{n-1}\sum_{y&#x3D;1}^{n-1}[gcd(x,y)&#x3D;&#x3D;1](n\le 40000)$</p><p>最简单的做法，线性筛预处理出欧拉函数的前缀和，时间复杂度$O(n)$。</p><h3 id="2-bzoj-2818-Gcd"><a href="#2-bzoj-2818-Gcd" class="headerlink" title="2.bzoj 2818 Gcd"></a><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2818">2.bzoj 2818 Gcd</a></h3><p>求$\sum_{p}\sum_{x&#x3D;1}^{n}\sum_{y&#x3D;1}^{n}[gcd(x,y)&#x3D;&#x3D;p] (n\le 10^7)$</p><p>其实就是$\sum_{p}\sum_{x&#x3D;1}^{\lfloor \frac{n}{p}\rfloor}\sum_{y&#x3D;1}^{\lfloor \frac{n}{p}\rfloor}[gcd(x,y)&#x3D;&#x3D;1]$，枚举所有质数后就是和上一道题一样做法了，双倍经验。</p><h3 id="3-bzoj-2705-SDOI2012-Longge的问题"><a href="#3-bzoj-2705-SDOI2012-Longge的问题" class="headerlink" title="[3.bzoj 2705 SDOI2012]Longge的问题"></a>[3.bzoj 2705 <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2705">SDOI2012]Longge的问题</a></h3><p>求$\sum_{i&#x3D;1}^{n}gcd(i,n), n\le 2^{32}$</p><p>变形一下，枚举每种gcd的值，即</p><p>$$<br>\begin{aligned}<br>&amp;\sum_{i&#x3D;1}^{n}gcd(i,n) \<br>&#x3D;&amp; \sum_{d\mid n}d \sum_{x&#x3D;1}^{\frac{n}{d}}[gcd(x,\frac{n}{d})&#x3D;&#x3D;1] \<br>&#x3D;&amp; \sum_{d\mid n}d\varphi(\frac{n}{d})<br>\end{aligned}<br>$$</p><p>那么根号枚举约数，单点求欧拉函数就做完了。</p><p>时间复杂度？是个经典的东西$O(\sum_{i&#x3D;1}^{\sqrt{n}}\sqrt{i}+\sqrt{\frac{n}{i}})&#x3D;O(n^{\frac{3}{4}})$</p><h3 id="4-bzoj-2440-中山市选2011-完全平方数"><a href="#4-bzoj-2440-中山市选2011-完全平方数" class="headerlink" title="[4.bzoj 2440 中山市选2011]完全平方数"></a>[4.bzoj 2440 <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2440">中山市选2011]完全平方数</a></h3><p>求第$k(k\le 10^9)$个不含完全平方数因子的正整数</p><p>二分答案，转为求前$n$个数中有多少数不含完全平方因子。容斥一下，总数减去是4(2的平方)的倍数的，减去9的倍数，16的倍数不用管，前面减过了，再减去25的倍数，加上36的倍数，因为前面多减了一次…那这样就发现了容斥系数就是莫比乌斯函数。时间复杂度$O(\sqrt{n}\log{n})$</p><h3 id="5-luogu-P2257-YY的GCD-bzoj-2820"><a href="#5-luogu-P2257-YY的GCD-bzoj-2820" class="headerlink" title="5.luogu P2257 YY的GCD(bzoj 2820)"></a><a href="https://www.luogu.org/problemnew/show/P2257">5.luogu P2257 YY的GCD(bzoj 2820)</a></h3><p>求$\sum_{p}\sum_{x&#x3D;1}^{n}\sum_{y&#x3D;1}^{m}[gcd(x,y)&#x3D;&#x3D;p] (n\le 10^7)$，$T(\le 10000)$组询问</p><p>bzoj 2818的加强版，把其中一个n换成了m，这样就不能用欧拉函数了，推导一下：</p><p>下述的$p$表示质数</p><p>$$<br>\begin{aligned}<br>&amp; \sum_{p}\sum_{x&#x3D;1}^{n}\sum_{y&#x3D;1}^{m}[gcd(x,y)&#x3D;&#x3D;p] \<br>&#x3D;&amp; \sum_{p}\sum_{x&#x3D;1}^{\lfloor \frac{n}{p}\rfloor}\sum_{y&#x3D;1}^{\lfloor \frac{m}{p}\rfloor}[gcd(x,y)&#x3D;&#x3D;1] \<br>&#x3D;&amp; \sum_{p}\sum_{x&#x3D;1}^{\lfloor \frac{n}{p}\rfloor}\sum_{y&#x3D;1}^{\lfloor \frac{m}{p}\rfloor}\sum_{d\mid gcd(x,y)}\mu(d) \<br>&#x3D;&amp; \sum_{p}\sum_{x&#x3D;1}^{\lfloor \frac{n}{p}\rfloor}\sum_{y&#x3D;1}^{\lfloor \frac{m}{p}\rfloor}\sum_{d\mid x \land d\mid y}\mu(d) \<br>&#x3D;&amp; \sum_{p}\sum_{d&#x3D;1}^{\lfloor \frac{min(n,m)}{p}\rfloor}\mu(d)\lfloor \frac{n}{pd}\rfloor\lfloor \frac{m}{pd}\rfloor \<br>&#x3D;&amp; \sum_{k&#x3D;1}^{min(n,m)}\sum_{p,p\mid k}\mu(\frac{k}{p})\lfloor \frac{n}{k}\rfloor\lfloor \frac{m}{k}\rfloor \<br>&#x3D;&amp; \sum_{k&#x3D;1}^{min(n,m)}f(k)\lfloor \frac{n}{k}\rfloor\lfloor \frac{m}{k}\rfloor<br>\end{aligned}<br>$$</p><p>其中第三行莫比乌斯反演，第五行交换求和，第六行令$k&#x3D;pd$,转而枚举$k$，化简到最后用筛法预处理出所有$f$的值即可，这里应该可以用线性筛，不过懒得推导的话也可以枚举所有质数再枚举它的倍数这样求，那么时间复杂度就和埃氏筛一样了，之后每次求一组询问就是经典的数论分块了。时间复杂度$O(n\log{\log{n}}+T\sqrt{n})$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">10000000</span>;<br><span class="hljs-type">bool</span> vis[N+<span class="hljs-number">5</span>];<br><span class="hljs-type">int</span> prime[N+<span class="hljs-number">5</span>],cnt;<br><span class="hljs-type">int</span> mu[N+<span class="hljs-number">5</span>],f[N+<span class="hljs-number">5</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getprime</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    mu[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=N;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!vis[i])<br>        &#123;<br>            prime[cnt++]=i;<br>            mu[i]=<span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;cnt &amp;&amp; prime[j]&lt;=N/i;j++)<br>        &#123;<br>            vis[i*prime[j]]=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(i%prime[j]) mu[i*prime[j]]=-mu[i];<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                mu[i*prime[j]]=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;cnt;++i)<br>    &#123;<br>        <span class="hljs-type">int</span> x=prime[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=x;j&lt;=N;j+=x)<br>            f[j]+=mu[j/x];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=N;++i)<br>        f[i]+=f[i<span class="hljs-number">-1</span>];<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(n&gt;m) <span class="hljs-built_in">swap</span>(n,m);<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>,j;i&lt;=n;i=j+<span class="hljs-number">1</span>)<br>    &#123;<br>        j=<span class="hljs-built_in">min</span>(n/(n/i),m/(m/i));<br>        ans+=<span class="hljs-number">1LL</span>*(f[j]-f[i<span class="hljs-number">-1</span>])*(n/i)*(m/i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">getprime</span>();<br>    <span class="hljs-type">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;T);<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-type">int</span> n,m;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">calc</span>(n,m));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-spoj-LCMSUM"><a href="#6-spoj-LCMSUM" class="headerlink" title="6.spoj LCMSUM"></a><a href="https://www.spoj.com/problems/LCMSUM/">6.spoj LCMSUM</a></h3><p>求$\sum_{i&#x3D;1}^{n}lcm(i,n), n\le 10^{6}$，$T(\le 300000)$组询问。</p><p>$$<br>\begin{aligned}<br>&amp; \sum_{i&#x3D;1}^{n}lcm(i,n) \<br>&#x3D;&amp;\sum_{i&#x3D;1}^{n}\frac{i\times n}{gcd(i,n)}\<br>&#x3D;&amp;\frac{1}{2}\sum_{i&#x3D;1}^{n-1}\frac{n^{2}}{gcd(i,n)}+n\<br>&#x3D;&amp;\frac{1}{2}\sum_{d\mid n,d\ne n}\frac{n^2}{d}\sum_{k&#x3D;1}^{\lfloor \frac{n}{d}\rfloor}[gcd(k,\frac{n}{d})&#x3D;&#x3D;1]+n \<br>&#x3D;&amp;\frac{1}{2}n\sum_{d\mid n,d\ne n}\frac{n}{d}\varphi(\frac{n}{d})+n \<br>&#x3D;&amp;\frac{1}{2}n\sum_{d\mid n,d\ne 1}d\varphi(d)+n \<br>&#x3D;&amp;\frac{1}{2}nf(n)+n<br>\end{aligned}<br>$$</p><p>这样线性筛预处理完，$O(n\log{n})$的求出函数值$f$，每次回答$O(1)$即可。</p><h3 id="7-bzoj-2154-Crash的数字表格"><a href="#7-bzoj-2154-Crash的数字表格" class="headerlink" title="7.bzoj 2154 Crash的数字表格"></a><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2154">7.bzoj 2154 Crash的数字表格</a></h3><p>求$\sum_{i&#x3D;1}^{n}\sum_{j&#x3D;1}^{m}lcm(i,j),n,m\le 10^7$</p><p>$$<br>\begin{aligned}<br>&amp;\sum_{i&#x3D;1}^{n}\sum_{j&#x3D;1}^{m}lcm(i,j) \<br>&#x3D;&amp;\sum_{i&#x3D;1}^{n}\sum_{j&#x3D;1}^{m}\frac{ij}{gcd(i,j)}\<br>&#x3D;&amp;\sum_{d&#x3D;1}^{min(n,m)}\sum_{x&#x3D;1}^{\lfloor \frac{n}{d}\rfloor}\sum_{y&#x3D;1}^{\lfloor \frac{m}{d}\rfloor}dxy[gcd(x,y)&#x3D;&#x3D;1] \<br>&#x3D;&amp;\sum_{d&#x3D;1}^{min(n,m)}d\sum_{x&#x3D;1}^{\lfloor \frac{n}{d}\rfloor}\sum_{y&#x3D;1}^{\lfloor \frac{m}{d}\rfloor}xy\sum_{k\mid x \land k\mid y}\mu(k) \<br>&#x3D;&amp;\sum_{d&#x3D;1}^{min(n,m)}d\sum_{k&#x3D;1}^{\lfloor \frac{m}{d}\rfloor}\mu(k)\sum_{x&#x3D;1}^{\lfloor \frac{n}{dk}\rfloor}\sum_{y&#x3D;1}^{\lfloor \frac{m}{dk}\rfloor}k^{2}xy \<br>&#x3D;&amp;\sum_{T&#x3D;1}^{min(n,m)}\sum_{k\mid T}kT\mu(k)g(\lfloor \frac{n}{T}\rfloor,\lfloor \frac{m}{T}\rfloor)\<br>&#x3D;&amp;\sum_{T&#x3D;1}^{min(n,m)}Tg(\lfloor \frac{n}{T}\rfloor,\lfloor \frac{m}{T}\rfloor)\sum_{k\mid T}k\mu(k)\<br>&#x3D;&amp;\sum_{T&#x3D;1}^{min(n,m)}Tg(\lfloor \frac{n}{T}\rfloor,\lfloor \frac{m}{T}\rfloor)f(T)<br>\end{aligned}<br>$$</p><p>其中$g(n,m)&#x3D;\sum_{i&#x3D;1}^{n}\sum_{j&#x3D;1}^{m}ij&#x3D;\frac{n(n+1)}{2}\frac{m(m+1)}{2}$</p><p>一开始头铁，$O(n\log{n})$求的$f(T)$的值，超时无疑，然后学习了用线性筛求积性函数$f(T)&#x3D;\sum_{k\mid T}k\mu(k)$的思路。</p><p>线性筛过程分两种情况讨论</p><p>1.$prime_j$整除$i$，那么枚举$i\times prime_j$的约数$k$时，如果关于$prime_j$的指数大于等于2的话莫比乌斯函数为零，对答案没有贡献，所以此时:<br>$$<br>f(i\times prime_j)&#x3D;f(i)<br>$$</p><p>2.$prime_j$不整除$i$，那么再分枚举的约数$k$是否含有$prime_j$，不含有的部分就是$f(i)$，含$prime_j$的话，整体乘上这么多，并且莫比乌斯函数要变号，是$-f(i)prime_j$。综上，此时:<br>$$<br>f(i\times prime_j)&#x3D;(1-prime_j)f(i)<br>$$</p><p>这样这道题就做完了，时间复杂度$O(n)$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod=<span class="hljs-number">20101009</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">10000000</span>;<br><span class="hljs-type">bool</span> vis[N+<span class="hljs-number">5</span>];<br><span class="hljs-type">int</span> prime[<span class="hljs-number">666666</span>],cnt;<br><span class="hljs-type">int</span> f[N+<span class="hljs-number">5</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getprime</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    f[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=N;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!vis[i])<br>        &#123;<br>            prime[cnt++]=i;<br>            f[i]=(<span class="hljs-number">1</span>-i+mod);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;cnt &amp;&amp; i*prime[j]&lt;=N;j++)<br>        &#123;<br>            vis[i*prime[j]]=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(i%prime[j])<br>            &#123;<br>                f[i*prime[j]]=<span class="hljs-number">1LL</span>*(<span class="hljs-number">1</span>-prime[j]+mod)*f[i]%mod;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                f[i*prime[j]]=f[i];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//    for(int i=1;i&lt;=N;++i)</span><br><span class="hljs-comment">//    &#123;</span><br><span class="hljs-comment">//        for(int j=i;j&lt;=N;j+=i)</span><br><span class="hljs-comment">//        &#123;</span><br><span class="hljs-comment">//            f[j]+=i*mu[i];</span><br><span class="hljs-comment">//            if(f[j]&lt;0) f[j]+=mod;</span><br><span class="hljs-comment">//            else if(f[j]&gt;=mod) f[j]-=mod;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Sum</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1LL</span>*(n+<span class="hljs-number">1</span>)*n/<span class="hljs-number">2</span>%mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">getprime</span>();<br>    <span class="hljs-type">int</span> n,m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">if</span>(n&lt;m) <span class="hljs-built_in">swap</span>(n,m);<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;++i)&#123;<br>        ans+=<span class="hljs-number">1LL</span>*i*<span class="hljs-built_in">Sum</span>(n/i)%mod*<span class="hljs-built_in">Sum</span>(m/i)%mod*f[i]%mod;<br>        <span class="hljs-keyword">if</span>(ans&gt;=mod) ans-=mod;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-bzoj-3994-SDOI2015-约数个数和"><a href="#8-bzoj-3994-SDOI2015-约数个数和" class="headerlink" title="[8.bzoj 3994 SDOI2015]约数个数和"></a>[8.bzoj 3994 <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3994">SDOI2015]约数个数和</a></h3><p>求$\sum_{i&#x3D;1}^{n}\sum_{j&#x3D;1}^{m}d(ij), n,m\le 50000$，$T(\le 50000)$组询问，其中$d$是约数个数函数。</p><p>这个题一开始卡在一个结论上了，首先要知道$d(ij)&#x3D;\sum_{x\mid i}\sum_{y\mid j}[gcd(x,y)&#x3D;&#x3D;1]$，这个结论不好想，但可以用分解质因数的形式结合约数个数定理推出来，那解决了第一步，后面的就简单了。</p><p>$$<br>\begin{aligned}<br>&amp;\sum_{i&#x3D;1}^{n}\sum_{j&#x3D;1}^{m}d(ij)\<br>&#x3D;&amp;\sum_{i&#x3D;1}^{n}\sum_{j&#x3D;1}^{m}\sum_{x\mid i}\sum_{y\mid j}[gcd(x,y)&#x3D;&#x3D;1]\<br>&#x3D;&amp;\sum_{i&#x3D;1}^{n}\sum_{j&#x3D;1}^{m}\sum_{x\mid i}\sum_{y\mid j}\sum_{k\mid gcd(x,y)}\mu(k)\<br>&#x3D;&amp;\sum_{i&#x3D;1}^{n}\sum_{j&#x3D;1}^{m}\sum_{x\mid i}\sum_{y\mid j}\sum_{k\mid x \land k\mid y}\mu(k)\<br>&#x3D;&amp;\sum_{k&#x3D;1}^{min(n,m)}\mu(k)\sum_{x&#x3D;1}^{\lfloor\frac{n}{k}\rfloor}\sum_{y&#x3D;1}^{\lfloor\frac{m}{k}\rfloor}\lfloor\frac{n}{xk}\rfloor\lfloor\frac{m}{yk}\rfloor\<br>&#x3D;&amp;\sum_{k&#x3D;1}^{min(n,m)}\mu(k)\sum_{x&#x3D;1}^{\lfloor\frac{n}{k}\rfloor}\lfloor\frac{n}{xk}\rfloor f(\lfloor\frac{m}{k}\rfloor)\<br>&#x3D;&amp;\sum_{k&#x3D;1}^{min(n,m)}\mu(k)f(\lfloor\frac{n}{k}\rfloor) f(\lfloor\frac{m}{k}\rfloor) \<br>\end{aligned}<br>$$</p><p>至此又可以数论分块搞定单组询问了，时间复杂度$O(T\sqrt{n})$。</p><h3 id="9-bzoj-4659-lcm"><a href="#9-bzoj-4659-lcm" class="headerlink" title="9.bzoj 4659 lcm"></a><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4659">9.bzoj 4659 lcm</a></h3><p>化简下题意就是求$\sum_{i&#x3D;1}^{n}\sum_{j&#x3D;1}^{m}lcm(i,j)[\mu^2(gcd(i,j))&#x3D;&#x3D;1],n,m\le 4000000$，对$2^{30}$取模，$T(\le 2000)$组询问。发现就是在<a href="#t7">第七题</a>的基础上加了个多组询问，且只统计$\mu^2(gcd(i,j))&#x3D;&#x3D;1$的。</p><p>那么前面的推导都是一样的，最后化简到</p><p>原式$&#x3D;\sum_{T&#x3D;1}^{min(n,m)}g(\lfloor \frac{n}{T}\rfloor,\lfloor \frac{m}{T}\rfloor)T\sum_{k\mid T}k\mu(k)\mu^2(\frac{T}{k})$</p><p>头铁依然会TLE，还是先观察一下</p><p>$f(T)&#x3D;\sum_{k\mid T}k\mu(k)\mu^2(\frac{T}{k})$是积性函数</p><p>且当$T$分解质因数后的指数中有大于2的情况的话，显然此时$f(T)&#x3D;0$，并且易知$f(p)&#x3D;1-p,f(p^2)&#x3D;-p$，这样又可以线性筛搞一搞了，然后预处理出$if(i)$的前缀和。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod=<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">30</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">4000000</span>;<br><span class="hljs-type">bool</span> vis[N+<span class="hljs-number">5</span>];<br><span class="hljs-type">int</span> prime[N+<span class="hljs-number">5</span>],cnt;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> f[N+<span class="hljs-number">5</span>],sum[N+<span class="hljs-number">5</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getprime</span><span class="hljs-params">()</span> </span>&#123;<br>    f[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=N;i++) &#123;<br>        <span class="hljs-keyword">if</span>(!vis[i]) &#123;<br>            prime[cnt++]=i;<br>            f[i]=<span class="hljs-number">1U</span>-i;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;cnt &amp;&amp; i*prime[j]&lt;=N;j++) &#123;<br>            vis[i*prime[j]]=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(i%prime[j]) &#123;<br>                f[i*prime[j]]=f[i]*f[prime[j]];<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span>(i==prime[j]) f[i*prime[j]]=-prime[j];<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i/prime[j]%prime[j]==<span class="hljs-number">0</span>) f[i*prime[j]]=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">else</span> f[i*prime[j]]=f[i/prime[j]]*f[prime[j]*prime[j]];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//    for(int i=1;i&lt;=N;++i) &#123;</span><br><span class="hljs-comment">//        for(int j=i;j&lt;=N;j+=i) &#123;</span><br><span class="hljs-comment">//            f[j]+=i*mu[i]*abs(mu[j/i]);</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=N;++i)<br>        sum[i]=sum[i<span class="hljs-number">-1</span>]+<span class="hljs-number">1U</span>*i*f[i];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title">Sum</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1LL</span>*(n+<span class="hljs-number">1</span>)*n/<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">getprime</span>();<br>    <span class="hljs-type">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;T);<br>    <span class="hljs-keyword">while</span>(T--)&#123;<br>        <span class="hljs-type">int</span> n,m;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>        <span class="hljs-keyword">if</span>(n&lt;m) <span class="hljs-built_in">swap</span>(n,m);<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>,j;i&lt;=m;i=j+<span class="hljs-number">1</span>)&#123;<br>            j=<span class="hljs-built_in">min</span>(n/(n/i),m/(m/i));<br>            ans+=<span class="hljs-number">1U</span>*(sum[j]-sum[i<span class="hljs-number">-1</span>])*<span class="hljs-built_in">Sum</span>(n/i)*<span class="hljs-built_in">Sum</span>(m/i);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,(<span class="hljs-type">int</span>)(ans%mod));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-bzoj-4816-Sdoi2017-数字表格"><a href="#10-bzoj-4816-Sdoi2017-数字表格" class="headerlink" title="[10.bzoj 4816 Sdoi2017]数字表格"></a>[10.bzoj 4816 <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4816">Sdoi2017]数字表格</a></h3><p>求$\prod_{i&#x3D;1}^{n}\prod_{j&#x3D;1}^{m}f(gcd(i,j)),n,m\le 10^6$，其中$f$为斐波那契数列，结果模$10^9+7$，$T(\le 1000)$组询问。</p><p>$$<br>\begin{aligned}<br>&amp;\prod_{i&#x3D;1}^{n}\prod_{j&#x3D;1}^{m}f(gcd(i,j)) \<br>&#x3D;&amp;\prod_{d&#x3D;1}^{min(n,m)}f(d)^{\sum_{i&#x3D;1}^{\lfloor\frac{n}{d}\rfloor}\sum_{i&#x3D;1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)&#x3D;&#x3D;1]} \<br>&#x3D;&amp;\prod_{d&#x3D;1}^{min(n,m)}f(d)^{\sum_{k&#x3D;1}^{min(\lfloor\frac{n}{d}\rfloor,\lfloor\frac{m}{d}\rfloor)}\mu(k)\lfloor\frac{n}{dk}\rfloor\lfloor\frac{m}{dk}\rfloor}\<br>\end{aligned}<br>$$</p><p>这样指数部分是关于$\lfloor\frac{n}{d}\rfloor,\lfloor\frac{m}{d}\rfloor$的函数，可以分块，又因为外层是枚举的$d$，所以分块套分块即可！时间复杂度$O(T(n^{\frac{3}{4}}+\sqrt{n}\log{n}))$，前一部分来源分析同<a href="#t3">第三题</a>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 1000000</span><br><span class="hljs-type">bool</span> vis[N+<span class="hljs-number">5</span>];<br><span class="hljs-type">int</span> prime[N+<span class="hljs-number">5</span>],cnt;<br><span class="hljs-type">int</span> mu[N+<span class="hljs-number">5</span>],sum[N+<span class="hljs-number">5</span>];<br><span class="hljs-type">int</span> f[N+<span class="hljs-number">5</span>],pre[N+<span class="hljs-number">5</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getprime</span><span class="hljs-params">()</span> </span>&#123;<br>    mu[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=N;i++) &#123;<br>        <span class="hljs-keyword">if</span>(!vis[i]) &#123;<br>            prime[cnt++]=i;<br>            mu[i]=<span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;cnt &amp;&amp; prime[j]&lt;=N/i;j++) &#123;<br>            vis[i*prime[j]]=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(i%prime[j])<br>                mu[i*prime[j]]=-mu[i];<br>            <span class="hljs-keyword">else</span> &#123;<br>                mu[i*prime[j]]=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=N;++i)<br>        sum[i]=sum[i<span class="hljs-number">-1</span>]+mu[i];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">power</span><span class="hljs-params">(<span class="hljs-type">int</span> x,ll n)</span></span>&#123;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(n)&#123;<br>        <span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>) ans=<span class="hljs-number">1LL</span>*ans*x%mod;<br>        x=<span class="hljs-number">1LL</span>*x*x%mod;<br>        n&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> m,<span class="hljs-type">int</span> d)</span></span>&#123;<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>,j;i&lt;=n;i=j+<span class="hljs-number">1</span>)&#123;<br>        j=<span class="hljs-built_in">min</span>(n/(n/i),m/(m/i));<br>        ans+=<span class="hljs-number">1LL</span>*(sum[j]-sum[i<span class="hljs-number">-1</span>])*(n/i)*(m/i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">getprime</span>();<br><br>    pre[<span class="hljs-number">0</span>]=pre[<span class="hljs-number">1</span>]=f[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=N;++i)&#123;<br>        f[i]=f[i<span class="hljs-number">-1</span>]+f[i<span class="hljs-number">-2</span>];<br>        <span class="hljs-keyword">if</span>(f[i]&gt;=mod) f[i]-=mod;<br>        pre[i]=<span class="hljs-number">1LL</span>*pre[i<span class="hljs-number">-1</span>]*f[i]%mod;<br>    &#125;<br>    <span class="hljs-type">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;T);<br>    <span class="hljs-keyword">while</span>(T--)&#123;<br>        <span class="hljs-type">int</span> n,m;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>        <span class="hljs-keyword">if</span>(n&gt;m) <span class="hljs-built_in">swap</span>(n,m);<br>        <span class="hljs-type">int</span> ans=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>,j;i&lt;=n;i=j+<span class="hljs-number">1</span>)&#123;<br>            j=<span class="hljs-built_in">min</span>(n/(n/i),m/(m/i));<br>            <span class="hljs-type">int</span> x=<span class="hljs-number">1LL</span>*pre[j]*<span class="hljs-built_in">power</span>(pre[i<span class="hljs-number">-1</span>],mod<span class="hljs-number">-2</span>)%mod;<br>            ll y=<span class="hljs-built_in">calc</span>(n/i,m/i,i);<br>            ans=<span class="hljs-number">1LL</span>*ans*<span class="hljs-built_in">power</span>(x,y)%mod;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在准备关于莫比乌斯反演的课件，准备把例题简要整理下来，那就开始吧&lt;/p&gt;
&lt;h3 id=&quot;1-bzoj-2190-SDOI2008-仪仗队&quot;&gt;&lt;a href=&quot;#1-bzoj-2190-SDOI2008-仪仗队&quot; class=&quot;headerlink&quot; title=&quot;[1</summary>
      
    
    
    
    <category term="算法学习" scheme="https://izard.space/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="时间复杂度" scheme="https://izard.space/tags/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    
    <category term="数论" scheme="https://izard.space/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="莫比乌斯反演" scheme="https://izard.space/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>枚举算法再放送</title>
    <link href="https://izard.space/2019/04/29/%E6%9E%9A%E4%B8%BE%E7%AE%97%E6%B3%95%E5%86%8D%E6%94%BE%E9%80%81/"/>
    <id>https://izard.space/2019/04/29/%E6%9E%9A%E4%B8%BE%E7%AE%97%E6%B3%95%E5%86%8D%E6%94%BE%E9%80%81/</id>
    <published>2019-04-29T04:58:00.000Z</published>
    <updated>2020-04-20T01:55:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="再-放-送"><a href="#再-放-送" class="headerlink" title="再 放 送"></a>再 放 送</h3><p>4月24日的时候我讲了这学期程序设计与算法实践的第一课，内容包括算法时间复杂度的概念，枚举与递归等。其中关于枚举这方面还是比较有意思的，从易到难总结了三道题目枚举题，其他的内容就是老生常谈了。实际上枚举算法看似简单又不能很轻易掌握，因为枚举也是有技巧与策略的。在一道具体的题目中，暴力的枚举很可能行不通，但是聪明的枚举往往能起到“四两拨千斤”的效果。</p><h3 id="练习题目"><a href="#练习题目" class="headerlink" title="练习题目"></a>练习题目</h3><h4 id="1-素数判定"><a href="#1-素数判定" class="headerlink" title="1.素数判定"></a>1.素数判定</h4><p>定义一个数是素数当且仅当它是一个大于1的自然数，且不含有除1和它本身以外的因数。</p><ul><li><h5 id="虚假的枚举"><a href="#虚假的枚举" class="headerlink" title="虚假的枚举"></a>虚假的枚举</h5></li></ul><p>直接枚举$2$到$n-1$的所有数，看是否能整除$n$，时间复杂度$O(n)$。</p><ul><li><h5 id="真正的枚举"><a href="#真正的枚举" class="headerlink" title="真正的枚举"></a>真正的枚举</h5></li></ul><p>考虑到如果$n$是合数，那么就能写成$n&#x3D;a\times b(1&lt;a,b&lt;n)$的形式。</p><p>不妨设$a\le b$</p><p>那么就有$n&#x3D;a\times b\ge a^2$</p><p>即$a\le \sqrt{n}$</p><p>也就是说如果$n$是合数，那么就一定有一个根号范围内的因数，所以枚举上界一下子就降下来了，时间复杂度$O(\sqrt{n})$。</p><h4 id="2-Squarefree-number"><a href="#2-Squarefree-number" class="headerlink" title="2.Squarefree number"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3826">2.Squarefree number</a></h4><p>（题目在bnuoj上也有<a href="http://www.bnuoj.com/problem_show.php?pid=7931%EF%BC%89">http://www.bnuoj.com/problem_show.php?pid=7931）</a></p><p>给出一个数$n(1\le n \le 10^{18})$ ，判断n的因数中有没有平方数。比如18有，21没有。</p><ul><li><h5 id="虚假的枚举-1"><a href="#虚假的枚举-1" class="headerlink" title="虚假的枚举"></a>虚假的枚举</h5></li></ul><p>直观上来看，需要枚举根号范围内的正整数$x$，判断$n$是否是$x^2$的倍数，时间复杂度$O(\sqrt{n})$。</p><ul><li><h5 id="真正的枚举-1"><a href="#真正的枚举-1" class="headerlink" title="真正的枚举"></a>真正的枚举</h5></li></ul><p>如果$n$满足条件，则一定可以表示成$n&#x3D;ab^2(b\ne 1)$的形式。</p><p>显然$a,b$<strong>不同时大于</strong>$10^6$。</p><p>那么我们只需要分别枚举判断即可，其中枚举$a$时需要看除完后是否是完全平方数，这个随便搞搞就好了，总的时间复杂度$O(n^{\frac{1}{3}})$。</p><p>很久之前写的代码了，还是不建议直接用sqrt开方（精度误差）,可以开完之后比如在加减5的范围内再for一下找找：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">square</span><span class="hljs-params">(ll x)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll y=(ll)<span class="hljs-built_in">sqrt</span>(x+<span class="hljs-number">0.5</span>);<br>    <span class="hljs-keyword">return</span> x==y*y;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">squarefree</span><span class="hljs-params">(ll x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">square</span>(x)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">2</span>;i&lt;=x/i/i;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(x%(i*i)==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(x%i==<span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">square</span>(x/i)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;T);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> cas=<span class="hljs-number">1</span>;cas&lt;=T;cas++)<br>    &#123;<br>        ll x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;x);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d: &quot;</span>,cas);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">squarefree</span>(x)) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-Forever-Young"><a href="#3-Forever-Young" class="headerlink" title="3.Forever Young"></a><a href="http://codeforces.com/gym/101242/problem/E">3.Forever Young</a></h4><p>题目来源是2016 ACM-ICPC World Finals（近几年我校唯一没进总决赛的一次），当时算是第三、四道简单签到题，不过这个签到就非常有水平了。</p><p>给一个十进制数$n(10\le y\le 10^{18})$，和一个下届$L(10\le L)$，找到最大的正整数$B$，使得$n$在$B$进制下只有0到9的数字，并且再当成十进制翻译后，要至少为$L$。</p><p>题意比较绕，还是需要结合样例理解一下。</p><ul><li><h5 id="虚假的枚举-2"><a href="#虚假的枚举-2" class="headerlink" title="虚假的枚举"></a>虚假的枚举</h5></li></ul><p>直接从大到小枚举进制$B$，然后进制转换，验证是否符合条件，找到就退出，然而光是枚举就需要$O(n)$，显然不行。</p><p>最简单的例子，比如不管$n$多大,只要下届是$10$，答案就可以是$n$进制。</p><ul><li><h5 id="真正的枚举-2"><a href="#真正的枚举-2" class="headerlink" title="真正的枚举"></a>真正的枚举</h5></li></ul><p>观察到一个数由更大的进制表示时，位数是越来越短的。具体来说</p><p>比如$n&#x3D;a_0+a_1B+a_2B^2+a_3B^3+\dots$</p><p>发现当$B&gt;10^6$时，$B^3&gt;10^{18}$，也就是说当枚举到$B&gt;10^6$时，表示出来的长度不会超过3位。又因为每一位必须是0到9的数字（不能有ABCDEF这样的），那么我直接一个三层循环枚举表示后的结果，最后解一个关于B的一元二次方程$n&#x3D;a_0+a_1B+a_2B^2$就非常trivial了。</p><p>最后把这两种枚举方式得到的答案取最大值即可，总的时间复杂度$O(n^{\frac{1}{3}})$。</p><p>代码写的稍微有点难看，训练的时候以为中间爆long long了，实际是别的地方的问题：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>ll n,L;<br><span class="hljs-type">int</span> len;<br><span class="hljs-type">int</span> d[<span class="hljs-number">30</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getlen</span><span class="hljs-params">(ll x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(x)<br>    &#123;<br>        ++ans;<br>        x/=<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ok</span><span class="hljs-params">(ll n,ll l,ll B)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(n)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(n%B&gt;=<span class="hljs-number">10</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        d[cnt++]=n%B;<br>        n/=B;<br>    &#125;<br>    ll now=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=cnt<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; --i)<br>        now=now*<span class="hljs-number">10</span>+d[i];<br>    <span class="hljs-keyword">return</span> now&gt;=l;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%I64d%I64d&quot;</span>,&amp;n,&amp;L);<br>    len=<span class="hljs-built_in">getlen</span>(L);<br><br>    ll ans=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">for</span>(ll B=<span class="hljs-number">2000000</span>; B&gt;=<span class="hljs-number">10</span>; --B)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">ok</span>(n,L,B))<br>        &#123;<br>            ans=B;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">10</span>; ++j)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>; k&lt;<span class="hljs-number">10</span>; ++k)<br>                <span class="hljs-keyword">if</span>(i*<span class="hljs-number">100</span>+j*<span class="hljs-number">10</span>+k&gt;=L)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span> &amp;&amp; j==<span class="hljs-number">0</span>) <span class="hljs-built_in">assert</span>(<span class="hljs-literal">false</span>);<br>                    ll l=<span class="hljs-number">0</span>,r=n,mid;<br>                    <span class="hljs-keyword">while</span>(l&lt;r)<br>                    &#123;<br>                        mid=(l+r+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>                        <span class="hljs-keyword">if</span>(i*mid+j&lt;=(n-k)/mid) l=mid;<br>                        <span class="hljs-keyword">else</span> r=mid<span class="hljs-number">-1</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span>(l&gt;=<span class="hljs-number">10</span> &amp;&amp; (n-k)%l==<span class="hljs-number">0</span> &amp;&amp; (n-k)/l==i*l+j)<br>                        ans=<span class="hljs-built_in">max</span>(ans,l);<br>                &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%I64d\n&quot;</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;再-放-送&quot;&gt;&lt;a href=&quot;#再-放-送&quot; class=&quot;headerlink&quot; title=&quot;再 放 送&quot;&gt;&lt;/a&gt;再 放 送&lt;/h3&gt;&lt;p&gt;4月24日的时候我讲了这学期程序设计与算法实践的第一课，内容包括算法时间复杂度的概念，枚举与递归等。其中关于枚举这方</summary>
      
    
    
    
    <category term="算法学习" scheme="https://izard.space/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="枚举" scheme="https://izard.space/tags/%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>怀念金庸</title>
    <link href="https://izard.space/2019/03/10/%E6%80%80%E5%BF%B5%E9%87%91%E5%BA%B8/"/>
    <id>https://izard.space/2019/03/10/%E6%80%80%E5%BF%B5%E9%87%91%E5%BA%B8/</id>
    <published>2019-03-10T13:19:00.000Z</published>
    <updated>2020-08-24T07:51:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天是金庸诞辰95周年。想起来2018年10月30日的上午，又或许是前一天晚上，我突发兴致，决定把天龙八部再读一遍，当时还在想不知金庸先生现况如何。</p><center><img src="/img/qq_pic_merged_1552221049007.jpg" width="60%"></center><p>然而晚上即闻金大侠仙逝的噩耗…</p><p>世事无常啊，当晚为此难受了很久。</p><p>过去四个月，我先后读了《天龙八部》、《射雕英雄传》、《神雕侠侣》、《倚天屠龙记》、《笑傲江湖》，深感收获良多。于是我把读书时的所思所想写到了哲学入门课程的期末论文里。文章结合哲学导论课本的一些观点将我目前读到的金庸串连了起来。除了“大闹一场，悄然离去”那一段是参考网上文章以外，其余都是我的原创想法。笔者认为其中一些片段语言可能会稍显稚嫩，不过还是有很多精彩部分的，下面是原文。</p><hr><h2 id="从金庸武侠角度浅谈人的哲学"><a href="#从金庸武侠角度浅谈人的哲学" class="headerlink" title="从金庸武侠角度浅谈人的哲学"></a><strong>从金庸武侠角度浅谈人的哲学</strong></h2><p><strong>摘要：</strong> 2018年10月30日，金庸先生在香港逝世，享年94岁。金庸，本名查良镛，当代武侠小说作家、新闻学家、企业家、政治评论家、社会活动家。他的作品曾被誉为“有华人的地方就有金庸的读者”。金庸十余部武侠作品之所以有如此巨大的魅力，和其中蕴含的中华传统文化精华以及处处可见的哲学智慧是分不开的。本文通过简要分析金庸武侠（以《天龙八部》为主）和回顾金庸生平来浅谈人的本质及人生意义等人学话题。</p><p><strong>关键词：</strong> 金庸；武侠小说；人生哲学</p><h3 id="一-人性与人的本质"><a href="#一-人性与人的本质" class="headerlink" title="一 人性与人的本质"></a><strong>一 人性与人的本质</strong></h3><p>人学最为核心的问题就是关于人是什么的问题。对于这个问题的回答可分为三个层面：一是人的天性是什么？二是人与万物尤其是动物相区别的特性是什么？三是人之为人的内在根据是什么？本节将从金庸武侠中是探讨、回答这三个问题。</p><h4 id="（一）金庸武侠中的善恶观"><a href="#（一）金庸武侠中的善恶观" class="headerlink" title="（一）金庸武侠中的善恶观"></a>（一）金庸武侠中的善恶观</h4><p>在当代文学作品中人物形象大多刻板：好人就是好人，坏人就是坏人。然而金庸武侠大多不是，至少《天龙八部》一定不是。即使是为万人敬仰的好人也有可能在某些场合做出极不光彩的错事，比如玄慈方丈，听信奸人妄言，埋伏攻击萧远山一家，后来又动了凡心，与叶二娘有私情，由此酿成种种悲剧。即使是万恶不赦的坏人也有可能践行侠义精神，做出大有风度之事。作为四大恶人之首的恶贯满盈段延庆，在将被蛊惑自尽之时，被虚竹救下，遂知恩图报，帮助虚竹破解珍珑棋局。</p><p>那么人的天性到底是善是恶？笔者认为，用性无善无恶论的观点更好解释。没有天生的恶人，没有天生的善人。善恶是非都是后天因素造成的，尤其是教育因素。若是从小受佛门经典熏陶，长大必然宅心仁厚。若是误入歧途，卷入恩怨纷争，难免性格乖戾，沦为恶人。而且善恶不过是相对的概念，是可以互相转化的，只要善于引导，人性都有发展向善的可能。武侠小说中弃暗投明或是由正转邪的例子大有人在。</p><h4 id="（二）阿朱就是阿朱"><a href="#（二）阿朱就是阿朱" class="headerlink" title="（二）阿朱就是阿朱"></a>（二）阿朱就是阿朱</h4><p>人和动物的共同点在于都有自然属性。“所谓人的自然属性，指的是人的生理构造和自然本能方面的属性。”真正区别人与动物的是人的精神属性。“所谓人的精神属性是指人是有意识的存在物，是有精神需要、精神能力以及精神生活的存在物，表现在人具有自我意识，能思维，有理性，具有情感、意志等非理性因素。”</p><p>《天龙八部》中有一段耐人寻味的话：“阿朱就是阿朱，四海列国，千秋万载，就只一个阿朱。”无论是空间上还是时间上，阿朱是独一无二的，不能被任何人代替。笔者认为，人的独特在于人具有的自由精神。这种自由精神、自由意识的不同造成了人的性格、情感、认知的不同。“人非草木，孰能无情”是以情感的角度论证人的精神属性。再以精神需要为例，人的自我实现、自我超越的需要是可以抑制基本的生理需要的，这也是马斯洛需求层次理论不足的地方。萧峰因误杀阿朱，愧疚难当，决定此生终不再娶，这里即是精神需要战胜生理需要的例子。</p><h4 id="（三）人就是江湖"><a href="#（三）人就是江湖" class="headerlink" title="（三）人就是江湖"></a>（三）人就是江湖</h4><p>由前面的观点，自我意识、自由精神固然重要，但还不能简单归为人的本质。关于人的本质，或者说人的内在根据还需要更多探讨。</p><p>人除了自然属性与精神属性，更根本的还有社会属性。荀子提出人与动物的差别在于，“人能群，彼不能群也。人何以能群？曰分。”</p><p>关于何为江湖，在后来翻拍的《笑傲江湖》中有一句经典台词：“只要有人的地方就有恩怨，有恩怨就会有江湖，人就是江湖。”与其说是江湖的本质，更不如说是直接道出了人的本质。这与马克思所说的“人是一切社会关系的总和”有异曲同工之妙。当然，“在马克思看来，人根本就没有固定不变的本质”。只不过在虚构的武侠世界中，江湖由人构成，恩怨因人而生，说人就是恩怨江湖再贴切不过。</p><h3 id="二-人生的意义"><a href="#二-人生的意义" class="headerlink" title="二 人生的意义"></a><strong>二 人生的意义</strong></h3><h4 id="（一）红颜弹指老，刹那芳华"><a href="#（一）红颜弹指老，刹那芳华" class="headerlink" title="（一）红颜弹指老，刹那芳华"></a>（一）红颜弹指老，刹那芳华</h4><p>金庸笔下的天山童姥可谓是奇异至极，短短几日时间，身体便由青春年少变得垂垂老矣，最终和仇人李秋水激斗后得知她们一生纠缠痴爱的男人另有所爱，于是“同一笑，到头万事俱空”，便双双撒手人寰。正所谓“人生如梦幻泡影，如露亦如电”。当我们突然发觉，弹指一挥间，青丝沾染白雪，自己已经老去，这个时候该如何追忆评价自己的一生？人生到底有无意义？我们是否实现了人生的意义？</p><p>笔者认同这样的观点，人生本无意义，需要我们给予意义。在哲学家们看来，人生的意义最终可以归结为“幸福”二字，幸福是人类一切活动的最高、最终目的。然而，人们对幸福的理解是不一样的。总体而言，大致分为两类，快乐主义幸福观和道德主义幸福观。前者认为幸福在于趋利避害，享受快乐；后者认为幸福在于至善，修德才能得福。但又容易分别走向享乐主义和禁欲主义两个极端。</p><p>马克思说：“如果我们选择了最能为人类福利而劳动的职业，那么重担就不能把我们压倒，因为它是为大家而献身；那么我们所感到的就不是可怜的、有限的、自私的乐趣，我们的幸福将属于千百万人，我们的事业将默默地，但是永恒发挥作用地存在下去，而面对我们的骨灰，高尚的人们将洒下热泪。”这启发着我们，人生的意义在于奉献。个人幸福应与集体幸福、社会幸福紧密结合，离开了社会，个人就无所谓幸福可言。</p><h4 id="（二）为国为民，侠之大者"><a href="#（二）为国为民，侠之大者" class="headerlink" title="（二）为国为民，侠之大者"></a>（二）为国为民，侠之大者</h4><p>在《明报》创刊的第一天，金庸在九龙尖沙嘴那间小小的编辑室中写下：“如果我们能多报道一些社会上美好的事物，如果我们这份小小的报纸能增加读者们生活中的一些喜悦，那将使我们感到很大的幸福。”这里的幸福即是如此。在局势动荡的年代，金庸一手写社评，一手写武侠，本着明辨是非的办报方针，客观报道，客观评论，将《明报》创造成了奇迹。在现实的家国和虚拟的江湖之间，金庸纵横自如。虽然武侠小说本身是娱乐大众的东西，但是金庸将其融入了人生哲理、个人思想、甚至对社会及政治的看法。</p><p>所谓“为国为民，侠之大者”，金庸做到了。很多地方将其误写成“侠之大者，为国为民”。笔者认为，其实写作“侠之大者，为国为民”也有一定道理。从诗词创作的角度，这样写符合“上仄下平”的原则，读起来更有美感。然而在原著《神雕侠侣》一书中，金庸确实是将“为国为民”写在前，“侠之大者”写在后。对此应如何解读？这是因为“为国为民”是第一位，是根本目的，也因此成就大侠。而不是去为了获得大侠的名声而做“为国为民”的事，如此就本末倒置了。</p><h4 id="（三）大闹一场，悄然离去"><a href="#（三）大闹一场，悄然离去" class="headerlink" title="（三）大闹一场，悄然离去"></a>（三）大闹一场，悄然离去</h4><p>庄子说：“吾生也有涯，而知也无涯。”《天龙八部》中逍遥派无崖子的名字即与此相关。其有两个徒弟，丁春秋与苏星河。“春秋”是时间上的无涯，“星河”是空间上的无涯。当人在思考自己在世状态时，会直接感受到世界的无限，与自己的渺小与短暂。人在各个方面都是有限的，一些感官甚至远不如某些种类的动物。“人固有一死”，每个人都有一个共同的大限。史铁生形容“死是一个必然会降临的节日”。金庸将其比喻成“谁也躲不了的瘟疫”。人虽然不能从自然意义上超越死亡，但是按照亚里士多德所云：我们当尽力以求不朽！</p><p>有人问金庸人生是什么，金庸说：“人生就是大闹一场，然后，悄然离去。”显然，这里的“闹”不是胡作非为，无法无天的闹，而应该是大放异彩，精彩绝伦的闹。既然我们有足够的运气来到这世间，就应该热热闹闹的，做一番轰轰烈烈的事业，为他人、为社会发光发热，活出人生价值。等到曲终人散，不得不落幕之时再“悄然离去”。我们无法改变死亡这一最终归宿，那么离开时就应当优雅、释然，无所畏惧，不含愧疚地走。同时，悄悄地走，正如悄悄地来，不打扰别人，不给别人添乱。</p><h4 id="（四）敝屣荣华，浮云生死"><a href="#（四）敝屣荣华，浮云生死" class="headerlink" title="（四）敝屣荣华，浮云生死"></a>（四）敝屣荣华，浮云生死</h4><p>德国哲学家马丁·海德格尔提出“向死而生”的概念，可谓人生意义的真谛。怎么样才是“向死而生”？向死而生需要存在的勇气。梯利希阐述道，存在的勇气就是具有“不顾”性质的自我肯定。它能让我们从人生中源自非存在的种种威胁、困顿与焦虑不安中超拔而出，径直对自己本质性的存在样态做出肯定。</p><p>孟子说：“虽千万人吾往矣。”纵然面对千军万马，也要勇往直前，毫无畏惧的冲上去，因为正义在我。如果说萧峰“赤手屠熊搏虎，金戈荡寇鏖兵”是小勇，是匹夫之勇，那么最后他“教单于折箭，六军辟易”则是真正的大勇。因为他心系天下苍生，力求世间和平，早已将生死置之度外，为了忠义二字，以至最后选择以身殉道，令人唏嘘不已。诚然，“人只有自由地去就死，才能赋予存在以至高无上的目标。”</p><p>金庸在坚持自己的主张时，也都面对着沉重的压力，有时甚至成为暗杀目标，生命受到威胁，但是他仍然坚持立场，不改初心，后来说道：“是非善恶既已明确，我决不屈服于无理的压力之下。”他在处境危险之时，想到自己武侠小说中的那些大丈夫，就用来勉励自己：“虽然害怕，但不可卑怯退缩，以致被我书中的英雄们瞧不起。”</p><p>金庸不朽。“飞雪连天射白鹿，笑书神侠倚碧鸳。”在当今这个“娱乐至死”的年代，有一个快意恩仇、侠肝义胆的江湖供我们回眸反思，何其幸哉！</p><center><img src="/img/金庸.jpg" width="70%"></center>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天是金庸诞辰95周年。想起来2018年10月30日的上午，又或许是前一天晚上，我突发兴致，决定把天龙八部再读一遍，当时还在想不知金庸先生现况如何。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/img/qq_pic_merged_1552221049007.jpg&quot; wi</summary>
      
    
    
    
    <category term="个人随笔" scheme="https://izard.space/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="金庸" scheme="https://izard.space/tags/%E9%87%91%E5%BA%B8/"/>
    
  </entry>
  
  <entry>
    <title>cdq分治+可撤销并查集</title>
    <link href="https://izard.space/2019/02/26/cdq%E5%88%86%E6%B2%BB-%E5%8F%AF%E6%92%A4%E9%94%80%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>https://izard.space/2019/02/26/cdq%E5%88%86%E6%B2%BB-%E5%8F%AF%E6%92%A4%E9%94%80%E5%B9%B6%E6%9F%A5%E9%9B%86/</id>
    <published>2019-02-25T16:01:00.000Z</published>
    <updated>2020-04-20T01:37:42.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-bzoj-3237-Ahoi2013-连通图"><a href="#1-bzoj-3237-Ahoi2013-连通图" class="headerlink" title="[1.bzoj 3237 Ahoi2013]连通图"></a>[1.bzoj 3237 <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3237">Ahoi2013]连通图</a></h4><p>题意：给一个连通的无向图，无重边无自环，$k$个询问，每次询问给出不超过$4$条原图中的边，问将这些边删掉后，无向图是否还是保持连通。一个图是连通的当且仅当任意两个不同的点之间存在一条路径连接他们。</p><p>做法：cdq分治+可撤销并查集。每次先加入在右半区间且不在左半区间的边，递归到左半边，撤销，再加入在左半区间且不在右半区间的边，递归到右半边，撤销。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 200010</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DSU</span><br>&#123;<br>    <span class="hljs-type">int</span> fa[N],rk[N],cnt;<br>    pair&lt;<span class="hljs-type">int</span>*,<span class="hljs-type">int</span>&gt; stk[N&lt;&lt;<span class="hljs-number">3</span>];<br>    <span class="hljs-type">int</span> siz;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        cnt=n;siz=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>            fa[i]=i,rk[i]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">while</span>(x!=fa[x]) x=fa[x];<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Union</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        x=<span class="hljs-built_in">Find</span>(x);y=<span class="hljs-built_in">Find</span>(y);<br>        <span class="hljs-keyword">if</span>(x==y) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(rk[x]&lt;rk[y]) <span class="hljs-built_in">swap</span>(x,y);<br>        stk[++siz]=<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>*,<span class="hljs-type">int</span>&gt;(fa+y,fa[y]);<br>        fa[y]=x;<br>        <span class="hljs-keyword">if</span>(rk[x]==rk[y])<br>        &#123;<br>            stk[++siz]=<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>*,<span class="hljs-type">int</span>&gt;(rk+x,rk[x]);<br>            ++rk[x];<br>        &#125;<br>        stk[++siz]=<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>*,<span class="hljs-type">int</span>&gt;(&amp;cnt,cnt);<br>        --cnt;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Undo</span><span class="hljs-params">(<span class="hljs-type">int</span> tim)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">while</span>(siz&gt;tim)<br>        &#123;<br>            *stk[siz].first=stk[siz].second;<br>            --siz;<br>        &#125;<br>    &#125;<br>&#125; dsu;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">edge</span><br>&#123;<br>    <span class="hljs-type">int</span> x,y;<br>&#125; e[N];<br><span class="hljs-type">int</span> n,m,q;<br><span class="hljs-type">bool</span> vis[N],ans[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> c,a[<span class="hljs-number">4</span>];<br>&#125; t[N];<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setvis</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">bool</span> flag)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=r;++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;t[i].c;++j)<br>            vis[t[i].a[j]]=flag;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=r;++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;t[i].c;++j)<br>        &#123;<br>            <span class="hljs-type">int</span> o=t[i].a[j];<br>            <span class="hljs-keyword">if</span>(!vis[o])<br>                dsu.<span class="hljs-built_in">Union</span>(e[o].x,e[o].y);<br>        &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)<br>    &#123;<br>        ans[l]=(dsu.cnt==<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>,now=dsu.siz;<br>    <span class="hljs-built_in">setvis</span>(l,mid,<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">add</span>(mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-built_in">setvis</span>(l,mid,<span class="hljs-number">0</span>);<br> <br>    <span class="hljs-built_in">solve</span>(l,mid);<br>    dsu.<span class="hljs-built_in">Undo</span>(now);<br> <br>    <span class="hljs-built_in">setvis</span>(mid+<span class="hljs-number">1</span>,r,<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">add</span>(l,mid);<br>    <span class="hljs-built_in">setvis</span>(mid+<span class="hljs-number">1</span>,r,<span class="hljs-number">0</span>);<br> <br>    <span class="hljs-built_in">solve</span>(mid+<span class="hljs-number">1</span>,r);<br>    dsu.<span class="hljs-built_in">Undo</span>(now);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;++i)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;e[i].x,&amp;e[i].y);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=q;++i)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;t[i].c);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;t[i].c;++j)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;t[i].a[j]);<br>            vis[t[i].a[j]]=<span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    dsu.<span class="hljs-built_in">init</span>(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;++i)<br>        <span class="hljs-keyword">if</span>(!vis[i]) dsu.<span class="hljs-built_in">Union</span>(e[i].x,e[i].y);<br>        <span class="hljs-keyword">else</span> vis[i]=<span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">solve</span>(<span class="hljs-number">1</span>,q);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=q;++i)<br>        <span class="hljs-built_in">puts</span>(ans[i]?<span class="hljs-string">&quot;Connected&quot;</span>:<span class="hljs-string">&quot;Disconnected&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-bzoj-3237-Ahoi2013-连通图&quot;&gt;&lt;a href=&quot;#1-bzoj-3237-Ahoi2013-连通图&quot; class=&quot;headerlink&quot; title=&quot;[1.bzoj 3237 Ahoi2013]连通图&quot;&gt;&lt;/a&gt;[1.bzoj 3237 </summary>
      
    
    
    
    <category term="算法学习" scheme="https://izard.space/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="cdq分治" scheme="https://izard.space/tags/cdq%E5%88%86%E6%B2%BB/"/>
    
    <category term="并查集" scheme="https://izard.space/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>诗词中的汉字文化</title>
    <link href="https://izard.space/2019/02/25/%E8%AF%97%E8%AF%8D%E4%B8%AD%E7%9A%84%E6%B1%89%E5%AD%97%E6%96%87%E5%8C%96/"/>
    <id>https://izard.space/2019/02/25/%E8%AF%97%E8%AF%8D%E4%B8%AD%E7%9A%84%E6%B1%89%E5%AD%97%E6%96%87%E5%8C%96/</id>
    <published>2019-02-25T03:44:00.000Z</published>
    <updated>2020-04-20T01:35:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章是我上学期汉字文化课的期末作业，为数不多的写作机会，主要是最近两三个月的所思所想。以下是原文：</p><hr><p>生活中经常会看到一部分喜欢写诗的同学，把自己写的诗发到朋友圈，往往是用词显得十分古风文雅，或者华丽至极，还可能用上几个典故，最后配上一幅美图，随之就能骗来一堆人的称赞。但如果了解一些近体诗创作的话，就会发现，写的毫无美感。下面是随便在网络上找的一首，作者不详：</p><blockquote><p>月明星稀残枝静，乌鹊寒鸦南北飞。孟德何必挟天子，短歌寥寥亦洒泪。</p></blockquote><p>主旨上，姑且不谈（也不知道想表达什么）。从修辞手法上说也有用典，用了曹操的《短歌行》。再宽容点，前两句就算一个动静结合吧。但是在我看来还是没有美感可言。原因就在于写的完全不符合近体诗的格律！</p><p>诗词格律，尤其是近体诗，有三大要素，对仗、平仄、押韵。关于三者分别是什么意思，在此不再赘述。按照格律，上述诗作有两个严重问题：一是韵脚不对，“泪”字出格，“泪”是仄声，这里韵脚必须平声，更严格地说，这里应该押平水韵中的五微韵，和“飞”字同韵。二是全篇出律，且不说是否是七律的平起首句不入韵式，这首诗连基本的“一三五不论，二四六分明”也没有做到，甚至于首句中间一连出现了五个平声。</p><p>虽然说好诗未必就不出格、出律，格律工整的也未必就是好诗，但是我还是觉得古诗词读起来之所以有美感，抛开遣词造句来说，与韵律是有很大关系的。为什么“一三五不论，二四六分明”就好听，三平调与孤平要尽量避免，以及为什么会有拗救？这些都是古人智慧的结晶，也是汉字的魅力所在。汉字从前发音分平、上、去、入四声，现在是阴平、阳平、上声、去声四声。汉字的韵律美就在这四声的变化之中，格律即是关于汉字的一大重要发明，使本来朴素的字词连缀成句，读来有抑扬顿挫，循环往复的美感。写诗作词如果全然不顾格律势必会失去汉语的这一巨大优势。就好比写歌，如果曲调没有什么变化，就让人感觉平淡无奇，并不优美，这样歌词写得再好，也仿佛失去了灵魂。即使是写现在的一些文章，想把标题起的文雅一点也可以运用这一规律。</p><p>再举一个正面例子，著名歌手、音乐人许嵩在社交平台上写下过这样的句子：“机翼虚无，精通登月。天上名额有限，人间故事大全。”尤其是后两句，虽然用词普通，但很好地注意了写诗的三要素，足够让人吟咏把玩很久。让我想起了黄安《新鸳鸯蝴蝶梦》中的歌词，“在人间已是癫，何苦要上青天”，大概有类似之意。从这一句话足以看出许嵩深厚的文学功底，能写出《庐州月》、《半城烟沙》、《绝代风华》等等这样优秀的古风作品也就不足为奇了。</p><p>对联同诗词也是类似，应当尽量遵循旧体规则，凸显汉字之美。当然，如果对于格律有新的发明创造那应该另当别论。以上就是我对诗词中汉字文化的理解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇文章是我上学期汉字文化课的期末作业，为数不多的写作机会，主要是最近两三个月的所思所想。以下是原文：&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;生活中经常会看到一部分喜欢写诗的同学，把自己写的诗发到朋友圈，往往是用词显得十分古风文雅，或者华丽至极，还可能用上几个典故，最后配上一幅美图，随之</summary>
      
    
    
    
    <category term="个人随笔" scheme="https://izard.space/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="诗词" scheme="https://izard.space/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>bzoj 3569 DZY Loves Chinese II</title>
    <link href="https://izard.space/2019/02/18/bzoj-3569-DZY-Loves-Chinese-II/"/>
    <id>https://izard.space/2019/02/18/bzoj-3569-DZY-Loves-Chinese-II/</id>
    <published>2019-02-18T04:05:00.000Z</published>
    <updated>2020-04-20T01:32:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>题意：给一个$n$个点$m$条边的(连通)无向图，$q$个询问，每次询问给出$k$条原图中的边，问将这些边删掉后，无向图是否还是保持连通。一个图是连通的当且仅当任意两个不同的点之间存在一条路径连接他们。$N\le 100000,M\le 500000,Q\le 50000,1\le K\le 15$。</p><p>这道题实际上是<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3237">bzoj 3237</a>的加强版。</p><p>对原图随便找一个生成树出来，对非树边随机边权，树边边权则为覆盖它的所有非树边权值的异或和，那么一个边集删去后使得图不连通等价于这个边集<strong>存在一个子集</strong>的权值异或和为0。</p><p>随机是为了让边权异或和在不应该是0的情况下不为0。</p><p>正确性证明参考这篇 <a href="http://dwjshift.logdown.com/posts/2830435">http://dwjshift.logdown.com/posts/2830435</a></p><p>时间复杂度$O(m+n+32qk)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 100010</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> M 500010</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> uint;<br> <br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXL = <span class="hljs-number">31</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LinearBasis</span><br>&#123;<br>    uint a[MAXL + <span class="hljs-number">5</span>];<br>    vector&lt;uint&gt; v;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(a));<br>        v.<span class="hljs-built_in">clear</span>();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(uint t)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=MAXL;j&gt;=<span class="hljs-number">0</span>;j--)<br>        <span class="hljs-keyword">if</span>((t&gt;&gt;j)&amp;<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(a[j]) t^=a[j];<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;j;k++) <span class="hljs-keyword">if</span>((t&gt;&gt;k)&amp;<span class="hljs-number">1</span>) t^=a[k];<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=j+<span class="hljs-number">1</span>;k&lt;=MAXL;k++) <span class="hljs-keyword">if</span>((a[k]&gt;&gt;j)&amp;<span class="hljs-number">1</span>) a[k]^=t;<br>                a[j]=t;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=MAXL;++j)<br>            <span class="hljs-keyword">if</span>(a[j]) v.<span class="hljs-built_in">push_back</span>(a[j]);<br>    &#125;<br>&#125; st;<br><span class="hljs-type">int</span> n,m,q;<br><span class="hljs-type">int</span> fa[N];<br>uint val[N],eval[M];<br>uint s=<span class="hljs-number">2323423</span>;<br><span class="hljs-type">int</span> e,head[M&lt;&lt;<span class="hljs-number">1</span>],w[M&lt;&lt;<span class="hljs-number">1</span>],last[M&lt;&lt;<span class="hljs-number">1</span>],p[N];<br><span class="hljs-function">uint <span class="hljs-title">getNext</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    s=s^(s&lt;&lt;<span class="hljs-number">13</span>);<br>    s=s^(s&gt;&gt;<span class="hljs-number">17</span>);<br>    s=s^(s&lt;&lt;<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getfa</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==fa[x]) <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">return</span> fa[x]=<span class="hljs-built_in">getfa</span>(fa[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Union</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    x=<span class="hljs-built_in">getfa</span>(x);y=<span class="hljs-built_in">getfa</span>(y);<br>    <span class="hljs-keyword">if</span>(x==y) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    fa[x]=y;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> o)</span></span><br><span class="hljs-function"></span>&#123;<br>    head[++e]=y;w[e]=o;<br>    last[e]=p[x];<br>    p[x]=e;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> pre,<span class="hljs-type">int</span> eid)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=p[x];j;j=last[j])<br>    &#123;<br>        <span class="hljs-type">int</span> y=head[j];<br>        <span class="hljs-keyword">if</span>(y==pre) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs</span>(y,x,w[j]);<br>        val[x]^=val[y];<br>    &#125;<br>    eval[eid]=val[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i) fa[i]=i;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;++i)<br>    &#123;<br>        <span class="hljs-type">int</span> x,y;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">Union</span>(x,y))<br>        &#123;<br>            <span class="hljs-built_in">add</span>(x,y,i);<br>            <span class="hljs-built_in">add</span>(y,x,i);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            eval[i]=<span class="hljs-built_in">getNext</span>();<br>            val[x]^=eval[i];<br>            val[y]^=eval[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q);<br>    <span class="hljs-keyword">while</span>(q--)<br>    &#123;<br>        st.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-type">int</span> k;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;++i)<br>        &#123;<br>            <span class="hljs-type">int</span> x;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>            x^=res;<br>            st.<span class="hljs-built_in">insert</span>(eval[x]);<br>        &#125;<br>        st.<span class="hljs-built_in">build</span>();<br>        <span class="hljs-keyword">if</span>(st.v.<span class="hljs-built_in">size</span>()&lt;k) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Disconnected&quot;</span>);<br>        <span class="hljs-keyword">else</span> ++res,<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Connected&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题意：给一个$n$个点$m$条边的(连通)无向图，$q$个询问，每次询问给出$k$条原图中的边，问将这些边删掉后，无向图是否还是保持连通。一个图是连通的当且仅当任意两个不同的点之间存在一条路径连接他们。$N&#92;le 100000,M&#92;le 500000,Q&#92;le 50000,</summary>
      
    
    
    
    <category term="散装题解" scheme="https://izard.space/categories/%E6%95%A3%E8%A3%85%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="随机化" scheme="https://izard.space/tags/%E9%9A%8F%E6%9C%BA%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>小清新线段树</title>
    <link href="https://izard.space/2018/11/08/%E5%B0%8F%E6%B8%85%E6%96%B0%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <id>https://izard.space/2018/11/08/%E5%B0%8F%E6%B8%85%E6%96%B0%E7%BA%BF%E6%AE%B5%E6%A0%91/</id>
    <published>2018-11-08T13:41:00.000Z</published>
    <updated>2020-08-24T07:48:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>小清新线段树的概念是由jiry_2提出的，区别于zkw(重口味)线段树命名。这里我的理解是可以归为一类结合时间复杂度分析以及懒标记应用的非传统线段树。不过既为非传统，这类题目总体来说还是做法各异，下面就结合题目做一些分析。</p><hr><h3 id="入门难度"><a href="#入门难度" class="headerlink" title="入门难度"></a>入门难度</h3><h4 id="1-bzoj-3211-花神游历各国"><a href="#1-bzoj-3211-花神游历各国" class="headerlink" title="1.bzoj 3211 花神游历各国"></a><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3211">1.bzoj 3211 花神游历各国</a></h4><p>区间求和，区间开根号（下取整）</p><p>因为只有开根号操作，所以最后不是1就是0，且一个数开根号次数$O(loglogC)$级别的，1e9的数最多开5次。所以就怎么暴力都行了，比如判断当前区间最大值是否是1，或者直接记录访问每个节点的次数是否达到5次，用于剪枝。时间复杂度$O(nlogn+nloglogC)$。</p><h4 id="2-bzoj-3333-排队计划"><a href="#2-bzoj-3333-排队计划" class="headerlink" title="2.bzoj 3333 排队计划"></a><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3333">2.bzoj 3333 排队计划</a></h4><p><del>这个题其实不是很入门</del></p><p>有一个排列，每次修改是给一个位置x，先拿出x及之后所有小于等于a[x]的数，从小到大排序后，再放回空位中，一开始及每次操作完都要输出当前排列的逆序对数。</p><p>计算逆序对数就用传统方法，把以每个位置为开头的逆序对数加起来。那么通过观察发现，这个排序操作会抹掉x及之后所有小于等于a[x]的那些位置的贡献，并且不会对其他不动的位置的贡献造成影响。这样每次用线段树通过判断最小值，每次暴力下去找到需要清除贡献的地方即可，因为每个点只会被清除一次，那么平摊下来总时间复杂度就是$O(nlogn)$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 500010</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ls(p) (p&lt;&lt;1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rs(p) (p&lt;&lt;1|1)</span><br><span class="hljs-type">int</span> a[N],n,m;<br><span class="hljs-type">int</span> h[N],cnt;<br><span class="hljs-type">int</span> val[N],c[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> l,r,mn;<br>    ll val;<br>&#125; t[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(;x;x-=x&amp;(-x)) ans+=c[x];<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(;x&lt;=cnt;x+=x&amp;(-x)) c[x]+=y;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_up</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].mn=<span class="hljs-built_in">min</span>(t[<span class="hljs-built_in">ls</span>(p)].mn,t[<span class="hljs-built_in">rs</span>(p)].mn);<br>    t[p].val=t[<span class="hljs-built_in">ls</span>(p)].val+t[<span class="hljs-built_in">rs</span>(p)].val;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].l=l;t[p].r=r;<br>    <span class="hljs-keyword">if</span>(l==r)<br>    &#123;<br>        t[p].val=val[l];<br>        t[p].mn=a[l];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(<span class="hljs-built_in">ls</span>(p),l,mid);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-built_in">rs</span>(p),mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-built_in">push_up</span>(p);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t[p].r&lt;l||r&lt;t[p].l||t[p].mn&gt;y) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(t[p].l==t[p].r)<br>    &#123;<br>        t[p].val=<span class="hljs-number">0</span>;<br>        t[p].mn=INF;<br>        a[t[p].l]=INF;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">change</span>(<span class="hljs-built_in">ls</span>(p),l,r,y);<br>    <span class="hljs-built_in">change</span>(<span class="hljs-built_in">rs</span>(p),l,r,y);<br>    <span class="hljs-built_in">push_up</span>(p);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a+i);<br>        h[i]=a[i];<br>    &#125;<br>    cnt=n;<br>    <span class="hljs-built_in">sort</span>(h+<span class="hljs-number">1</span>,h+cnt+<span class="hljs-number">1</span>);<br>    cnt=<span class="hljs-built_in">unique</span>(h+<span class="hljs-number">1</span>,h+cnt+<span class="hljs-number">1</span>)-h<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n;i&gt;=<span class="hljs-number">1</span>;--i)<br>    &#123;<br>        a[i]=<span class="hljs-built_in">lower_bound</span>(h+<span class="hljs-number">1</span>,h+cnt+<span class="hljs-number">1</span>,a[i])-h;<br>        val[i]=<span class="hljs-built_in">ask</span>(a[i]<span class="hljs-number">-1</span>);<br>        <span class="hljs-built_in">change</span>(a[i],<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,t[<span class="hljs-number">1</span>].val);<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>        <span class="hljs-keyword">if</span>(a[x]!=INF) <span class="hljs-built_in">change</span>(<span class="hljs-number">1</span>,x,n,a[x]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,t[<span class="hljs-number">1</span>].val);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="进阶难度"><a href="#进阶难度" class="headerlink" title="进阶难度"></a>进阶难度</h3><h4 id="1-Petrozavodsk-Winter-2018-AtCoder-Contest-I-ADD-DIV-MAX"><a href="#1-Petrozavodsk-Winter-2018-AtCoder-Contest-I-ADD-DIV-MAX" class="headerlink" title="1.Petrozavodsk Winter-2018. AtCoder Contest I. ADD, DIV, MAX"></a><a href="http://opentrains.snarknews.info/~ejudge/opencup.cgi">1.Petrozavodsk Winter-2018. AtCoder Contest I. ADD, DIV, MAX</a></h4><p>维护序列，支持区间加，区间整除，区间求最大值。</p><p>我们定义线段树上每个节点势能函数为$W&#x3D;log_2(Max-Min)$，或者直观理解就是这个区间除以多少次2就会完全相同。那么由于线段树一共$O(n)$个节点，初始总势能为$O(nlogC)$。因为线段树区间操作会访问$O(logn)$个节点，所以一次区间加操作至多增加$O(lognlogC)$。由于我们修改时访问一个节点就会使该节点势能减一，所以总的时间复杂度是$O(nlognlogC)$。</p><p>具体实现就是线段树维护最大值最小值，以及加法的懒标记，对于除法操作如果当前区间的最大值和最小值的改变量是相同的，那么对于这个区间来说，除法操作就可以看成整体加上一个数，否则暴力递归到左右子树。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 200010</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ls(p) (p&lt;&lt;1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rs(p) (p&lt;&lt;1|1)</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> l,r,min,max,add;<br>&#125; t[N&lt;&lt;<span class="hljs-number">4</span>];<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_up</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].min=<span class="hljs-built_in">min</span>(t[<span class="hljs-built_in">ls</span>(p)].min,t[<span class="hljs-built_in">rs</span>(p)].min);<br>    t[p].max=<span class="hljs-built_in">max</span>(t[<span class="hljs-built_in">ls</span>(p)].max,t[<span class="hljs-built_in">rs</span>(p)].max);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].add+=y;<br>    t[p].min+=y;<br>    t[p].max+=y;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t[p].add)<br>    &#123;<br>        <span class="hljs-built_in">update</span>(<span class="hljs-built_in">ls</span>(p),t[p].add);<br>        <span class="hljs-built_in">update</span>(<span class="hljs-built_in">rs</span>(p),t[p].add);<br>        t[p].add=<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].l=l;t[p].r=r;<br>    <span class="hljs-keyword">if</span>(l==r)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>        t[p].min=t[p].max=x;<br>        t[p].add=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(<span class="hljs-built_in">ls</span>(p),l,mid);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-built_in">rs</span>(p),mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-built_in">push_up</span>(p);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t[p].r&lt;l || r&lt;t[p].l) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(l&lt;=t[p].l &amp;&amp; t[p].r&lt;=r)<br>    &#123;<br>        <span class="hljs-built_in">update</span>(p,x);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">push_down</span>(p);<br>    <span class="hljs-built_in">Add</span>(<span class="hljs-built_in">ls</span>(p),l,r,x);<br>    <span class="hljs-built_in">Add</span>(<span class="hljs-built_in">rs</span>(p),l,r,x);<br>    <span class="hljs-built_in">push_up</span>(p);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Div</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t[p].r&lt;l||r&lt;t[p].l|| (t[p].max==<span class="hljs-number">0</span>)) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(l&lt;=t[p].l&amp;&amp;t[p].r&lt;=r &amp;&amp;  t[p].min/x-t[p].min==t[p].max/x-t[p].max)<br>    &#123;<br>        <span class="hljs-built_in">update</span>(p,t[p].min/x-t[p].min);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">push_down</span>(p);<br>    <span class="hljs-built_in">Div</span>(<span class="hljs-built_in">ls</span>(p),l,r,x);<br>    <span class="hljs-built_in">Div</span>(<span class="hljs-built_in">rs</span>(p),l,r,x);<br>    <span class="hljs-built_in">push_up</span>(p);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Ask</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(r&lt;t[p].l || t[p].r&lt;l) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(l&lt;=t[p].l &amp;&amp; t[p].r&lt;=r) <span class="hljs-keyword">return</span> t[p].max;<br>    <span class="hljs-built_in">push_down</span>(p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">Ask</span>(<span class="hljs-built_in">ls</span>(p),l,r),<span class="hljs-built_in">Ask</span>(<span class="hljs-built_in">rs</span>(p),l,r));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-type">int</span> op,l,r,x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;op,&amp;l,&amp;r,&amp;x);<br>        ++l;++r;<br>        <span class="hljs-keyword">if</span>(op==<span class="hljs-number">0</span>) <span class="hljs-built_in">Add</span>(<span class="hljs-number">1</span>,l,r,x);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">1</span>) <span class="hljs-built_in">Div</span>(<span class="hljs-number">1</span>,l,r,x);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">Ask</span>(<span class="hljs-number">1</span>,l,r));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-Codeforces-438D-The-Child-and-Sequence"><a href="#2-Codeforces-438D-The-Child-and-Sequence" class="headerlink" title="2.Codeforces 438D The Child and Sequence"></a><a href="https://codeforces.com/problemset/problem/438/D">2.Codeforces 438D The Child and Sequence</a></h4><p>维护序列，支持区间求和，区间模一个数，单点修改。</p><p>首先需要用一个很好证明的式子$x, mod, p \le x&#x2F;2$，也就是说模操作会让每个数至少除以2。由于只有单点修改，那么就比上一个题好分析了，势能函数是每个区间最大值除以2的次数，初始总势能$O(nlogC)$，单点修改还是，改变了$O(logn)$个点，每个点充能$O(logC)$，所以总的时间复杂度$O(nlognlogC)$。</p><p>那么具体实现额外维护最大值，当区间最大值小于模数就剪枝，否则暴力下去。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 100010</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ls(p) (p&lt;&lt;1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rs(p) (p&lt;&lt;1|1)</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> l,r,mx;<br>    ll sum;<br>&#125; t[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_up</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].mx=<span class="hljs-built_in">max</span>(t[<span class="hljs-built_in">ls</span>(p)].mx,t[<span class="hljs-built_in">rs</span>(p)].mx);<br>    t[p].sum=t[<span class="hljs-built_in">ls</span>(p)].sum+t[<span class="hljs-built_in">rs</span>(p)].sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].l=l;t[p].r=r;<br>    <span class="hljs-keyword">if</span>(l==r)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>        t[p].mx=x;<br>        t[p].sum=x;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(<span class="hljs-built_in">ls</span>(p),l,mid);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-built_in">rs</span>(p),mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-built_in">push_up</span>(p);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t[p].r&lt;l||r&lt;t[p].l||t[p].mx&lt;y) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(t[p].l==t[p].r)<br>    &#123;<br>        t[p].sum=t[p].mx=t[p].mx%y;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">change</span>(<span class="hljs-built_in">ls</span>(p),l,r,y);<br>    <span class="hljs-built_in">change</span>(<span class="hljs-built_in">rs</span>(p),l,r,y);<br>    <span class="hljs-built_in">push_up</span>(p);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t[p].l==t[p].r)<br>    &#123;<br>        t[p].sum=t[p].mx=y;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(x&lt;=mid) <span class="hljs-built_in">change</span>(<span class="hljs-built_in">ls</span>(p),x,y);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">change</span>(<span class="hljs-built_in">rs</span>(p),x,y);<br>    <span class="hljs-built_in">push_up</span>(p);<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t[p].r&lt;l||r&lt;t[p].l) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(l&lt;=t[p].l &amp;&amp; t[p].r&lt;=r) <span class="hljs-keyword">return</span> t[p].sum;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">ask</span>(<span class="hljs-built_in">ls</span>(p),l,r)+<span class="hljs-built_in">ask</span>(<span class="hljs-built_in">rs</span>(p),l,r);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-type">int</span> opt;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;opt);<br>        <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> l,r;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;l,&amp;r);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">ask</span>(<span class="hljs-number">1</span>,l,r));<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> l,r,x;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;l,&amp;r,&amp;x);<br>            <span class="hljs-built_in">change</span>(<span class="hljs-number">1</span>,l,r,x);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">int</span> x,y;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br>            <span class="hljs-built_in">change</span>(<span class="hljs-number">1</span>,x,y);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-hdu-5306-Gorgeous-Sequence"><a href="#3-hdu-5306-Gorgeous-Sequence" class="headerlink" title="3.hdu 5306 Gorgeous Sequence"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5306">3.hdu 5306 Gorgeous Sequence</a></h4><p>维护序列，区间对一个数取min，询问区间最小值，区间求和</p><p>这个题的做法就比较科幻了。</p><p>《Segment tree Beats!》课件中关于时间复杂度的证明一些是错误的</p><p>可以参考这里，<a href="http://jiry-2.blog.uoj.ac/blog/1404">http://jiry-2.blog.uoj.ac/blog/1404</a></p><p>时间复杂度$O(nlog^{2}n)$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 1000010</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ls(p) (p&lt;&lt;1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rs(p) (p&lt;&lt;1|1)</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> fi,se,cnt,cov;<br>    ll sum;<br>&#125; t[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">char</span> ch;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(ch=<span class="hljs-built_in">getchar</span>()));<br>    x=ch-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(ch=<span class="hljs-built_in">getchar</span>()))<br>        x=x*<span class="hljs-number">10</span>+(ch-<span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_up</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].sum=t[<span class="hljs-built_in">ls</span>(p)].sum+t[<span class="hljs-built_in">rs</span>(p)].sum;<br>    <span class="hljs-keyword">if</span>(t[<span class="hljs-built_in">ls</span>(p)].fi==t[<span class="hljs-built_in">rs</span>(p)].fi)<br>    &#123;<br>        t[p].fi=t[<span class="hljs-built_in">ls</span>(p)].fi;<br>        t[p].se=<span class="hljs-built_in">max</span>(t[<span class="hljs-built_in">ls</span>(p)].se,t[<span class="hljs-built_in">rs</span>(p)].se);<br>        t[p].cnt=t[<span class="hljs-built_in">ls</span>(p)].cnt+t[<span class="hljs-built_in">rs</span>(p)].cnt;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t[<span class="hljs-built_in">ls</span>(p)].fi&gt;t[<span class="hljs-built_in">rs</span>(p)].fi)<br>    &#123;<br>        t[p].fi=t[<span class="hljs-built_in">ls</span>(p)].fi;<br>        t[p].se=<span class="hljs-built_in">max</span>(t[<span class="hljs-built_in">ls</span>(p)].se,t[<span class="hljs-built_in">rs</span>(p)].fi);<br>        t[p].cnt=t[<span class="hljs-built_in">ls</span>(p)].cnt;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        t[p].fi=t[<span class="hljs-built_in">rs</span>(p)].fi;<br>        t[p].se=<span class="hljs-built_in">max</span>(t[<span class="hljs-built_in">ls</span>(p)].fi,t[<span class="hljs-built_in">rs</span>(p)].se);<br>        t[p].cnt=t[<span class="hljs-built_in">rs</span>(p)].cnt;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].cov=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span>(l==r)<br>    &#123;<br>        <span class="hljs-built_in">read</span>(t[p].fi);<br>        t[p].se=<span class="hljs-number">-1</span>;<br>        t[p].cnt=<span class="hljs-number">1</span>;<br>        t[p].sum=t[p].fi;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(<span class="hljs-built_in">ls</span>(p),l,mid);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-built_in">rs</span>(p),mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-built_in">push_up</span>(p);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(y&gt;=t[p].fi) <span class="hljs-keyword">return</span>;<br>    t[p].sum-=<span class="hljs-number">1LL</span>*t[p].cnt*(t[p].fi-y);<br>    t[p].fi=t[p].cov=y;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t[p].cov!=<span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">update</span>(<span class="hljs-built_in">ls</span>(p),t[p].cov);<br>        <span class="hljs-built_in">update</span>(<span class="hljs-built_in">rs</span>(p),t[p].cov);<br>        t[p].cov=<span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(r&lt;L||R&lt;l||t[p].fi&lt;=y) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(l==r)<br>        &#123;<br>            t[p].sum=t[p].fi=y;<br>            t[p].se=<span class="hljs-number">-1</span>;<br>            t[p].cnt=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(t[p].se&lt;y &amp;&amp; y&lt;t[p].fi)<br>        &#123;<br>            <span class="hljs-built_in">update</span>(p,y);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">push_down</span>(p);<br>    <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">change</span>(<span class="hljs-built_in">ls</span>(p),l,mid,L,R,y);<br>    <span class="hljs-built_in">change</span>(<span class="hljs-built_in">rs</span>(p),mid+<span class="hljs-number">1</span>,r,L,R,y);<br>    <span class="hljs-built_in">push_up</span>(p);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ask_max</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(r&lt;L||R&lt;l) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R) <span class="hljs-keyword">return</span> t[p].fi;<br>    <span class="hljs-built_in">push_down</span>(p);<br>    <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">ask_max</span>(<span class="hljs-built_in">ls</span>(p),l,mid,L,R),<span class="hljs-built_in">ask_max</span>(<span class="hljs-built_in">rs</span>(p),mid+<span class="hljs-number">1</span>,r,L,R));<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">ask_sum</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(r&lt;L||R&lt;l) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R) <span class="hljs-keyword">return</span> t[p].sum;<br>    <span class="hljs-built_in">push_down</span>(p);<br>    <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">ask_sum</span>(<span class="hljs-built_in">ls</span>(p),l,mid,L,R)+<span class="hljs-built_in">ask_sum</span>(<span class="hljs-built_in">rs</span>(p),mid+<span class="hljs-number">1</span>,r,L,R);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> T;<br>    <span class="hljs-built_in">read</span>(T);<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-built_in">read</span>(n);<span class="hljs-built_in">read</span>(m);<br>        <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>        <span class="hljs-keyword">while</span>(m--)<br>        &#123;<br>            <span class="hljs-type">int</span> opt,x,y,t;<br>            <span class="hljs-built_in">read</span>(opt);<span class="hljs-built_in">read</span>(x);<span class="hljs-built_in">read</span>(y);<br>            <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">read</span>(t);<br>                <span class="hljs-built_in">change</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,x,y,t);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">1</span>)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">ask_max</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,x,y));<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">ask_sum</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,x,y));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-hdu-5634-Rikka-with-Phi"><a href="#4-hdu-5634-Rikka-with-Phi" class="headerlink" title="4.hdu 5634 Rikka with Phi"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5634">4.hdu 5634 Rikka with Phi</a></h4><p>维护序列，区间赋值，区间取phi，区间求和。</p><p>首先根据定义以及相关公式，知道一个大于2的正整数的欧拉函数都是偶数，一个偶数的欧拉函数就至少小了一半，那么一个数能做的次数也就是$O(logC)$级别的。</p><p>根据前面几个题，这个题的操作就很好想了，如果当前区间的数都相同，那么区间取phi的操作就转化成了区间赋值，同样的打标记即可，不同的话就暴力下去。</p><p>时间复杂度是一个log的就比较确信了，然而并不会证。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 300010</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXN 10000000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ls(p) (p&lt;&lt;1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rs(p) (p&lt;&lt;1|1)</span><br><span class="hljs-type">int</span> prime[MAXN+<span class="hljs-number">5</span>],phi[MAXN+<span class="hljs-number">5</span>],tot;<br><span class="hljs-type">bool</span> vis[MAXN+<span class="hljs-number">5</span>];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> l,r,max,min,cov;<br>    ll sum;<br>&#125; t[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getprime</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    phi[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=MAXN;++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!vis[i])<br>        &#123;<br>            prime[tot++]=i;<br>            phi[i]=i<span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;tot &amp;&amp; prime[j]&lt;=MAXN/i;++j)<br>        &#123;<br>            vis[i*prime[j]]=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(i%prime[j]) phi[i*prime[j]]=phi[i]*(prime[j]<span class="hljs-number">-1</span>);<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                phi[i*prime[j]]=phi[i]*prime[j];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_up</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].sum=t[<span class="hljs-built_in">ls</span>(p)].sum+t[<span class="hljs-built_in">rs</span>(p)].sum;<br>    t[p].max=<span class="hljs-built_in">max</span>(t[<span class="hljs-built_in">ls</span>(p)].max,t[<span class="hljs-built_in">rs</span>(p)].max);<br>    t[p].min=<span class="hljs-built_in">min</span>(t[<span class="hljs-built_in">ls</span>(p)].min,t[<span class="hljs-built_in">rs</span>(p)].min);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].l=l;t[p].r=r;<br>    t[p].cov=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span>(l==r)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>        t[p].sum=t[p].max=t[p].min=x;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(<span class="hljs-built_in">ls</span>(p),l,mid);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-built_in">rs</span>(p),mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-built_in">push_up</span>(p);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].sum=<span class="hljs-number">1LL</span>*y*(t[p].r-t[p].l+<span class="hljs-number">1</span>);<br>    t[p].max=t[p].min=y;<br>    t[p].cov=y;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t[p].cov!=<span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">update</span>(<span class="hljs-built_in">ls</span>(p),t[p].cov);<br>        <span class="hljs-built_in">update</span>(<span class="hljs-built_in">rs</span>(p),t[p].cov);<br>        t[p].cov=<span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t[p].r&lt;l||r&lt;t[p].l) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(l&lt;=t[p].l &amp;&amp; t[p].r&lt;=r &amp;&amp; t[p].max==t[p].min)<br>    &#123;<br>        <span class="hljs-built_in">update</span>(p,phi[t[p].max]);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">push_down</span>(p);<br>    <span class="hljs-built_in">change</span>(<span class="hljs-built_in">ls</span>(p),l,r);<br>    <span class="hljs-built_in">change</span>(<span class="hljs-built_in">rs</span>(p),l,r);<br>    <span class="hljs-built_in">push_up</span>(p);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cover</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t[p].r&lt;l||r&lt;t[p].l) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(l&lt;=t[p].l &amp;&amp; t[p].r&lt;=r)<br>    &#123;<br>        <span class="hljs-built_in">update</span>(p,y);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">push_down</span>(p);<br>    <span class="hljs-built_in">cover</span>(<span class="hljs-built_in">ls</span>(p),l,r,y);<br>    <span class="hljs-built_in">cover</span>(<span class="hljs-built_in">rs</span>(p),l,r,y);<br>    <span class="hljs-built_in">push_up</span>(p);<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t[p].r&lt;l||r&lt;t[p].l) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(l&lt;=t[p].l &amp;&amp; t[p].r&lt;=r) <span class="hljs-keyword">return</span> t[p].sum;<br>    <span class="hljs-built_in">push_down</span>(p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">ask</span>(<span class="hljs-built_in">ls</span>(p),l,r)+<span class="hljs-built_in">ask</span>(<span class="hljs-built_in">rs</span>(p),l,r);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">getprime</span>();<br>    <span class="hljs-type">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;T);<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>        <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>        <span class="hljs-keyword">while</span>(m--)<br>        &#123;<br>            <span class="hljs-type">int</span> opt,l,r,x;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;opt,&amp;l,&amp;r);<br>            <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">1</span>) <span class="hljs-built_in">change</span>(<span class="hljs-number">1</span>,l,r);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(opt==<span class="hljs-number">2</span>)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>                <span class="hljs-built_in">cover</span>(<span class="hljs-number">1</span>,l,r,x);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">ask</span>(<span class="hljs-number">1</span>,l,r));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;小清新线段树的概念是由jiry_2提出的，区别于zkw(重口味)线段树命名。这里我的理解是可以归为一类结合时间复杂度分析以及懒标记应用的非传统线段树。不过既为非传统，这类题目总体来说还是做法各异，下面就结合题目做一些分析。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;入门难度&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="算法学习" scheme="https://izard.space/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="线段树" scheme="https://izard.space/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="时间复杂度" scheme="https://izard.space/tags/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>一类区间分治技巧</title>
    <link href="https://izard.space/2018/10/30/%E4%B8%80%E7%B1%BB%E5%8C%BA%E9%97%B4%E5%88%86%E6%B2%BB%E6%8A%80%E5%B7%A7/"/>
    <id>https://izard.space/2018/10/30/%E4%B8%80%E7%B1%BB%E5%8C%BA%E9%97%B4%E5%88%86%E6%B2%BB%E6%8A%80%E5%B7%A7/</id>
    <published>2018-10-30T08:03:00.000Z</published>
    <updated>2020-04-20T01:29:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于一类区间询问问题，如果可以<strong>离线</strong>并且可以<strong>快速合并区间信息</strong>那么就有一个非常实用的分治方法。首先我们对总区间分治下去，当前区间$[l , r]$中点为$mid$，那么我们将所有的询问分成三类，一类包括$mid$这个点，一类完全在左侧，一类完全在右侧，我们只要在当前这层解决第一类的所有询问，后两类分治下去即可。怎么快速的求呢？方法也非常简单，因为信息可以快速合并，那么我们以$mid$为界，往前处理出所有后缀信息，往后处理出所有前缀信息，对于一个跨过$mid$的询问，拿两部分拼一下就算出答案了！</p><p>比在线算法优秀的地方在于可以优雅的去掉询问数所乘的log。</p><h3 id="练习题目"><a href="#练习题目" class="headerlink" title="练习题目"></a>练习题目</h3><h4 id="1-2017-2018-Petrozavodsk-Winter-Training-Camp-Saratov-SU-Contest-J-Subsequence-Sum-Queries"><a href="#1-2017-2018-Petrozavodsk-Winter-Training-Camp-Saratov-SU-Contest-J-Subsequence-Sum-Queries" class="headerlink" title="1.2017-2018 Petrozavodsk Winter Training Camp, Saratov SU Contest J. Subsequence Sum Queries"></a>1.<a href="http://codeforces.com/gym/101741">2017-2018 Petrozavodsk Winter Training Camp, Saratov SU Contest J. Subsequence Sum Queries</a></h4><p>考虑背包dp，如果用普通的线段树，时间复杂度$O((n+q)m^2logn)$，因为拆成logn个区间，要完全合并两个背包log次，合并一次(循环卷积)复杂度是$O(m^2)$，必T无疑。用优秀的分治就可以降到$O(m(nlogn+q))$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 200010</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> l,r,o;<br>&#125; t[N],tmp[N];<br><span class="hljs-type">int</span> n,m,len;<br><span class="hljs-type">int</span> sub[N][<span class="hljs-number">22</span>],pre[N][<span class="hljs-number">22</span>];<br><span class="hljs-type">int</span> a[N],ans[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> *f,<span class="hljs-type">int</span> *g)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;++i)<br>    &#123;<br>        ans+=<span class="hljs-number">1LL</span>*f[i]*g[(m-i)%m]%mod;<br>        <span class="hljs-keyword">if</span>(ans&gt;=mod) ans-=mod;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;r||L&gt;R) <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> x=L<span class="hljs-number">-1</span>,y=R+<span class="hljs-number">1</span>,now=L,j;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=L;i&lt;=R;++i)<br>        <span class="hljs-keyword">if</span>(t[i].r&lt;mid) tmp[++x]=t[i];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t[i].l&gt;mid) tmp[--y]=t[i];<br>        <span class="hljs-keyword">else</span> t[now++]=t[i];<br><br>    sub[mid+<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;m;++i) sub[mid+<span class="hljs-number">1</span>][i]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=mid;i&gt;=l;--i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;++j)<br>            sub[i][j]=(sub[i+<span class="hljs-number">1</span>][j]+sub[i+<span class="hljs-number">1</span>][(j-a[i]+m)%m])%mod;<br><br>    pre[mid][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;m;++i) pre[mid][i]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=mid+<span class="hljs-number">1</span>;i&lt;=r;++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;++j)<br>            pre[i][j]=(pre[i<span class="hljs-number">-1</span>][j]+pre[i<span class="hljs-number">-1</span>][(j-a[i]+m)%m])%mod;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=L;i&lt;now;++i)<br>        ans[t[i].o]=<span class="hljs-built_in">calc</span>(sub[t[i].l],pre[t[i].r]);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=L;i&lt;=x;++i) t[i]=tmp[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=y;i&lt;=R;++i) t[i]=tmp[i];<br>    <span class="hljs-built_in">solve</span>(l,mid<span class="hljs-number">-1</span>,L,x);<br>    <span class="hljs-built_in">solve</span>(mid+<span class="hljs-number">1</span>,r,y,R);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>        a[i]%=m;<br>    &#125;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;len);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=len;++i)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;t[i].l,&amp;t[i].r);<br>        t[i].o=i;<br>    &#125;<br>    <span class="hljs-built_in">solve</span>(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,len);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=len;++i)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2018-Multi-University-Training-Contest-3-Problem-J-Rectangle-Radar-Scanner"><a href="#2-2018-Multi-University-Training-Contest-3-Problem-J-Rectangle-Radar-Scanner" class="headerlink" title="2.2018 Multi-University Training Contest 3 Problem J. Rectangle Radar Scanner"></a>2.<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6328">2018 Multi-University Training Contest 3 Problem J. Rectangle Radar Scanner</a></h4><p>对x轴分治，对于y用线段树维护一下就好了</p><p>时间复杂度$O(nlog^2n+mlogn)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 100010</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> M 1000010</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ls(p) (p&lt;&lt;1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rs(p) (p&lt;&lt;1|1)</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">segment</span><br>&#123;<br>    <span class="hljs-type">int</span> l,r;<br>    <span class="hljs-type">int</span> min,max,prod;<br>&#125; t[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">REC</span><br>&#123;<br>    <span class="hljs-type">int</span> xl,xr,yl,yr,o;<br>&#125; rec[M],tmp[M];<br><span class="hljs-type">int</span> n,m,K;<br><span class="hljs-type">int</span> mn[M],mx[M],prod[M];<br>pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; val[N];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmpl</span><span class="hljs-params">(<span class="hljs-type">const</span> REC &amp;a,<span class="hljs-type">const</span> REC &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a.xl&gt;b.xl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmpr</span><span class="hljs-params">(<span class="hljs-type">const</span> REC &amp;a,<span class="hljs-type">const</span> REC &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a.xr&lt;b.xr;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_up</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].min=<span class="hljs-built_in">min</span>(t[<span class="hljs-built_in">ls</span>(p)].min,t[<span class="hljs-built_in">rs</span>(p)].min);<br>    t[p].max=<span class="hljs-built_in">max</span>(t[<span class="hljs-built_in">ls</span>(p)].max,t[<span class="hljs-built_in">rs</span>(p)].max);<br>    t[p].prod=<span class="hljs-number">1LL</span>*t[<span class="hljs-built_in">ls</span>(p)].prod*t[<span class="hljs-built_in">rs</span>(p)].prod%K;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    t[p].l=l;t[p].r=r;<br>    t[p].min=INF;<br>    t[p].max=-INF;<br>    t[p].prod=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(l==r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(<span class="hljs-built_in">ls</span>(p),l,mid);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-built_in">rs</span>(p),mid+<span class="hljs-number">1</span>,r);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t[p].l==t[p].r)<br>    &#123;<br>        t[p].min=<span class="hljs-built_in">min</span>(t[p].min,y);<br>        t[p].max=<span class="hljs-built_in">max</span>(t[p].max,y);<br>        t[p].prod=<span class="hljs-number">1LL</span>*t[p].prod*y%K;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(x&lt;=mid) <span class="hljs-built_in">insert</span>(<span class="hljs-built_in">ls</span>(p),x,y);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">insert</span>(<span class="hljs-built_in">rs</span>(p),x,y);<br>    <span class="hljs-built_in">push_up</span>(p);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(rec[x].yl&lt;=t[p].l &amp;&amp; t[p].r&lt;=rec[x].yr)<br>    &#123;<br>        <span class="hljs-type">int</span> o=rec[x].o;<br>        mn[o]=<span class="hljs-built_in">min</span>(mn[o],t[p].min);<br>        mx[o]=<span class="hljs-built_in">max</span>(mx[o],t[p].max);<br>        prod[o]=<span class="hljs-number">1LL</span>*prod[o]*t[p].prod%K;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(rec[x].yl&lt;=mid) <span class="hljs-built_in">ask</span>(<span class="hljs-built_in">ls</span>(p),x);<br>    <span class="hljs-keyword">if</span>(rec[x].yr&gt;mid) <span class="hljs-built_in">ask</span>(<span class="hljs-built_in">rs</span>(p),x);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">travel</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t[p].min==INF) <span class="hljs-keyword">return</span>;<br>    t[p].min=INF;<br>    t[p].max=-INF;<br>    t[p].prod=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(t[p].l==t[p].r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">travel</span>(<span class="hljs-built_in">ls</span>(p));<br>    <span class="hljs-built_in">travel</span>(<span class="hljs-built_in">rs</span>(p));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;r||L&gt;R) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> x=L<span class="hljs-number">-1</span>,y=R+<span class="hljs-number">1</span>,now=L,j;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=L;i&lt;=R;++i)<br>        <span class="hljs-keyword">if</span>(rec[i].xr&lt;mid) tmp[++x]=rec[i];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rec[i].xl&gt;mid) tmp[--y]=rec[i];<br>        <span class="hljs-keyword">else</span> rec[now++]=rec[i];<br>    <span class="hljs-built_in">sort</span>(rec+L,rec+now,cmpl);<br>    j=mid+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=L;i&lt;now;++i)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(j&gt;rec[i].xl)<br>        &#123;<br>            --j;<br>            <span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>,val[j].first,val[j].second);<br>        &#125;<br>        <span class="hljs-built_in">ask</span>(<span class="hljs-number">1</span>,i);<br>    &#125;<br>    <span class="hljs-built_in">travel</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">sort</span>(rec+L,rec+now,cmpr);<br>    j=mid;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=L;i&lt;now;++i)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(j&lt;rec[i].xr)<br>        &#123;<br>            ++j;<br>            <span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>,val[j].first,val[j].second);<br>        &#125;<br>        <span class="hljs-built_in">ask</span>(<span class="hljs-number">1</span>,i);<br>    &#125;<br>    <span class="hljs-built_in">travel</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=L;i&lt;=x;++i) rec[i]=tmp[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=y;i&lt;=R;++i) rec[i]=tmp[i];<br>    <span class="hljs-built_in">solve</span>(l,mid<span class="hljs-number">-1</span>,L,x);<br>    <span class="hljs-built_in">solve</span>(mid+<span class="hljs-number">1</span>,r,y,R);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">2</span>],b[<span class="hljs-number">2</span>],c[<span class="hljs-number">2</span>],d[<span class="hljs-number">2</span>];<br>    <span class="hljs-type">int</span> p,q,r,mod;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d%d%d%d%d%d%d&quot;</span>,&amp;m,a,b,c,d,&amp;p,&amp;q,&amp;r,&amp;mod,&amp;K);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;++i)<br>    &#123;<br>        a[i&amp;<span class="hljs-number">1</span>]=(<span class="hljs-number">1LL</span>*p*a[(i&amp;<span class="hljs-number">1</span>)^<span class="hljs-number">1</span>]+<span class="hljs-number">1LL</span>*q*b[(i&amp;<span class="hljs-number">1</span>)^<span class="hljs-number">1</span>]+r)%mod;<br>        b[i&amp;<span class="hljs-number">1</span>]=(<span class="hljs-number">1LL</span>*p*b[(i&amp;<span class="hljs-number">1</span>)^<span class="hljs-number">1</span>]+<span class="hljs-number">1LL</span>*q*a[(i&amp;<span class="hljs-number">1</span>)^<span class="hljs-number">1</span>]+r)%mod;<br>        c[i&amp;<span class="hljs-number">1</span>]=(<span class="hljs-number">1LL</span>*p*c[(i&amp;<span class="hljs-number">1</span>)^<span class="hljs-number">1</span>]+<span class="hljs-number">1LL</span>*q*d[(i&amp;<span class="hljs-number">1</span>)^<span class="hljs-number">1</span>]+r)%mod;<br>        d[i&amp;<span class="hljs-number">1</span>]=(<span class="hljs-number">1LL</span>*p*d[(i&amp;<span class="hljs-number">1</span>)^<span class="hljs-number">1</span>]+<span class="hljs-number">1LL</span>*q*c[(i&amp;<span class="hljs-number">1</span>)^<span class="hljs-number">1</span>]+r)%mod;<br>        rec[i].xl=<span class="hljs-built_in">min</span>(a[i&amp;<span class="hljs-number">1</span>]%n,b[i&amp;<span class="hljs-number">1</span>]%n)+<span class="hljs-number">1</span>;<br>        rec[i].xr=<span class="hljs-built_in">max</span>(a[i&amp;<span class="hljs-number">1</span>]%n,b[i&amp;<span class="hljs-number">1</span>]%n)+<span class="hljs-number">1</span>;<br>        rec[i].yl=<span class="hljs-built_in">min</span>(c[i&amp;<span class="hljs-number">1</span>]%n,d[i&amp;<span class="hljs-number">1</span>]%n)+<span class="hljs-number">1</span>;<br>        rec[i].yr=<span class="hljs-built_in">max</span>(c[i&amp;<span class="hljs-number">1</span>]%n,d[i&amp;<span class="hljs-number">1</span>]%n)+<span class="hljs-number">1</span>;<br>        rec[i].o=i;<br>        mn[i]=INF;<br>        mx[i]=-INF;<br>        prod[i]=<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;T);<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>        &#123;<br>            <span class="hljs-type">int</span> x,y;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br>            val[i]=<span class="hljs-built_in">make_pair</span>(x,y);<br>        &#125;<br>        <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>        <span class="hljs-built_in">read</span>();<br>        <span class="hljs-built_in">solve</span>(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,m);<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;++i)<br>        <span class="hljs-keyword">if</span>(mn[i]!=INF)<br>            ans+=prod[i]^mx[i]^mn[i];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对于一类区间询问问题，如果可以&lt;strong&gt;离线&lt;/strong&gt;并且可以&lt;strong&gt;快速合并区间信息&lt;/strong&gt;那么就有一个非常实用的分治方法。首先我们对总区间分治下去，当前区间$[l , r]$中点为$mid$，那么我们将所有的询问分成三类，一类包括$mid</summary>
      
    
    
    
    <category term="算法学习" scheme="https://izard.space/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="分治" scheme="https://izard.space/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
</feed>
